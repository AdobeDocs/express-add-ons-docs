{"version":3,"file":"component---src-pages-guides-develop-use-cases-content-management-md-31af1c8ebddf856d3ced.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/develop/use_cases/content_management.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"importing-content\"\n    }}>{`Importing Content`}</h2>\n    <p>{`Importing content into a design is one of the most popular use cases for an add-on. For instance, to add content retrieved from a third-party service or directly from the local hard drive. The following sections cover all of the different types of content that can be imported/added to the document from your add-on.`}</p>\n    <h3 {...{\n      \"id\": \"image-content\"\n    }}>{`Image Content`}</h3>\n    <p>{`The following example demonstrates how to add an image to the current page. The first function shows how to add an image directly from a `}<inlineCode parentName=\"p\">{`blob`}</inlineCode>{` object, and the second illustrates how to fetch an image via a URL to add. Please also refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/addonsdk/app-document.md#methods\"\n      }}>{`related SDK Reference section`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/samples.md\"\n      }}>{`code samples`}</a>{` for more details.`}</p>\n    <h4 {...{\n      \"id\": \"add-image-example\"\n    }}>{`Add Image Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\n// Wait for the SDK to be ready\nawait addOnUISdk.ready;\n\n// Reference to the active document\nconst { document } = addOnUISdk.app;\n\n// Add image via blob to the current page\nasync function addImageFromBlob(blob) {\n  try {\n    await document.addImage(blob);\n  } catch (error) {\n    console.log(\"Failed to add the image to the page.\");\n  }\n}\n\n// Add image via url to the current page\nasync function addImageFromURL(url) {\n  try {\n    const blob = await fetch(url).then((response) => response.blob());\n    await document.addImage(blob);\n  } catch (error) {\n    console.log(\"Failed to add the image to the page.\");\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"animated-images\"\n    }}>{`Animated Images`}</h3>\n    <p>{`There's a specific method provided in the `}<inlineCode parentName=\"p\">{`AddOnSDK`}</inlineCode>{` to allow you to add animated images (gifs) to the current page as well.`}</p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` The `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#addanimatedimage\"\n      }}><inlineCode parentName=\"a\">{`addAnimatedImage()`}</inlineCode></a>{` method is currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until it has been declared stable. To use this method, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"add-animated-image-example\"\n    }}>{`Add Animated Image Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Add animated image(blob) to the current page\nasync function addAnimatedImageFromBlob(blob) {\n  try {\n      await document.addAnimatedImage(blob);\n  }\n  catch(error) {\n      console.log(\"Failed to add the animated image to the page.\");\n  }\n}\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`Refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/app-document#image-requirements\"\n      }}>{`AddOnSDK Document Reference`}</a>{` for specific details on supported image and GIF requirements.`}</p>\n    <h3 {...{\n      \"id\": \"video-and-audio-content\"\n    }}>{`Video and Audio Content`}</h3>\n    <p>{`You can also import video and audio content similarly via the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/app-document/#addvideo\"\n      }}><inlineCode parentName=\"a\">{`addVideo()`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/app-document#addaudio\"\n      }}><inlineCode parentName=\"a\">{`addAudio()`}</inlineCode></a>{` methods. `}<strong parentName=\"p\">{`Please note:`}</strong>{` the `}<inlineCode parentName=\"p\">{`addAudio()`}</inlineCode>{` method requires an additional `}<inlineCode parentName=\"p\">{`MediaAttributes`}</inlineCode>{` object parameter containing the `}<inlineCode parentName=\"p\">{`title`}</inlineCode>{` of the audio object you're importing. See the example below, as well as the associated `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/app-document/#methods\"\n      }}>{`SDK Reference`}</a>{` for more details. There's also an `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/express-add-on-samples/tree/main/samples/audio-recording-add-on\"\n      }}><inlineCode parentName=\"a\">{`audio-recording-add-on`}</inlineCode></a>{` sample available that you can use as an additional reference.`}</p>\n    <h4 {...{\n      \"id\": \"add-audio-example\"\n    }}>{`Add Audio Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function addAudioFromBlob(blob) {\n  try {\n      await document.addAudio(blob, {title: \"Jazzy beats\"});\n  }\n  catch(error) {\n      console.log(\"Failed to add the audio to the page.\");\n  }\n}\n\nasync function addAudioFromURL(url) {\n  try {\n      const blob = await fetch(url).then(response => response.blob());\n      await document.addAudio(blob, {title: \"Jazzy beats\"});\n  }\n  catch(error) {\n      console.log(\"Failed to add the audio to the page.\");\n  }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"add-video-example\"\n    }}>{`Add Video Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function addVideoFromBlob(blob) {\n  try {\n      await document.addVideo(blob);\n  }\n  catch(error) {\n      console.log(\"Failed to add the video to the page.\");\n  }\n}\n\nasync function addVideoFromURL(url) {\n  try {\n     const blob = await fetch(url).then(response => response.blob());\n     await document.addVideo(blob);\n  }\n  catch(error) {\n    console.log(\"Failed to add the video to the page.\");\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"pdfs-and-powerpoint-presentations\"\n    }}>{`PDFs and PowerPoint Presentations`}</h3>\n    <p>{`If you need to import/add a PDF or a PowerPoint presentation to the document, you can use the designated import methods for each shown in the examples below.`}</p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` The `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/app-document#import-content-methods\"\n      }}><inlineCode parentName=\"a\">{`importPdf()`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/app-document#import-content-methods\"\n      }}><inlineCode parentName=\"a\">{`importPresentation()`}</inlineCode></a>{` methods are currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until it has been declared stable. To use this method, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"import-pdf-example\"\n    }}>{`Import PDF Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSDKAPI from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n  \n// Reference to the active document\nconst {document} = AddOnSDKAPI.app;\n \nconst mediaAttributes = {title: \"Sample.pdf\"}\n \n// Add PDF to current page\nfunction importPdf(blob, mediaAttributes) {\n  try {\n    document.importPdf(blob, mediaAttributes);\n  }\n  catch(error) {\n    console.log(\"Failed to add pdf to the document.\");\n  }\n}\n \n// Add pdf(url) to the current page\nasync function importPdfFrom(url) {\n  try {\n    const blob = await fetch(url).then(response => response.blob());\n    document.importPdf(blob, {title: \"Sample.pdf\"});\n  }\n  catch(error) {\n    console.log(\"Failed to add pdf to document.\");\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"import-presentation-example\"\n    }}>{`Import Presentation Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSDKAPI from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n  \n// Reference to the active document\nconst {document} = AddOnSDKAPI.app;\n \nconst mediaAttributes = {title: \"Sample.pptx\"} // only .pptx file types are supported by Express\n \n// Import presentation to document\nfunction importPresentation(blob, mediaAttributes) {\n  try {\n    document.importPresentation(blob, mediaAttributes);\n  }\n  catch(error) {\n    console.log(\"Failed to add the presentation to the document.\");\n  }\n}\n \n// Add presentation(url) to the current page\nasync function importPresentationFrom(url) {\n  try {\n    const blob = await fetch(url).then(response => response.blob());\n    document.importPresentation(blob, {title: \"Sample.pptx\"});\n  }\n  catch(error) {\n    console.log(\"Failed to add the presentation to document.\");\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"exporting-content\"\n    }}>{`Exporting Content`}</h2>\n    <p>{`Another popular feature available for use in your add-on is the ability to export content. For instance, if you want to allow the user to save/download the current design, (or range of a design), with certain export configurations to their local hard drive. Some examples for exporting content are provided below, but also check out the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/app-document/#createrenditions\"\n      }}><inlineCode parentName=\"a\">{`createRenditions`}</inlineCode>{` section in the SDK Reference`}</a>{` for more specific options and details, as well as the `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/samples.md#export-sample\"\n      }}>{`export-sample add-on`}</a>{`.`}</p>\n    <p>{`The steps to export content:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Call `}<inlineCode parentName=\"li\">{`createRenditions()`}</inlineCode>{` to get the renditions based on your export configuration options.`}</li>\n      <li parentName=\"ul\">{`Convert the `}<inlineCode parentName=\"li\">{`blob`}</inlineCode>{` object returned in the response to a `}<inlineCode parentName=\"li\">{`string`}</inlineCode>{` with the `}<inlineCode parentName=\"li\">{`URL.createObjectURL(blob)`}</inlineCode>{` method.`}</li>\n      <li parentName=\"ul\">{`Create or update an anchor `}<inlineCode parentName=\"li\">{`<a>`}</inlineCode>{` element's `}<inlineCode parentName=\"li\">{`href`}</inlineCode>{` value with the URL string from the above step.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"basic-example\"\n    }}>{`Basic Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\nconst response = await addOnUISdk.app.document.createRenditions({\n    range: \"currentPage\",\n    format: \"image/jpeg\",\n});\n\nconst downloadUrl = URL.createObjectURL(response[0].blob);\ndocument.getElementById(\"anchor\").href = downloadUrl; \n\n<a href=\"#\" download=\"download\" id=\"anchor\" style=\"text-decoration: none\">\n  <sp-button id=\"download-button\" style=\"display: none\">Download</sp-button>\n</a>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"premium-content\"\n    }}>{`Premium Content`}</h3>\n    <p>{`While the above is a very basic example, add-ons that call `}<inlineCode parentName=\"p\">{`createRenditions`}</inlineCode>{` to export content should ensure proper handling in the case of premium content. There are a few strategies that can be implemented.`}</p>\n    <h4 {...{\n      \"id\": \"option-1-show-a-premium-content-error-with-the-upgrade-option\"\n    }}>{`Option 1: Show a Premium Content error with the \"Upgrade\" option`}</h4>\n    <p>{`Display a warning message when the user is not entitled to export/download premium content, and include a button to allow them to upgrade. Please note that you can detect in advance if the user is entitled to premium content (`}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/addonsdk/app-currentUser.md#isPremiumUser\"\n      }}><inlineCode parentName=\"a\">{`isPremiumUser()`}</inlineCode></a>{`) and whether the page contains premium content (`}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/addonsdk/app-document.md#pagemetadata\"\n      }}><inlineCode parentName=\"a\">{`hasPremiumContent`}</inlineCode></a>{`) in the first place. A try/catch block intercepting the `}<inlineCode parentName=\"p\">{`\"USER_NOT_ENTITLED_TO_PREMIUM_CONTENT\"`}</inlineCode>{` string in the error message as the primary way to deal with it is no longer recommended.`}</p>\n    <h4 {...{\n      \"id\": \"example\"\n    }}>{`Example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\nconst { app, constants } = addOnUISdk;\nconst { ButtonType, Range, RenditionFormat } = constants;\n\nconst showPremiumContentError = async () => {\n  const { buttonType } = await window.addOnUISdk.app.showModalDialog({\n    variant: \"error\",\n    title: \"Export failed\",\n    description: \"Sorry, we were not able to export your design. Some assets are only included in the Premium plan. Try replacing with something else or upgrading Adobe Express to a Premium plan.\", \n    buttonLabels: { secondary: \"Upgrade\" }\n  });\n\n  if (buttonType === ButtonType.cancel) return false; // user is still not premium\n  if (buttonType === ButtonType.secondary) {\n    // Original flow (don't use anymore)\n    // ❌ window.open(\"https://www.adobe.com/go/express_addons_pricing\", \"_blank\")\n    // 👇 Use startPremiumUpgradeIfFreeUser() instead \n    const hasUpgradedToPremium = await app.startPremiumUpgradeIfFreeUser();\n    return hasUpgradedToPremium;\n  }\n}\n\nconst isRangeSafeToExport = async (range) => {\n  const userIsPremium = await app.currentUser.isPremiumUser();\n  const pages = await app.document.getPagesMetadata({range});\n  const containsPremiumContent = pages.some(page => page.hasPremiumContent);\n  return (containsPremiumContent && userIsPremium) || !containsPremiumContent;  \n}\n\nconst exportDocument = async () => {\n  // 👇 Testing purposes only!\n  app.devFlags.simulateFreeUser = true; // Remove this line in production!\n\n  let isSafeToExport = await isRangeSafeToExport(Range.entireDocument);  \n  if (!isSafeToExport) {\n    const isNowPremiumUser = await showPremiumContentError();\n    isSafeToExport = isNowPremiumUser;\n  }\n  \n  if (isSafeToExport) {\n    try {\n      const renditions = await app.document.createRenditions({\n        range: Range.entireDocument, format: RenditionFormat.png\n      });\n      renditions.forEach(rendition => { /* do your thing w/ the renditions */ });     \n    } catch (err) {\n      // did someone just add premium content in the split second between\n      // our original check? did the user just downgrade?\n      if (err.message?.includes(\"USER_NOT_ENTITLED_TO_PREMIUM_CONTENT\")) {\n        return await exportDocument(); // try again\n      }\n    }\n  }  \n}\n\ndocument.querySelector(\"#export\").onclick = exportDocument;\n`}</code></pre>\n    <p>{`Please note that `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/addonsdk/addonsdk-app.md#startpremiumupgradeiffreeuser\"\n      }}><inlineCode parentName=\"a\">{`startPremiumUpgradeIfFreeUser()`}</inlineCode></a>{` allows a more streamlined user experience for upgrading to premium content, compared to the older method of redirecting to the Adobe Express pricing page, which is now deprecated.`}</p>\n    <h4 {...{\n      \"id\": \"option-2-provide-visual-cues-in-the-ui\"\n    }}>{`Option 2: Provide visual cues in the UI`}</h4>\n    <p>{`Developers can provide visual cues directly in the add-on UI to show that users are not entitled to export/download premium content. This can be done in various ways, for instance, by disabling the export/download button, replacing it with an upgrade button, or appending a brief explanation, tooltip, or icon. This would inform users upfront that they are not entitled to export/download premium content, preventing them from facing the warning popup after attempting to do so.`}</p>\n    <h4 {...{\n      \"id\": \"option-3-allow-preview-of-premium-content\"\n    }}>{`Option 3: Allow preview of Premium Content`}</h4>\n    <p>{`Set a `}<inlineCode parentName=\"p\">{`renditionPreview`}</inlineCode>{` intent in the `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/manifest/index.md#requirements\"\n      }}>{`manifest requirements`}</a>{`, and add an extra argument to the `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/addonsdk/app-document.md#createrenditions\"\n      }}><inlineCode parentName=\"a\">{`createRenditions`}</inlineCode>{` method`}</a>{` (ie: `}<inlineCode parentName=\"p\">{`RenditionIntent.preview`}</inlineCode>{`) to generate previews that can still use premium content.`}</p>\n    <p><strong parentName=\"p\">{`IMPORTANT`}</strong>{`: Your add-on must not allow these previewed images to be downloaded or persisted on a backend (for any longer than necessary to serve the result back to the user). To that end, be sure that users cannot:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`right-click -> save as`}</strong>{`: To prevent this, reject the `}<inlineCode parentName=\"li\">{`contextmenu`}</inlineCode>{` event`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`drag the image off the panel`}</strong>{`: To prevent this, you can reject the `}<inlineCode parentName=\"li\">{`dragstart`}</inlineCode>{` event`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` These behaviors are enabled by default if you use an `}<inlineCode parentName=\"p\">{`<img>`}</inlineCode>{` tag. If you apply the image using `}<inlineCode parentName=\"p\">{`background-image`}</inlineCode>{` CSS, these behaviors aren't added.`}</p>\n    <h4 {...{\n      \"id\": \"example-1\"\n    }}>{`Example:`}</h4>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\n// Wait for the SDK to be ready\nawait addOnUISdk.ready;\n\n// Display preview of all pages in the AddOn UI\nasync function displayPreview() {\n  try {\n    const renditionOptions = {\n      range: addOnUISdk.constants.Range.entireDocument,\n      format: addOnUISdk.constants.RenditionFormat.png,\n      backgroundColor: 0x7FAA77FF\n    };\n    const renditions = await addOnUISdk.app.document.createRenditions(renditionOptions, addOnUISdk.constants.RenditionIntent.preview);\n    renditions.forEach(rendition => {\n      const image = document.createElement(\"img\");\n      image.src = URL.createObjectURL(rendition.blob);\n      document.body.appendChild(image);\n    });\n  }\n  catch(error) {\n    console.log(\"Failed to create renditions:\", error);\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n \n// Wait for the SDK to be ready\nawait addOnUISdk.ready;\n  \n// Display preview of all pages in the AddOn UI\nasync function displayPreview() {\n  try {\n    const renditionOptions: PngRenditionOptions = {\n      range: addOnUISdk.constants.Range.entireDocument,\n      format: addOnUISdk.constants.RenditionFormat.png,\n      backgroundColor: 0x7FAA77FF\n    };\n    const renditions = await addOnUISdk.app.document.createRenditions(renditionOptions, addOnUISdk.constants.RenditionIntent.preview);\n    renditions.forEach(rendition => {\n      const image = document.createElement(\"img\");\n      image.src = URL.createObjectURL(rendition.blob);\n      document.body.appendChild(image);\n    });\n  }\n  catch(error) {\n    console.log(\"Failed to create renditions:\", error);\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","repeat","languages","isMDXComponent"],"sourceRoot":""}