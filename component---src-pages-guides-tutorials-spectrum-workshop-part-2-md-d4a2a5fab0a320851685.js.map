{"version":3,"file":"component---src-pages-guides-tutorials-spectrum-workshop-part-2-md-d4a2a5fab0a320851685.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/tutorials/spectrum-workshop/part2.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lesson-2-use-spectrum-web-components-in-a-react-based-add-on\"\n    }}>{`Lesson 2: Use Spectrum Web Components in a React-based add-on`}</h1>\n    <p>{`Learn how to configure and use Spectrum Web Components in a basic JavaScript add-on.`}</p>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <p>{`In this lesson, you will implement the bingo card generator add-on in a React-based project with a library called `}<a parentName=\"p\" {...{\n        \"href\": \"https://opensource.adobe.com/spectrum-web-components/using-swc-react/\"\n      }}><strong parentName=\"a\">{`swc-react`}</strong></a>{`, a collection of wrapper components designed to make Spectrum Web Components (SWC) work like native React components in a React application. They serve as a bridge between React and Spectrum Web Components, and their properties and event names are directly derived from their corresponding SWC components. As such, the corresponding `}<a parentName=\"p\" {...{\n        \"href\": \"https://opensource.adobe.com/spectrum-web-components/\"\n      }}>{`Spectrum Web Components documentation`}</a>{` can be used as the documentation reference.`}</p>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`We recommend using `}<strong parentName=\"p\">{`swc-react`}</strong>{` over `}<a parentName=\"p\" {...{\n        \"href\": \"https://react-spectrum.adobe.com/react-spectrum/index.html\"\n      }}><strong parentName=\"a\">{`React Spectrum`}</strong></a>{` currently since the Spectrum Web Components library provides a more extensive set of components with an explicit Express theme that is continuously updated. React Spectrum’s Express theme is in alpha, doesn't have full component coverage, and is currently not being updated. Please note, however, that `}<a parentName=\"p\" {...{\n        \"href\": \"https://s2.spectrum.adobe.com/\"\n      }}>{`a new version of Spectrum`}</a>{` will be released sometime this year, and an update to the React Spectrum libraries will follow. In the meantime we recommend using the swc-react wrappersx.`}</p>\n    <h2 {...{\n      \"id\": \"steps\"\n    }}>{`Steps`}</h2>\n    <h3 {...{\n      \"id\": \"create-project\"\n    }}>{`Create project`}</h3>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a new project with the CLI based on the `}<inlineCode parentName=\"p\">{`react-javascript`}</inlineCode>{` template:`}</p>\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`npx @adobe/create-ccweb-add-on bingo-card-generator-react --template react-javascript`}</inlineCode></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Open the project in your favorite code editor and navigate to the `}<inlineCode parentName=\"p\">{`src/components/App.jsx`}</inlineCode>{` file. Notice that it's preconfigured with the `}<inlineCode parentName=\"p\">{`@swc-react/theme`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`@swc-react/button`}</inlineCode>{` packages and their associated imports, with a basic usage. If you run the project at this point, you should see the button show up in your add-on:`}</p>\n        <p parentName=\"li\"><span parentName=\"p\" {...{\n            \"className\": \"gatsby-resp-image-wrapper\",\n            \"style\": {\n              \"position\": \"relative\",\n              \"display\": \"block\",\n              \"marginLeft\": \"auto\",\n              \"marginRight\": \"auto\",\n              \"maxWidth\": \"1280px\"\n            }\n          }}>{`\n      `}<span parentName=\"span\" {...{\n              \"className\": \"gatsby-resp-image-background-image\",\n              \"style\": {\n                \"paddingBottom\": \"55.93750000000001%\",\n                \"position\": \"relative\",\n                \"bottom\": \"0\",\n                \"left\": \"0\",\n                \"display\": \"block\",\n                \"transition\": \"opacity 0.5s 0.5s\",\n                \"pointerEvents\": \"none\"\n              }\n            }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n                \"srcSet\": [\"/express-add-ons-docs/static/5d52eeae67802ea89387232766566ee8/5530d/react-starter.webp 320w\", \"/express-add-ons-docs/static/5d52eeae67802ea89387232766566ee8/0c8fb/react-starter.webp 640w\", \"/express-add-ons-docs/static/5d52eeae67802ea89387232766566ee8/94b1e/react-starter.webp 1280w\", \"/express-add-ons-docs/static/5d52eeae67802ea89387232766566ee8/0b34d/react-starter.webp 1920w\", \"/express-add-ons-docs/static/5d52eeae67802ea89387232766566ee8/d5269/react-starter.webp 2560w\", \"/express-add-ons-docs/static/5d52eeae67802ea89387232766566ee8/fa9c2/react-starter.webp 2736w\"],\n                \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n                \"type\": \"image/webp\"\n              }}></source>{`\n          `}<source parentName=\"picture\" {...{\n                \"srcSet\": [\"/express-add-ons-docs/static/5d52eeae67802ea89387232766566ee8/dd4a7/react-starter.png 320w\", \"/express-add-ons-docs/static/5d52eeae67802ea89387232766566ee8/0f09e/react-starter.png 640w\", \"/express-add-ons-docs/static/5d52eeae67802ea89387232766566ee8/bbbf7/react-starter.png 1280w\", \"/express-add-ons-docs/static/5d52eeae67802ea89387232766566ee8/ac7a9/react-starter.png 1920w\", \"/express-add-ons-docs/static/5d52eeae67802ea89387232766566ee8/c7a69/react-starter.png 2560w\", \"/express-add-ons-docs/static/5d52eeae67802ea89387232766566ee8/9cf20/react-starter.png 2736w\"],\n                \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n                \"type\": \"image/png\"\n              }}></source>{`\n          `}<img parentName=\"picture\" {...{\n                \"className\": \"gatsby-resp-image-image\",\n                \"src\": \"/express-add-ons-docs/static/5d52eeae67802ea89387232766566ee8/bbbf7/react-starter.png\",\n                \"alt\": \"Basic react add-on screenshot\",\n                \"title\": \"Basic react add-on screenshot\",\n                \"loading\": \"lazy\",\n                \"style\": {\n                  \"width\": \"100%\",\n                  \"height\": \"100%\",\n                  \"margin\": \"0\",\n                  \"verticalAlign\": \"middle\",\n                  \"position\": \"absolute\",\n                  \"opacity\": \"0\",\n                  \"transition\": \"opacity 0.5s\",\n                  \"color\": \"inherit\",\n                  \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n                  \"top\": \"0\",\n                  \"left\": \"0\"\n                }\n              }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n        <p parentName=\"li\">{`Take a moment to get familiar with what's included in the generated project before moving on. Notice it's pre-configured for webpack, so you don't have to do those configuration steps you had to do in lesson 1 for the basic JavaScript project.`}</p>\n      </li>\n    </ol>\n    <h3 {...{\n      \"id\": \"install-swc-react-components\"\n    }}>{`Install swc-react components`}</h3>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Next, start installing the UI components to your new add-on project for use. These components are installed in a similar fashion to how you installed the Spectrum Web Components to lesson 1, via `}<inlineCode parentName=\"p\">{`npm install`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`yarn add`}</inlineCode>{`, with just a change to the package prefix, from `}<inlineCode parentName=\"p\">{`@spectrum-web-components`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`@swc-react`}</inlineCode>{`. Remember, the `}<strong parentName=\"p\">{`@swc-react/button`}</strong>{` and `}<strong parentName=\"p\">{`@swc-react/theme`}</strong>{` components were already included in the project generated by the template, so you can skip those.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`npm install @swc-react/button-group@0.39.4 @swc-react/field-label@0.39.4 @swc-react/menu@0.39.4 @swc-react/picker@0.39.4 @swc-react/slider@0.39.4 @swc-react/swatch@0.39.4 @swc-react/switch@0.39.4\n`}</code></pre>\n        <p parentName=\"li\"><strong parentName=\"p\">{`NOTE:`}</strong>{` The above command specifies the `}<inlineCode parentName=\"p\">{`0.39.4`}</inlineCode>{` version specifically, due to an issue found with compatibility using the latest default version `}<inlineCode parentName=\"p\">{`0.40.3`}</inlineCode>{` as of this writing.`}</p>\n        <p parentName=\"li\">{`Alternatively, replace the `}<inlineCode parentName=\"p\">{`dependencies`}</inlineCode>{` block in your `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` file with the following, and then run `}<inlineCode parentName=\"p\">{`npm install`}</inlineCode>{` to install them all at once:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-json\"\n          }}>{`\"dependencies\": {\n        \"@swc-react/button\": \"0.39.4\",\n        \"@swc-react/button-group\": \"0.39.4\",        \n        \"@swc-react/field-label\": \"0.39.4\",\n        \"@swc-react/menu\": \"0.39.4\",\n        \"@swc-react/picker\": \"0.39.4\",\n        \"@swc-react/slider\": \"0.39.4\",\n        \"@swc-react/swatch\": \"0.39.4\",\n        \"@swc-react/switch\": \"0.39.4\",        \n        \"@swc-react/theme\": \"0.39.4\",\n        \"react\": \"18.2.0\",\n        \"react-dom\": \"18.2.0\"\n},    \n`}</code></pre>\n      </li>\n    </ol>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` You must ensure `}<strong parentName=\"p\">{`the versions of all of the @swc-react component packages installed are the same,`}</strong>{` or you will see errors upon build or while running. You can open your `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` file to double check to ensure they all match before moving on.`}</p>\n    <h3 {...{\n      \"id\": \"import-swc-react-components\"\n    }}>{`Import swc-react components`}</h3>\n    <p>{`In this step you will add the UI component imports for the bingo card generator add-on. The pattern of the imports will follow in a similar manner to what was included in the generated project for `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Theme`}</inlineCode>{`. `}</p>\n    <p>{`As a tip, you can use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://opensource.adobe.com/spectrum-web-components/\"\n      }}>{`Spectrum Web Components Reference`}</a>{` for the corresponding component, and in the `}<strong parentName=\"p\">{`Usage`}</strong>{` section you will see that the third import uses the class name for the component, which is what you will need, as well as the specific package to use, it will just be prefixed with `}<inlineCode parentName=\"p\">{`@swc-react`}</inlineCode>{` instead. `}</p>\n    <p>{`So, for example, the first import is for the `}<strong parentName=\"p\">{`Button Group`}</strong>{` component. If you look at the `}<a parentName=\"p\" {...{\n        \"href\": \"https://opensource.adobe.com/spectrum-web-components/components/button-group/#usage\"\n      }}>{`Spectrum Web Components - Button Group Usage`}</a>{`, the last import definition shows `}<inlineCode parentName=\"p\">{`import { ButtonGroup } from '@spectrum-web-components/button-group';`}</inlineCode>{`. It's outlined in the image below for visual reference:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"58.75%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/express-add-ons-docs/static/8519e3900e5aa49319d0fb54390664c1/5530d/swc-button-group-import.webp 320w\", \"/express-add-ons-docs/static/8519e3900e5aa49319d0fb54390664c1/0c8fb/swc-button-group-import.webp 640w\", \"/express-add-ons-docs/static/8519e3900e5aa49319d0fb54390664c1/94b1e/swc-button-group-import.webp 1280w\", \"/express-add-ons-docs/static/8519e3900e5aa49319d0fb54390664c1/0b34d/swc-button-group-import.webp 1920w\", \"/express-add-ons-docs/static/8519e3900e5aa49319d0fb54390664c1/d5269/swc-button-group-import.webp 2560w\", \"/express-add-ons-docs/static/8519e3900e5aa49319d0fb54390664c1/65424/swc-button-group-import.webp 2726w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/express-add-ons-docs/static/8519e3900e5aa49319d0fb54390664c1/dd4a7/swc-button-group-import.png 320w\", \"/express-add-ons-docs/static/8519e3900e5aa49319d0fb54390664c1/0f09e/swc-button-group-import.png 640w\", \"/express-add-ons-docs/static/8519e3900e5aa49319d0fb54390664c1/bbbf7/swc-button-group-import.png 1280w\", \"/express-add-ons-docs/static/8519e3900e5aa49319d0fb54390664c1/ac7a9/swc-button-group-import.png 1920w\", \"/express-add-ons-docs/static/8519e3900e5aa49319d0fb54390664c1/c7a69/swc-button-group-import.png 2560w\", \"/express-add-ons-docs/static/8519e3900e5aa49319d0fb54390664c1/64865/swc-button-group-import.png 2726w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/express-add-ons-docs/static/8519e3900e5aa49319d0fb54390664c1/bbbf7/swc-button-group-import.png\",\n            \"alt\": \"ButtonGroup import from SWC reference\",\n            \"title\": \"ButtonGroup import from SWC reference\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span>{`        `}</p>\n    <p>{`You can simply copy that import from the reference for any given component you want to use in your add-on, and just change the prefix from `}<inlineCode parentName=\"p\">{`@spectrum-web-components`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`@swc-react`}</inlineCode>{`. (Notice the existing imports for `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Theme`}</inlineCode>{`). The resulting import to use in your add-on would be:`}</p>\n    <p><inlineCode parentName=\"p\">{`import { ButtonGroup } from '@swc-react/button-group';`}</inlineCode>{`. `}</p>\n    <p>{`You can then use this same pattern for all of the `}<inlineCode parentName=\"p\">{`@swc-react`}</inlineCode>{` wrapper components you want to use.`}</p>\n    <p>{`The imports needed for the bingo card generator add-on sample are listed below for you to copy into your `}<inlineCode parentName=\"p\">{`src/components/App.jsx`}</inlineCode>{` file, along with the existing `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Theme`}</inlineCode>{` imports:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\\`\\`\\`js\nimport { ButtonGroup } from '@swc-react/button-group';\nimport { FieldLabel } from '@swc-react/field-label';\nimport { MenuItem } from '@swc-react/menu';\nimport { Picker } from '@swc-react/picker';\nimport { Slider } from '@swc-react/slider';\nimport { Swatch } from '@swc-react/swatch';\nimport { Switch } from \"@swc-react/switch\";\n\\`\\`\\`\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"create-event-helper-class\"\n    }}>{`Create event helper class`}</h3>\n    <p>{`Next you'll need to create a new class to handle a known issue where React events and web components don't always work well together.  See `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/facebook/react/issues/19846\"\n      }}>{`this issue for more details`}</a>{`. The issue is most often seen in the case of the React `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` event, and the events won't properly fire. An option to work around this is to create a helper class that will automatically register the native browser version of the events for the components to ensure they are properly fired. `}</p>\n    <p>{`Create a new helper class in a file named `}<inlineCode parentName=\"p\">{`WC.jsx`}</inlineCode>{` in your `}<inlineCode parentName=\"p\">{`src/components`}</inlineCode>{` folder, then copy in the block of code below and save it. `}</p>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` this class is also included in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/hollyschinsky/bingo-card-generator-js-react\"\n      }}>{`lesson 2 final project`}</a>{` if you want to copy it in from there instead.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from \"react\";\n\nexport class WC extends React.Component {\n    constructor(props) {\n        super(props);\n        this.el = React.createRef();\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    handleEvent(evt) {\n        const propName = \\`on\\${evt.type[0].toUpperCase()}\\${evt.type.substr(1)}\\`;\n        if (this.props[propName]) {\n            this.props[propName].call(evt.target, evt);\n        }\n    }\n\n    componentDidMount() {\n        const el = this.el.current;\n        const eventProps = Object.entries(this.props).filter(([k,v]) => k.startsWith(\"on\"));\n        eventProps.forEach(([k,v]) => el.addEventListener(k.substr(2).toLowerCase(), this.handleEvent));\n    }\n\n    componentWillUnmount() {\n        const el = this.el.current;\n        const eventProps = Object.entries(this.props).filter(([k,v]) => k.startsWith(\"on\"));\n        eventProps.forEach(([k,v]) => el.removeEventListener(k.substr(2).toLowerCase(), this.handleEvent));\n    }\n\n    render() {\n        const filteredProps = Object.fromEntries(Object.entries(this.props).filter(([k,v]) => !k.startsWith(\"on\")));\n        return <div ref={this.el} {...filteredProps}>{this.props.children}</div>\n    }\n}\n`}</code></pre>\n    <p>{`Now, go back into your `}<inlineCode parentName=\"p\">{`src/components/App.jsx`}</inlineCode>{` and import your new `}<inlineCode parentName=\"p\">{`WC`}</inlineCode>{` helper class under the `}<inlineCode parentName=\"p\">{`React`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`App.css`}</inlineCode>{` imports, for instance:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\\`\\`\\`js\nimport React, { useState, useRef } from \"react\";\nimport \"./App.css\";\nimport { WC } from \"./WC.jsx\";\n\\`\\`\\`\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"build-ui-with-swc-react-components\"\n    }}>{`Build UI with swc-react components`}</h3>\n    <p>{`At this point you are ready to start using the `}<inlineCode parentName=\"p\">{`swc-react`}</inlineCode>{` components. You'll also wrap some with the `}<inlineCode parentName=\"p\">{`<WC>`}</inlineCode>{` helper class as needed to handle events appropriately. Open your `}<inlineCode parentName=\"p\">{`src/components/App.jsx`}</inlineCode>{` file and replace the current `}<inlineCode parentName=\"p\">{`<Theme>`}</inlineCode>{` block in the UI section with the following block:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\\`\\`\\`html\n<Theme theme=\"express\" scale=\"medium\" color=\"light\">\n    <div className=\"container\">\n        <div className=\"row gap-20\">             \n            <div className=\"column\">\n                <FieldLabel size=\"l\">Background color</FieldLabel>\n                <WC onChange={onBgColorClick}>\n                    <Swatch className=\"color-well\" color={bgColorSwatch}></Swatch>\n                </WC>\n                <input ref={bgColorInput} type=\"color\" style={{display: \"none\"}}\n                    value={bgColor} onChange={onBgColorChange}\n                />\n            </div>\n            <div className=\"column\">\n                <FieldLabel size=\"l\">Number color</FieldLabel>\n                <WC onChange={onFgColorClick}>\n                    <Swatch className=\"color-well\" color={fgColorSwatch}></Swatch>\n                </WC>\n                <input ref={fgColorInput} type=\"color\" style={{display: \"none\"}}\n                    value={fgColor} onChange={onFgColorChange}\n                />                        \n            </div>                                                       \n            <div className=\"column\">\n                <FieldLabel size=\"l\">Title color</FieldLabel>\n                <WC onChange={onTitleColorClick}>\n                    <Swatch className=\"color-well\" color={titleColorSwatch}></Swatch>\n                </WC>\n                <input ref={titleColorInput} type=\"color\" style={{display: \"none\"}}\n                    value ={titleColor} onChange={onTitleColorChange}\n                />                    \n            </div>                                \n        </div>\n        <div className=\"row gap-20\">\n            <div className=\"column margin-top-10\">\n                <FieldLabel size=\"l\">Font Weight</FieldLabel>\n                <Picker size=\"m\" value={fontWeightPicker} \n                    change={event => setFontWeightPicker(event.target.value)}>\n                    <MenuItem value=\"normal\">Normal</MenuItem>                        \n                    <MenuItem value=\"bold\">Bold</MenuItem>                            \n                    <MenuItem value=\"lighter\">Lighter</MenuItem>                \n                </Picker>\n            </div>  \n            <div className=\"column\">\n                <WC onChange={event => setFreeSpaceToggle(event.target.checked)}>\n                    <Switch emphasized checked={freeSpaceToggle} size=\"l\">Free space</Switch>\n                </WC>\n            </div>         \n        </div>\n        <div className=\"row gap-20\">                                \n            <WC onChange={event => setGridlineSize(event.target.value)}>\n                <Slider label=\"Gridlines size\" variant=\"filled\" editable value={gridlineSize}\n                    hide-stepper min=\"1\" max=\"10\"\n                    format-options='{\"style\": \"unit\", \"unit\": \"px\"}' step=\"1\">\n                </Slider>\n            </WC>                                 \n            <div className=\"column\">\n                <FieldLabel size=\"l\">Color</FieldLabel>\n                <WC onChange={onGridColorClick}>\n                    <Swatch className=\"color-well\" color={gridColorSwatch}></Swatch>\n                </WC>\n                <input ref={gridColorInput} type=\"color\" style={{display: \"none\"}}\n                    value={gridColor} onChange={onGridColorChange}\n                />\n            </div>                    \n        </div>                 \n        <div>\n            <ButtonGroup horizontal>\n                <Button onClick={generateBingoCard}>Generate card</Button>\n                <Button onClick={handleAddToPage} disabled={!addToPageEnabled} variant=\"secondary\">Add to page</Button>\n            </ButtonGroup>              \n        </div>                \n        <div className=\"margin-top-10\">                        \n            <canvas ref={bingoCanvas}/>            \n        </div> \n    </div>                                        \n</Theme>\n\\`\\`\\`\n\nNote the use of the \\`<WC>..</WC>\\` component created in the previous step to wrap the \\`swc-react\\` components to ensure the events are are properly fired.\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"wire-ui-code-and-add-canvas-drawing-logic\"\n    }}>{`Wire UI code and add canvas drawing logic`}</h3>\n    <p>{`If you tried to run your add-on at this point, you would get a blank UI, and a check of the devtools console would reveal errors, since the UI components added above call functions that don't exist yet. So next you will add the logic to enable the UI components to work in your `}<inlineCode parentName=\"p\">{`src/components/App.jsx`}</inlineCode>{`. (In a typical project you would probably have more of a separation of concerns with your code rather that everything in the `}<inlineCode parentName=\"p\">{`App.jsx`}</inlineCode>{`, but for the purposes of this lesson, it will suffice).`}</p>\n    <p>{`Replace the current logic for the original button component in the top of the `}<inlineCode parentName=\"p\">{`App`}</inlineCode>{` class before the `}<inlineCode parentName=\"p\">{`return (...)`}</inlineCode>{` with the code below. You can also reference the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/hollyschinsky/bingo-card-generator-react-js/blob/master/src/components/App.jsx\"\n      }}><inlineCode parentName=\"a\">{`App.jsx`}</inlineCode>{` file of the final project`}</a>{` for reference if you have any trouble:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\\`\\`\\`js\n// State variables to hold component values\nconst [bgColor, setBgColor] = useState(\"#f2f2f2\");\nconst [bgColorSwatch, setBgColorSwatch] = useState(\"#f2f2f2\");\n\nconst [fgColor, setFgColor] = useState(\"#5258e5\");\nconst [fgColorSwatch, setFgColorSwatch] = useState(\"#5258e5\");\n\nconst [titleColor, setTitleColor] = useState(\"#000000\");\nconst [titleColorSwatch, setTitleColorSwatch] = useState(\"#000000\");\n\nconst [gridColor, setGridColor] = useState(\"#5258e5\");\nconst [gridColorSwatch, setGridColorSwatch] = useState(\"#5258e5\");\n\nconst [fontWeightPicker, setFontWeightPicker] = useState(\"normal\");\nconst [freeSpaceToggle, setFreeSpaceToggle] = useState(true);\nconst [gridlineSize, setGridlineSize] = useState(5);\nconst [addToPageEnabled, setAddToPageEnabled] = useState(false);\n\n// Refs to the UI elements for colors, add button and HTML canvas\nconst fgColorInput = useRef(null);\nconst bgColorInput = useRef(null);\nconst gridColorInput = useRef(null);\nconst titleColorInput = useRef(null);\nconst bingoCanvas = useRef(null);\n\n// Function to generate the bingo card using an HTML canvas and drawing context \nfunction generateBingoCard() {              \n    const ctx = bingoCanvas.current.getContext(\"2d\");\n\n    // Set canvas width and height\n    bingoCanvas.current.width = 300;\n    bingoCanvas.current.height = 360;\n    \n    // Set grid properties            \n    const numRows = 6;\n    const numCols = 5;\n    const cellWidth = 60;\n    const cellHeight = 60;\n                    \n    // Fill background boxes with selected bg color\n    ctx.fillStyle = bgColor; \n    for (let x = gridlineSize/2; x <= bingoCanvas.current.width; x += cellWidth-gridlineSize) {            \n        for (let y = gridlineSize/2; y <= bingoCanvas.current.height; y += cellHeight-gridlineSize) {\n            ctx.fillRect(x, y, cellWidth, cellHeight);\n        }\n    }                        \n            \n    // Draw gridlines\n    ctx.lineWidth = gridlineSize; \n    let x=0;\n    let y=0;\n    for (let i = 0; i <= numCols; i++) {        \n        // Need to adjust for left/right gridlines size\n        if (i===0) {\n            ctx.moveTo(gridlineSize/2, 0);\n            ctx.lineTo(gridlineSize/2, bingoCanvas.current.height);\n        }\n        else {\n            ctx.moveTo(i * cellWidth-gridlineSize/2, 0);\n            ctx.lineTo(i * cellWidth-gridlineSize/2, bingoCanvas.current.height);\n            \n        }\n    }\n    \n    for (let i = 0; i <= numRows; i++) { \n        // Need to adjust for top/bottom gridlines size               \n        if (i===0) {\n            ctx.moveTo(0, gridlineSize/2);\n            ctx.lineTo(bingoCanvas.current.height, gridlineSize/2,);\n        }\n        else {\n            ctx.moveTo(0, i * cellWidth-gridlineSize/2);\n            ctx.lineTo(bingoCanvas.current.height, i * cellWidth-gridlineSize/2);                    \n        }                    \n    }\n\n    ctx.strokeStyle = gridColor; // Gridlines color\n    ctx.stroke();                        \n                        \n    // Draw bingo title\n    ctx.font = fontWeightPicker +' 28px adobe clean';    \n    ctx.textAlign = \"center\";\n    ctx.textBaseline = 'middle'; \n            \n    ctx.fillStyle = titleColor; // title font color                       \n    let bingoTitle = ['B','I','N','G','O'];\n    for (let charCnt = 0; charCnt < bingoTitle.length; charCnt++) {\n        let letter = bingoTitle[charCnt];\n        ctx.fillText(letter, charCnt * cellWidth + cellWidth / 2, cellHeight / 2 + 6);                \n    }       \n    \n    // Fill in the card with random numbers and a free space if checked\n    const freeSpace = [3, 2]; // Coordinates of the FREE space\n    const numbers = [];\n    const usedNumbers = new Set(); // Track used numbers\n    ctx.font = fontWeightPicker +' 22px adobe clean';\n    ctx.fillStyle = fgColor; // color of the foreground (numbers)                 \n            \n    for (let i = 1; i < numRows; i++) {\n        numbers[i] = [];\n        for (let j = 0; j < numCols; j++) {\n            if (freeSpaceToggle) {\n                if (i === freeSpace[0] && j === freeSpace[1]) {\n                    numbers[i][j] = \"FREE\";\n                    continue; // Skip the FREE space\n                }\n            }\n\n            let num;\n            do {\n                num = Math.floor(Math.random() * 15) + 1 + (j * 15);\n            } while (usedNumbers.has(num)); // Generate unique numbers\n\n            usedNumbers.add(num);\n            numbers[i][j] = num;        \n            ctx.fillText(num, j * cellWidth + cellWidth / 2 - 3, i * cellHeight + cellHeight / 2 + 3);                \n        }\n    }\n            \n    // Draw \"FREE\" if the toggle is checked\n    if (freeSpaceToggle) {\n        ctx.font = fontWeightPicker +' 20px adobe clean';     \n        ctx.fillText(\"FREE\", freeSpace[1] * cellWidth + cellWidth / 2 - 3, freeSpace[0] * cellHeight + cellHeight / 2 + 3);            \n    }    \n        \n    // Enable drag and drop for the card\n    addOnUISdk.app.enableDragToDocument(bingoCanvas.current, {\n        previewCallback: el => new URL(bingoCanvas.current.toDataURL()),\n        completionCallback: async el => {\n            const r = await fetch(bingoCanvas.current.toDataURL());\n            const blob = await r.blob();\n            return [{blob}];\n        }\n    })        \n\n    // Enable add card button\n    setAddToPageEnabled(true);        \n}\n\n// Trigger click on the native color picker input for each\nfunction onBgColorClick(e) {\n    bgColorInput.current.click();\n}\n\nfunction onFgColorClick(e) {        \n    fgColorInput.current.click();\n}\n\nfunction onTitleColorClick(e) {        \n    titleColorInput.current.click();\n}\n\nfunction onGridColorClick(e) {        \n    gridColorInput.current.click();\n}\n\n// Update the state values with the color selected from the native color picker for each\nfunction onFgColorChange(e) {        \n    setFgColorSwatch(e.target.value);\n    setFgColor(e.target.value);        \n}    \n\nfunction onBgColorChange(e) {        \n    setBgColorSwatch(e.target.value);\n    setBgColor(e.target.value);        \n}\n\nfunction onTitleColorChange(e) {        \n    setTitleColorSwatch(e.target.value);\n    setTitleColor(e.target.value);        \n}        \n\nfunction onGridColorChange(e) {        \n    setGridColorSwatch(e.target.value);\n    setGridColor(e.target.value);        \n}\n\nasync function handleAddToPage() {        \n    const blob = await new Promise((resolve, reject) => {\n        bingoCanvas.current.toBlob(blob => { resolve(blob); })\n    })\n    addOnUISdk.app.document.addImage(blob);            \n}\n\\`\\`\\`\n\n**IMPORTANT!:**\n\nSince you're using the React \\`useRef\\` to get references to some of the components, you'll need to add it to the import at the top of your \\`App.jsx\\`, along with the \\`useState\\` that's currently included. So the result of the import section would look like:\n\n\\`\\`\\`js\nimport React, { useState, useRef } from \"react\"; /* add useRef here */\nimport \"./App.css\";                              /* already existed */\nimport { WC } from \"./WC.jsx\";                   /* you added in prior step */\n\\`\\`\\`\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"style-your-ui\"\n    }}>{`Style your UI`}</h3>\n    <p>{`If you run your add-on project now with `}<inlineCode parentName=\"p\">{`npm run build; npm run start`}</inlineCode>{` (or if it was already running and auto-reloaded), you should see something like the following:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"54.0625%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/express-add-ons-docs/static/184a326d17d7cab8f3c5fe498cb05b78/5530d/lesson2-prestyle.webp 320w\", \"/express-add-ons-docs/static/184a326d17d7cab8f3c5fe498cb05b78/0c8fb/lesson2-prestyle.webp 640w\", \"/express-add-ons-docs/static/184a326d17d7cab8f3c5fe498cb05b78/94b1e/lesson2-prestyle.webp 1280w\", \"/express-add-ons-docs/static/184a326d17d7cab8f3c5fe498cb05b78/0b34d/lesson2-prestyle.webp 1920w\", \"/express-add-ons-docs/static/184a326d17d7cab8f3c5fe498cb05b78/d5269/lesson2-prestyle.webp 2560w\", \"/express-add-ons-docs/static/184a326d17d7cab8f3c5fe498cb05b78/65424/lesson2-prestyle.webp 2726w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/express-add-ons-docs/static/184a326d17d7cab8f3c5fe498cb05b78/dd4a7/lesson2-prestyle.png 320w\", \"/express-add-ons-docs/static/184a326d17d7cab8f3c5fe498cb05b78/0f09e/lesson2-prestyle.png 640w\", \"/express-add-ons-docs/static/184a326d17d7cab8f3c5fe498cb05b78/bbbf7/lesson2-prestyle.png 1280w\", \"/express-add-ons-docs/static/184a326d17d7cab8f3c5fe498cb05b78/ac7a9/lesson2-prestyle.png 1920w\", \"/express-add-ons-docs/static/184a326d17d7cab8f3c5fe498cb05b78/c7a69/lesson2-prestyle.png 2560w\", \"/express-add-ons-docs/static/184a326d17d7cab8f3c5fe498cb05b78/64865/lesson2-prestyle.png 2726w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/express-add-ons-docs/static/184a326d17d7cab8f3c5fe498cb05b78/bbbf7/lesson2-prestyle.png\",\n            \"alt\": \"Basic react add-on screenshot\",\n            \"title\": \"Basic react add-on screenshot\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <p>{`Similar to lesson 1, you'll see that the layout of the UI is not up to par, similar to what you saw in the first lesson. In this step you'll add the styling to present the UI as you did in lesson 1. `}</p>\n    <p>{`Open the `}<inlineCode parentName=\"p\">{`/src/components/App.css`}</inlineCode>{` file and replace the current contains with the followingcustom type, class and id selectors for your UI, then check to see the updates reflected in your add-on before moving to the final part of the tutorial.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`sp-theme {\n    display: grid;\n}\n\nh2 {\n    font-weight: var(--spectrum-global-font-weight-black);\n}\n\nsp-swatch {\n    width: var(--spectrum-swatch-size-medium);                \n}\n\nsp-button {\n    flex: 1;\n    max-width: calc(\n        (100% - var(--spectrum-global-dimension-static-size-250)) / 2\n    );\n}\n\nsp-textfield,\nsp-picker {\n    width: var(--spectrum-global-dimension-static-size-1700);\n    display: flex;\n}\n\n    sp-number-field {            \n        width: 100%;\n    }\n\n    sp-button-group {\n        margin-top: var(--spectrum-global-dimension-static-size-300);\n        width: 100%;\n        display: flex;\n        justify-content: space-between;\n    }\n\n    sp-slider {\n        width: 250px;\n        --spectrum-slider-font-size: var(--spectrum-font-size-100);    \n    } \n\n    sp-field-label {\n    font-size: var(--spectrum-global-dimension-font-size-100);   \n    }\n\n    .color-well {\n        cursor: pointer;\n        --mod-swatch-border-thickness: var(--spectrum-divider-thickness-small);\n        --mod-swatch-border-color: var(--spectrum-transparent-black-500);\n    }\n\n    .row {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        width: 100%;\n        align-items: flex-end;\n    }\n\n    .column {\n        display: flex;\n        flex-direction: column;    \n    }\n\n    .gap-20 {\n        gap: var(--spectrum-global-dimension-static-size-250); \n    }\n\n    .margin-top-10 {\n        margin-top: var(--spectrum-global-dimension-static-size-125); \n    }\n    \\`\\`\\`\n\n\n<!-- TODO Replace  with final\n    add note about the Spectrum modifiable variables and where to find them (ie: https://github.com/adobe/spectrum-css/blob/main/components/swatch/metadata/mods.md)\n -->\n\n\n\nexport const _frontmatter = {}\n`}</code></pre>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","isMDXComponent"],"sourceRoot":""}