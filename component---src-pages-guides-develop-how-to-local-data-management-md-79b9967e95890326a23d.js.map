{"version":3,"file":"component---src-pages-guides-develop-how-to-local-data-management-md-79b9967e95890326a23d.js","mappings":"0TAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,cACJ,eACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,6BACJ,8BACJA,EAAAA,EAAAA,KAAA,SAAI,mEAAkEA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAK,gBAAyB,KAAIH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,iBAA8B,4MACrLH,EAAAA,EAAAA,KAAA,SAAI,gCAA+BA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAK,mCAA4C,wGAAuGH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,QAAqB,MAAKH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,aAA0B,SAAQH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,cAA2B,MACzXH,EAAAA,EAAAA,KAAA,MACE,GAAM,WACJ,YACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eACX,+oBAyBNH,EAAAA,EAAAA,KAAA,MACE,GAAM,aACJ,cACJA,EAAAA,EAAAA,KAAA,SAAI,gNAA+MA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,iBAA8B,iGAAgGH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,gBAA6B,MACtaH,EAAAA,EAAAA,KAAA,SAAI,yBAAwBA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACtC,KAAQ,qEACN,2CAA+C,6CAA4CH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC3G,KAAQ,uDACN,oCAAwC,sBAGlD,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/develop/how_to/local_data_management.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"store-data\"\n    }}>{`Store Data`}</h1>\n    <h2 {...{\n      \"id\": \"use-the-clientstorage-api\"\n    }}>{`Use the clientStorage API`}</h2>\n    <p>{`Instead of relying solely on server-side data, you can use the `}<strong parentName=\"p\">{`asynchronous`}</strong>{` `}<inlineCode parentName=\"p\">{`clientStorage`}</inlineCode>{` API to store and retrieve data locally on the client-side. This can be useful for caching images, saving user preferences, or other scenarios where you want to avoid making repeated server requests.`}</p>\n    <p>{`Each add-on can store up to `}<strong parentName=\"p\">{`10MB of data as key-value pairs`}</strong>{`; supported values are not limited to strings, but also include objects, arrays, numbers, booleans, `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Uint8Array`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\nlet store;\n\naddOnUISdk.ready.then(async () => {\n    store = addOnUISdk.instance.clientStorage;\n}\n/**\n * Store item\n */\nasync function setItem(item: string, isComplete: boolean) {\n    await store.setItem(item, isComplete);\n    todoItemInput.value = \"\";\n}\n/**\n * Log all storage item values\n */\nasync function displayAllItems() {\n    const todoItems = await store.keys();\n    todoItems.forEach(async (item: string) => {\n        const itemValue = await store.getItem(item);\n        console.log(\"Key: \" + item + \" value: \" + itemValue);\n    });\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use Cases`}</h2>\n    <p>{`Local data storage can be useful in many scenarios, such as when you need to cache data from server requests, store user UI preferences, pre-populate fields on load, or save temporary data. The fact that `}<inlineCode parentName=\"p\">{`clientStorage`}</inlineCode>{` support multiple data types makes it a more versatile tool to use compared to the Browser's `}<inlineCode parentName=\"p\">{`localStorage`}</inlineCode>{`.`}</p>\n    <p>{`Please, refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/addonsdk/instance-clientStorage/\"\n      }}>{`SDK Reference section for clientStorage`}</a>{` for a complete list of methods, and the `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/samples.md#use-client-storage\"\n      }}>{`use-client-storage sample add-on`}</a>{` for more details.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}