{"version":3,"file":"component---src-pages-guides-learn-how-to-theme-locale-md-7aad30082368c161d1fa.js","mappings":"0TAMaA,EAAe,CAAC,EAKvBC,GAJgBC,EAIY,cAJJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,GAHsBD,MAKtB,MAAMK,EAAc,CAClBP,gBAEIQ,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIR,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,KAACE,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBJ,EAAK,CAAES,WAAYA,EAAYI,QAAQ,eAG5EV,EAAAA,EAAAA,KAAA,MACE,GAAM,iBACJ,mBACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,mBACJ,oBACJA,EAAAA,EAAAA,KAAA,SAAI,+LACJA,EAAAA,EAAAA,KAACL,EAAW,CAACgB,MAAM,OAAOC,QAAQ,OAAOF,QAAQ,iBACjDV,EAAAA,EAAAA,KAAA,SAAI,oHACJA,EAAAA,EAAAA,KAAA,SAAI,0CAAyCA,EAAAA,EAAAA,KAAA,KAAGa,WAAW,IACvD,KAAQ,iDACPb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,4BAA4C,2DAA0Db,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,eAA4B,kBAAiBb,EAAAA,EAAAA,KAAA,KAAGa,WAAW,IAC1N,KAAQ,iDACPb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,mBAAmC,yDAAwDb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,cAA2B,eACnLb,EAAAA,EAAAA,KAAA,MACE,GAAM,WACJ,YACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eACX,ucAeNb,EAAAA,EAAAA,KAAA,MACE,GAAM,iDACJ,oDACJA,EAAAA,EAAAA,KAAA,SAAI,0MAAyMA,EAAAA,EAAAA,KAAA,KAAGa,WAAW,IACvN,KAAQ,+DACPb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAK,qBAAkC,WAAe,2JAClFb,EAAAA,EAAAA,KAAA,MACE,GAAM,aACJ,YACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eACX,ytBA2BV,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/learn/how_to/theme_locale.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"theme--locale\"\n    }}>{`Theme & Locale`}</h1>\n    <h2 {...{\n      \"id\": \"detecting-theme\"\n    }}>{`Detecting Theme`}</h2>\n    <p>{`It can be useful to know what theme is currently set in Adobe Express, for instance to load a specific set of CSS in your add-on to keep its UI in sync, also in case the user changes it.`}</p>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`Currently, Adobe Express supports a \"light\" theme only, although a \"dark\" theme is planned for future releases.`}</p>\n    <p>{`The current theme is available in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-ui.md#theme\"\n      }}><inlineCode parentName=\"a\">{`addOnUISdk.app.ui.theme`}</inlineCode></a>{` property. Changes can be detected by listening to the `}<inlineCode parentName=\"p\">{`themechange`}</inlineCode>{` event on the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/addonsdk-app.md\"\n      }}><inlineCode parentName=\"a\">{`addOnUISdk.app`}</inlineCode></a>{` object. The event will provide the new theme in the `}<inlineCode parentName=\"p\">{`data.theme`}</inlineCode>{` property.`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(async () => {\n  // Get the current theme\n  console.log(addOnUISdk.app.ui.theme); // \"light\"\n\n  // Listen to theme changes\n  addOnUISdk.app.on(\"themechange\", (data) => {\n    // data theme will be either \"light\" or \"dark\"\n    console.log(\"The theme is now\", data.theme);\n    // ...\n    // Apply the new theme to your add-on UI\n  });\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"detecting-locale-supported-locales-and-format\"\n    }}>{`Detecting Locale, Supported Locales, and Format`}</h2>\n    <p>{`It's possible to retrieve the user's current locale, the list of supported locales, and detect when the locale changes (e.g., to set the language in your add-on accordingly). You can do so with the `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/addonsdk/app-ui.md#locale\"\n      }}><inlineCode parentName=\"a\">{`addOnUISdk.app.ui`}</inlineCode>{` object`}</a>{` in the add-on SDK. Similarly, you can get and detect a change in the Format used display dates, times, numbers, etc. A simple example is shown below.`}</p>\n    <h3 {...{\n      \"id\": \"example-1\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(() => {\n  // Get the currently supported locales\n  console.log(addOnUISdk.app.ui.locales); // [\"bn-IN\", \"cy-GB\", ...]\n\n  // Get the current locale\n  console.log(addOnUISdk.app.ui.locale); // \"en-US\"\n\n  // Get the current format\n  console.log(addOnUISdk.app.ui.format); // \"en-US\"\n\n  // Listen to locale changes\n  addOnUISdk.app.on(\"localechange\", (data) => {\n    console.log(\"The locale is now\", data.locale); // \"fr-FR\"\n    // ...\n  });\n\n  // Listen to format changes\n  addOnUISdk.app.on(\"formatchange\", (data) => {\n    console.log(\"The format is now\", data.format); // \"fr-FR\"\n    // ...\n  });\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","slots","variant","parentName","isMDXComponent"],"sourceRoot":""}