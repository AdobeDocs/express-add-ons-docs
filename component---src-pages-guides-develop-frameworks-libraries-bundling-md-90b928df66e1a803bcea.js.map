{"version":3,"file":"component---src-pages-guides-develop-frameworks-libraries-bundling-md-90b928df66e1a803bcea.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/develop/frameworks-libraries-bundling.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"using-web-frameworks-and-libraries\"\n    }}>{`Using Web Frameworks and Libraries`}</h1>\n    <h2 {...{\n      \"id\": \"typescript-definitions\"\n    }}>{`Typescript definitions`}</h2>\n    <p>{`The Add-on SDK's are a set of interfaces written in TypeScript, and a TypeScript definitions package named `}<inlineCode parentName=\"p\">{`ccweb-add-on-sdk-types`}</inlineCode>{` is automatically included in the `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` for the `}<inlineCode parentName=\"p\">{`typescript`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`react-typescript`}</inlineCode>{` templates. As a result, a `}<inlineCode parentName=\"p\">{`add-on-ui-sdk.d.ts`}</inlineCode>{` file is generated in the `}<inlineCode parentName=\"p\">{`src`}</inlineCode>{` folder that exports the `}<inlineCode parentName=\"p\">{`AddOnUISdk`}</inlineCode>{` types, allowing you to take advantage of auto-completion and type checking capabilities. To use the type definitions, simply import them as needed in your `}<inlineCode parentName=\"p\">{`.ts`}</inlineCode>{` file, such as:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import {\n    Application,\n    AuthorizationRequest\n} from \"@adobe-ccwebext/ccweb-add-on-sdk-types\";\n`}</code></pre>\n    <p>{`An example of how this works in Visual Studio Code is shown in this short clip below.`}<br /></p>\n    <div style={{\n      \"display\": \"flex\",\n      \"justifyContent\": \"center\"\n    }}>\n      <iframe src=\"https://drive.google.com/file/d/1FzUaPZMjPD9k0ANQNibqRMiZRrSAIChg/preview\" width=\"800\" height=\"450\" allow=\"autoplay\"></iframe>\n    </div>\n    <h2 {...{\n      \"id\": \"webpack--javascript-bundler\"\n    }}>{`Webpack & JavaScript bundler`}</h2>\n    <p>{`When using Node libraries or other frameworks, you'll often need to use a JavaScript bundler. All of the templates the CLI provides (other than the basic `}<inlineCode parentName=\"p\">{`javascript`}</inlineCode>{` template) are pre-configured for webpack via the `}<inlineCode parentName=\"p\">{`--use`}</inlineCode>{` option set on the `}<inlineCode parentName=\"p\">{`ccweb-add-on-scripts`}</inlineCode>{` commands. If you create a new add-on project based on a react or typescript based template for instance, you will see the following `}<inlineCode parentName=\"p\">{`scripts`}</inlineCode>{` block generated in your `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{`, and the existence of a `}<inlineCode parentName=\"p\">{`webpack.config.js`}</inlineCode>{` in the root of your project:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"scripts\": {\n    \"clean\": \"ccweb-add-on-scripts clean\",\n    \"build\": \"ccweb-add-on-scripts build --use webpack\",\n    \"start\": \"ccweb-add-on-scripts start --use webpack\",\n    \"package\": \"ccweb-add-on-scripts package --use webpack\"\n},\n`}</code></pre>\n    <p>{`However, if you want to use any other transpiler or bundler of your choice, you can do so, provided you have the correct configurations and packages installed (similar to how these templates have `}<inlineCode parentName=\"p\">{`webpack.config.js`}</inlineCode>{` defined, and its plugins and loaders installed). For example, if you want to use `}<inlineCode parentName=\"p\">{`tsc`}</inlineCode>{` to transpile the `}<inlineCode parentName=\"p\">{`.ts`}</inlineCode>{` files, you'll need to install the typescript package and add `}<inlineCode parentName=\"p\">{`tsconfig.json`}</inlineCode>{` to your project, then configure the script commands to make the transpilation and hosting work:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"scripts\": {\n    \"build\": \"ccweb-add-on-scripts build --use tsc\",\n    \"start\": \"ccweb-add-on-scripts start --use tsc\",\n    \"package\": \"ccweb-add-on-scripts package --use tsc\"\n}\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`src`}</inlineCode>{` folder in your project should contain all of your code and static asset files to ensure any changes you make are automatically detected by the hot module reloader, allowing you to see your updates immediately.`}</p>\n    <h4 {...{\n      \"id\": \"update-webpackconfigjs-with-any-new-files-to-be-copied\"\n    }}>{`Update `}<inlineCode parentName=\"h4\">{`webpack.config.js`}</inlineCode>{` with any new files to be copied`}</h4>\n    <p>{`Configurations are included in the `}<inlineCode parentName=\"p\">{`webpack.config.js`}</inlineCode>{` generated with your add-on project for both development and production bundling (assuming your project was based on any template other than the basic javascript one). You should be aware that you will need to update the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/copy-webpack-plugin\"\n      }}><inlineCode parentName=\"a\">{`CopyWebpackPlugin`}</inlineCode></a>{` block in your `}<inlineCode parentName=\"p\">{`webpack.config.js`}</inlineCode>{` to ensure any new files are copied into the `}<inlineCode parentName=\"p\">{`dist`}</inlineCode>{` folder at build time. For instance, if you add new image assets into your `}<inlineCode parentName=\"p\">{`src`}</inlineCode>{` folder that your add-on is using, you would need to ensure you include the file extension in the patterns of files getting copied, or you will get a 404 indicating the images are not found. If the images were type `}<inlineCode parentName=\"p\">{`.png`}</inlineCode>{` for instance, then you could include the additional `}<inlineCode parentName=\"p\">{`src/*.png`}</inlineCode>{` line like below to ensure they are copied:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`new CopyWebpackPlugin({\n    patterns: [\n        { from: \"src/*.json\", to: \"[name][ext]\" },\n        { from: \"src/*.png\", to: \"[name][ext]\" }\n    ]\n})\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"react\"\n    }}>{`React`}</h2>\n    <p>{`The CLI supports two different `}<a parentName=\"p\" {...{\n        \"href\": \"../getting_started/dev_tooling.md#templates\"\n      }}>{`react-based templates`}</a>{`, and the `}<a parentName=\"p\" {...{\n        \"href\": \"../../samples.md\"\n      }}>{`code samples`}</a>{` repository contains various add-ons built with React for you to use as a reference.`}</p>\n    <h2 {...{\n      \"id\": \"other-javascript-and-css-libraries\"\n    }}>{`Other JavaScript and CSS libraries`}</h2>\n    <p>{`You shouldn't see any issues trying to include other JavaScript or CSS libraries you might want to use in your add-ons (ie: jQuery, Bootstrap).`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","style","src","width","height","allow","slots","variant","isMDXComponent"],"sourceRoot":""}