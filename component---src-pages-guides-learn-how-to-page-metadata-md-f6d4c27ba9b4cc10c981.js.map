{"version":3,"file":"component---src-pages-guides-learn-how-to-page-metadata-md-f6d4c27ba9b4cc10c981.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/learn/how_to/page_metadata.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"page-metadata\"\n    }}>{`Page Metadata`}</h1>\n    <h2 {...{\n      \"id\": \"get-the-page-metadata\"\n    }}>{`Get the Page Metadata`}</h2>\n    <p>{`If you want to retrieve metadata for pages in the document, use the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#getpagesmetadata\"\n      }}><inlineCode parentName=\"a\">{`getPagesMetadata()`}</inlineCode></a>{` method in the `}<inlineCode parentName=\"p\">{`addOnUISdk.app.document`}</inlineCode>{` object. The method expects an object with a `}<inlineCode parentName=\"p\">{`range`}</inlineCode>{` and optional `}<inlineCode parentName=\"p\">{`pageIds`}</inlineCode>{` properties.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`range`}</inlineCode>{` property is one of the available `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/addonsdk-constants.md\"\n      }}><inlineCode parentName=\"a\">{`Range`}</inlineCode></a>{` enumerables, either `}<inlineCode parentName=\"p\">{`currentPage`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`entireDocument`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`specificPages`}</inlineCode>{`. If you choose `}<inlineCode parentName=\"p\">{`specificPages`}</inlineCode>{`, you must provide an array of page IDs in the `}<inlineCode parentName=\"p\">{`pageIds`}</inlineCode>{` property.`}</p>\n    <p>{`The returned value is always an array of `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#pagemetadata\"\n      }}><inlineCode parentName=\"a\">{`PageMetadata`}</inlineCode></a>{` objects.`}</p>\n    <h3 {...{\n      \"id\": \"single-page-example\"\n    }}>{`Single Page Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(() => {\n  const page = await addOnUISdk.app.document.getPagesMetadata({\n    range: addOnUISdk.constants.Range.currentPage\n  });\n  console.log(\"Current page metadata: \", page); // ðŸ‘ˆ always returns an array\n  // [\n  //   {\n  //     \"id\": \"01d7093d-96d1-4d6a-981b-dc365343e17c\",\n  //     \"size\": { \"width\": 1080, \"height\": 1080 },\n  //     \"title\": \"First\",\n  //     \"hasPremiumContent\": false,\n  //     \"hasVideoContent\": true,\n  //     \"hasAudioContent\": true,\n  //     \"hasAnimatedContent\": false,\n  //     \"hasTemporalContent\": true,\n  //     \"temporalContentDuration\": 100,\n  //     \"pixelsPerInch\": 96\n  //   },\n  // ]\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"page-range-example\"\n    }}>{`Page Range Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(() => {\n  const pages = await addOnUISdk.app.document.getPagesMetadata({\n    range: addOnUISdk.constants.Range.specificPages,\n    pageIds: [                                  // ðŸ‘ˆ\n        \"7477a5e7-02b2-4b8d-9bf9-f09ef6f8b9fc\", // ðŸ‘ˆ\n        \"d45ba3fc-a3df-4a87-80a5-655e5f8f0f96\"  // ðŸ‘ˆ\n    ]                                           // ðŸ‘ˆ\n  });\n  console.log(\"Current page metadata: \", pages);\n  // [\n  //   {\n  //     \"id\": \"01d7093d-96d1-4d6a-981b-dc365343e17c\",\n  //     \"size\": { \"width\": 1080, \"height\": 1080 },\n  //     \"title\": \"First\",\n  //     \"hasPremiumContent\": false,\n  //     \"hasAudioContent\": false,\n  //     \"hasVideoContent\": true,\n  //     \"hasAnimatedContent\": false,\n  //     \"hasTemporalContent\": true,\n  //     \"temporalContentDuration\": 100,\n  //     \"pixelsPerInch\": 96\n  //   },\n  //   {\n  //     \"id\": \"8d5b1f9a-7289-4590-9ee4-a15a731698ed\",\n  //     \"size\": { \"width\": 1080, \"height\": 1080 },\n  //     \"title\": \"Second\",\n  //     \"hasPremiumContent\": false,\n  //     \"hasAudioContent\": false,\n  //     \"hasVideoContent\": true,\n  //     \"hasAnimatedContent\": false,\n  //     \"hasTemporalContent\": true,\n  //     \"temporalContentDuration\": 100,\n  //     \"pixelsPerInch\": 96\n  //   }\n  // ]\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"get-selected-page-ids-experimental\"\n    }}>{`Get Selected Page IDs (Experimental)`}</h2>\n    <p>{`You can also retrieve the currently selected page IDs using the experimental `}<inlineCode parentName=\"p\">{`getSelectedPageIds()`}</inlineCode>{` method. This is particularly useful when you want to get metadata for only the pages that the user has selected in the document.`}</p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` The `}<inlineCode parentName=\"p\">{`getSelectedPageIds()`}</inlineCode>{` method is currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until it has been declared stable. To use this method, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-get-metadata-for-selected-pages-only\"\n    }}>{`Example: Get Metadata for Selected Pages Only`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(async () => {\n  try {\n    // Get the currently selected page IDs\n    const selectedPageIds = await addOnUISdk.app.document.getSelectedPageIds();\n    console.log(\"Selected page IDs:\", selectedPageIds);\n    \n    if (selectedPageIds.length === 0) {\n      console.log(\"No pages are currently selected\");\n      return;\n    }\n    \n    // Get metadata for only the selected pages\n    const selectedPagesMetadata = await addOnUISdk.app.document.getPagesMetadata({\n      range: addOnUISdk.constants.Range.specificPages,\n      pageIds: selectedPageIds\n    });\n    \n    // Process the metadata for selected pages\n    selectedPagesMetadata.forEach((page, index) => {\n      console.log(\\`Selected page \\${index + 1}:\\`);\n      console.log(\\`  ID: \\${page.id}\\`);\n      console.log(\\`  Title: \\${page.title}\\`);\n      console.log(\\`  Size: \\${page.size.width} x \\${page.size.height}\\`);\n      console.log(\\`  Has premium content: \\${page.hasPremiumContent}\\`);\n      console.log(\\`  Has temporal content: \\${page.hasTemporalContent}\\`);\n    });\n    \n  } catch (error) {\n    console.log(\"Failed to get selected pages metadata:\", error);\n  }\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use Cases`}</h2>\n    <p>{`Page metadata can be used to determine the size of the page, the title, and whether it contains temporal content (videos and animations). Tge `}<inlineCode parentName=\"p\">{`hasPremiumContent`}</inlineCode>{` property is particularly helpful when dealing with the rendition of `}<a parentName=\"p\" {...{\n        \"href\": \"./premium_content.md\"\n      }}>{`premium content`}</a>{`â€”for instance, when the user is not authorized to export/download assets that are available only to paid subscribers.`}</p>\n    <h2 {...{\n      \"id\": \"faqs\"\n    }}>{`FAQs`}</h2>\n    <h4 {...{\n      \"id\": \"q-how-do-i-get-page-metadata\"\n    }}>{`Q: How do I get page metadata?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Call `}<inlineCode parentName=\"p\">{`addOnUISdk.app.document.getPagesMetadata()`}</inlineCode>{` with range and optional pageIds parameters.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-range-options-are-available\"\n    }}>{`Q: What range options are available?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` currentPage, entireDocument, or specificPages from `}<inlineCode parentName=\"p\">{`addOnUISdk.constants.Range`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-does-getpagesmetadata-return\"\n    }}>{`Q: What does getPagesMetadata return?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Always returns an array of PageMetadata objects, even for single pages.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-get-specific-pages-metadata\"\n    }}>{`Q: How do I get specific pages metadata?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`range: specificPages`}</inlineCode>{` and provide an array of page IDs in the pageIds parameter.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-properties-are-in-pagemetadata\"\n    }}>{`Q: What properties are in PageMetadata?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` id, size, title, hasPremiumContent, hasVideoContent, hasAudioContent, hasAnimatedContent, temporalContentDuration, pixelsPerInch.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-is-haspremiumcontent-used-for\"\n    }}>{`Q: What is hasPremiumContent used for?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Indicates if the page contains premium content, helpful for rendition permissions and export controls.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-does-hastemporalcontent-indicate\"\n    }}>{`Q: What does hasTemporalContent indicate?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Shows if the page contains time-based content like videos or animations.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-are-common-use-cases\"\n    }}>{`Q: What are common use cases?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Determining page size, checking for premium content before export, and identifying temporal content duration.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-get-the-currently-selected-page-ids\"\n    }}>{`Q: How do I get the currently selected page IDs?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Call `}<inlineCode parentName=\"p\">{`await addOnUISdk.app.document.getSelectedPageIds()`}</inlineCode>{` to retrieve an array of selected page IDs. Note: This is an experimental API that requires setting `}<inlineCode parentName=\"p\">{`experimentalApis: true`}</inlineCode>{` in your manifest.json requirements.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","isMDXComponent"],"sourceRoot":""}