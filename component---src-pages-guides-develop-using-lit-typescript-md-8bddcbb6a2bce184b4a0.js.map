{"version":3,"file":"component---src-pages-guides-develop-using-lit-typescript-md-8bddcbb6a2bce184b4a0.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/develop/using-lit-typescript.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst ProductCard = makeShortcode(\"ProductCard\");\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"developing-add-ons-with-lit-and-typescript\"\n    }}>{`Developing add-ons with Lit and TypeScript`}</h1>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <ProductCard slots=\"icon, text, buttons\" theme=\"light\" width=\"50%\" mdxType=\"ProductCard\" />\n    <img {...{\n      \"src\": \"/express-add-ons-docs/assets/55ed59a6419a7162e08a744041290567/lit-logo.svg\",\n      \"alt\": \"lit-logo\",\n      \"width\": \"70px\",\n      \"height\": \"40px\"\n    }}></img>\n    <p>{`Lit is a simple library for building fast, lightweight web components. It's built on top of the Web Components standard and provides a set of tools and utilities to simplify the creation of custom elements. Lit uses modern web standards like JavaScript template literals and reactive properties to create reusable and efficient components with minimal boilerplate required.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://lit.dev/\"\n        }}>{`Learn more`}</a></li>\n    </ul>\n    <ProductCard slots=\"icon, text, buttons\" theme=\"light\" width=\"50%\" mdxType=\"ProductCard\" />\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/express-add-ons-docs/assets/bb0c891a452521ec84a2436931d83130/ts-logo-128.svg\",\n        \"alt\": \"typescript-logo\"\n      }}></img></p>\n    <p>{`TypeScript is a statically typed superset of JavaScript that adds optional static types to the language.TypeScript aims to improve the development experience by providing a robust type system, which helps catch errors early during development and enhances code quality and maintainability.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://https://www.typescriptlang.org/\"\n        }}>{`Learn more`}</a></li>\n    </ul>\n    <p>{`When you develop add-ons with a combination of `}<a parentName=\"p\" {...{\n        \"href\": \"https://lit.dev/\"\n      }}>{`Lit`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://https://www.typescriptlang.org/\"\n      }}>{`TypeScript`}</a>{`, you get the benefits of both worlds; a lightweight component library with reactive properties and templating capabilities, which help you build fast and efficient components, and the robust type system provided by TypeScript.`}</p>\n    <h2 {...{\n      \"id\": \"lit-key-features\"\n    }}>{`Lit Key Features`}</h2>\n    <h3 {...{\n      \"id\": \"litelement-base-class\"\n    }}><inlineCode parentName=\"h3\">{`LitElement`}</inlineCode>{` Base Class`}</h3>\n    <p>{`Lit provides the `}<inlineCode parentName=\"p\">{`LitElement`}</inlineCode>{` base class for creating custom elements. It extends the standard `}<inlineCode parentName=\"p\">{`HTMLElement`}</inlineCode>{` and adds reactive properties and templating capabilities. The `}<inlineCode parentName=\"p\">{`LitElement`}</inlineCode>{` class is important to understand when working with Lit, as it provides the foundation for building custom elements.`}</p>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`Components must have dashes in their name to be valid custom elements. For example, `}<inlineCode parentName=\"p\">{`my-component`}</inlineCode>{` is a valid custom element name, while `}<inlineCode parentName=\"p\">{`MyComponent`}</inlineCode>{` is not.`}</p>\n    <h3 {...{\n      \"id\": \"template-literals\"\n    }}>{`Template Literals`}</h3>\n    <p>{`A `}<a parentName=\"p\" {...{\n        \"href\": \"https://lit.dev/docs/templates/overview/\"\n      }}>{`template literal`}</a>{` is a string literal that allows embedded expressions. It is enclosed in backticks (`}{`\\``}{`) and can contain placeholders `}<inlineCode parentName=\"p\">{`(\\${expression})`}</inlineCode>{` for dynamic values. Template literals provide a more flexible and readable way to define strings compared to traditional string concatenation.`}</p>\n    <h3 {...{\n      \"id\": \"decorators\"\n    }}>{`Decorators`}</h3>\n    <p>{`A `}<a parentName=\"p\" {...{\n        \"href\": \"https://lit.dev/docs/components/decorators/\"\n      }}><em parentName=\"a\">{`decorator`}</em></a>{` is a certain type of declaration that can be attached to a class declaration. It is prefixed with an `}<inlineCode parentName=\"p\">{`@`}</inlineCode>{` symbol and can be used to modify the behavior of a class or its members. Some popular decorators in Lit include:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`@customElement`}</inlineCode>{`: defines a custom element with a given tag name.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`@property`}</inlineCode>{`: defines a reactive property that triggers a re-render when its value changes.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`@state`}</inlineCode>{`: defines a local state property that triggers a re-render when its value changes. The difference between `}<inlineCode parentName=\"li\">{`@state`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`@property`}</inlineCode>{` is that `}<inlineCode parentName=\"li\">{`@state`}</inlineCode>{` properties are not exposed as custom element properties. It's useful for managing component-specific state that does not need to be shared with other components.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`@query`}</inlineCode>{`: allows you to query for elements in the component's shadow DOM, for instance, to access a button element with the id `}<inlineCode parentName=\"li\">{`myButton`}</inlineCode>{`, you can use `}<inlineCode parentName=\"li\">{`@query('#myButton') myButton: HTMLButtonElement;`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`@eventOptions`}</inlineCode>{`: allows you to specify event options like `}<inlineCode parentName=\"li\">{`capture`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`once`}</inlineCode>{`, and `}<inlineCode parentName=\"li\">{`passive`}</inlineCode>{` for event listeners. For example, `}<inlineCode parentName=\"li\">{`@eventOptions({ capture: true }) handleClick() { ... }`}</inlineCode>{`.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"directives\"\n    }}>{`Directives`}</h3>\n    <p>{`A Lit `}<a parentName=\"p\" {...{\n        \"href\": \"https://lit.dev/docs/templates/directives/\"\n      }}><em parentName=\"a\">{`directive`}</em></a>{` is a special kind of decorator that allows you to extend the template syntax with custom behavior. Some popular directives include:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`until`}</inlineCode>{`: waits for a promise to resolve before rendering the content.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`repeat`}</inlineCode>{`: repeats a template for each item in an array.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ifDefined`}</inlineCode>{`: conditionally renders content based on the value being defined.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`guard`}</inlineCode>{`: prevents re-rendering if the value has not changed.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`cache`}</inlineCode>{`: caches the result of an expression to improve performance.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`live`}</inlineCode>{`: updates the DOM when a reactive property changes. It's useful when you need to trigger a side effect or update the DOM based on a property change that's not directly related to rendering the component.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`asyncReplace`}</inlineCode>{`: asynchronously replaces the content of a template. This directive is useful when you need to fetch data asynchronously and update the template once the data is available.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`asyncAppend`}</inlineCode>{`: asynchronously appends content to a template. This directive is useful when you need to fetch data asynchronously and append it to the template once the data is available.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`css`}</inlineCode>{`: a directive that creates a CSS template from a template literal. This directive is used to define CSS styles for a component.`}</li>\n    </ul>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`The difference between a directive and a decorator is that a directive is applied to a template, while a decorator is applied to a class or a class member.`}</p>\n    <h3 {...{\n      \"id\": \"render-method\"\n    }}><inlineCode parentName=\"h3\">{`render`}</inlineCode>{` Method`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`render`}</inlineCode>{` method is defined as a template literal that returns the component's HTML structure. It uses the `}<inlineCode parentName=\"p\">{`html`}</inlineCode>{` function from the Lit package to create the template. The `}<inlineCode parentName=\"p\">{`render`}</inlineCode>{` method is called whenever the component needs to be re-rendered, for instance, when a reactive property changes. Some methods that are commonly used in the `}<inlineCode parentName=\"p\">{`render`}</inlineCode>{` method include:`}</p>\n    <h3 {...{\n      \"id\": \"reactive-properties\"\n    }}>{`Reactive Properties`}</h3>\n    <p>{`Lit uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://lit.dev/docs/components/properties/\"\n      }}><em parentName=\"a\">{`reactive properties`}</em></a>{` to automatically update the DOM when the state of your component changes. You define properties using decorators like `}<inlineCode parentName=\"p\">{`@property`}</inlineCode>{`. When a property changes, Lit automatically triggers a re-render of the component. This reactive behavior simplifies the process of managing state and updating the UI.`}</p>\n    <h2 {...{\n      \"id\": \"typescript-key-features\"\n    }}>{`TypeScript Key Features`}</h2>\n    <h3 {...{\n      \"id\": \"static-typing\"\n    }}>{`Static Typing`}</h3>\n    <p>{`TypeScript allows you to `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.typescriptlang.org/docs/handbook/2/basic-types.html#static-type-checking\"\n      }}>{`define types`}</a>{` for variables, function parameters, and return values, which helps catch type-related errors at compile time.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`let message: string = \"Hello, TypeScript!\";\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"type-inference\"\n    }}>{`Type Inference`}</h3>\n    <p>{`TypeScript can automatically `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.typescriptlang.org/docs/handbook/type-inference.html#handbook-content\"\n      }}>{`infer types`}</a>{` based on the assigned values, reducing the need for explicit type annotations.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`let count = 42; // inferred as number\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"interfaces\"\n    }}>{`Interfaces`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#interfaces\"\n      }}>{`Interfaces`}</a>{` define the shape of an object, specifying the properties and their types. They help enforce consistent object structures.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface User {\n  name: string;\n  age: number;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"classes\"\n    }}>{`Classes`}</h3>\n    <p>{`TypeScript supports object-oriented programming with `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.typescriptlang.org/docs/handbook/2/classes.html\"\n      }}>{`classes`}</a>{`, including features like inheritance, access modifiers, and decorators.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`class Person {\n  constructor(public name: string, public age: number) {}\n\n  greet() {\n    console.log(\\`Hello, my name is \\${this.name}\\`);\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"modules\"\n    }}>{`Modules`}</h3>\n    <p>{`TypeScript uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.typescriptlang.org/docs/handbook/2/modules.html\"\n      }}>{`ES6 module syntax`}</a>{` to organize code into reusable modules, making it easier to manage large codebases.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// math.ts\nexport function add(a: number, b: number): number {\n  return a + b;\n}\n\n// main.ts\nimport { add } from './math';\nconsole.log(add(2, 3));\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"generics\"\n    }}>{`Generics`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.typescriptlang.org/docs/handbook/2/generics.html#handbook-content\"\n      }}>{`Generics`}</a>{` allow you to create reusable components that work with various types, providing flexibility and type safety.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`function identity<T>(arg: T): T {\n  return arg;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"add-on-project-anatomy\"\n    }}>{`Add-on Project Anatomy`}</h2>\n    <p>{`When you use the CLI to create an add-on based on Lit and TypeScript (ie: the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/create-ccweb-add-on/tree/main/packages/create-ccweb-add-on/templates/swc-typescript/template\"\n      }}><inlineCode parentName=\"a\">{`swc-typescript`}</inlineCode></a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/create-ccweb-add-on/tree/main/packages/create-ccweb-add-on/templates/swc-typescript-with-document-sandbox/template\"\n      }}><inlineCode parentName=\"a\">{`swc-typescript-with-document-sandbox`}</inlineCode></a>{` templates), the CLI generates a project structure that includes the necessary files and configurations to get you started quickly. For instance:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`File/Folder`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`src/index.html`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The main HTML template that loads your add-on.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`src/index.ts`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The entry point for your add-on, where you define your Lit components.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`src/ui/components`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The directory where you define your Lit components.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`src/ui/components/App.ts`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The main application component that uses the Adobe Add-On UI SDK to interact with the document sandbox runtime.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`src/ui/components/App.css.ts`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The CSS styles for the main application component.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`src/models`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The directory where you define TypeScript interfaces for your add-on APIs.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`src/models/DocumentSandboxApi.ts`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The TypeScript interface for the APIs exposed by the document sandbox runtime.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`src/sandbox/code.ts`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The implementation of the document sandbox runtime.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`src/sandbox/tsconfig.json`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The TypeScript configuration file that specifies the compiler options for your project.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`A more in-depth description of the files and folders in the project structure is provided below.`}</p>\n    <h3 {...{\n      \"id\": \"indexhtml\"\n    }}>{`index.html`}</h3>\n    <p>{`This is the main HTML file that serves as the entry point for the web application. It includes the custom element `}<inlineCode parentName=\"p\">{`<add-on-root>`}</inlineCode>{`, which is defined in `}<inlineCode parentName=\"p\">{`index.ts`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<body>\n    <add-on-root></add-on-root>\n</body>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"indexts\"\n    }}>{`index.ts`}</h3>\n    <p>{`This file defines the root custom element `}<inlineCode parentName=\"p\">{`<add-on-root>`}</inlineCode>{` using Lit. It initializes the Adobe Add-On UI SDK and renders the `}<inlineCode parentName=\"p\">{`<add-on-app>`}</inlineCode>{` component once the SDK is ready.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { LitElement, html } from \"lit\";\nimport { customElement, state } from \"lit/decorators.js\";\nimport { until } from \"lit/directives/until.js\";\nimport \"./components/App\";\n\nimport addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\n@customElement(\"add-on-root\") // Lit customElement decorator defines a custom element <add-on-root>.\nexport class Root extends LitElement {\n    @state()\n    private _isAddOnUISdkReady = addOnUISdk.ready;\n\n    // The render method returns an HTML template that uses the until\n    // directive to wait for the Add-On UI SDK to be ready. Once the \n    // SDK is ready, it renders the <add-on-app> component.\n    render() {\n        // This block is a template literal that returns an HTML template \n        // using the Lit html function. denoted by it being enclosed in \n        // backticks (\\`). Dynamic values are inserted using placeholders \n        // like (\\${expression}).\n        return html\\`                   \n            \\${until(  // The until directive is used to wait for a promise \n                      // to resolve before rendering the content.\n                this._isAddOnUISdkReady.then(async () => {\n                    console.log(\"addOnUISdk is ready for use.\");\n                    return html\\`<add-on-app .addOnUISdk=\\${addOnUISdk}></add-on-app>\\`;\n                })\n            )}\n        \\`;\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"appts\"\n    }}>{`App.ts`}</h3>\n    <p>{`Defines the main application component `}<inlineCode parentName=\"p\">{`<add-on-app>`}</inlineCode>{` using Lit. It uses the Adobe Add-On UI SDK to interact with the document sandbox runtime and provides a button to create a rectangle in the document.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { LitElement, html } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators.js\";\nimport { DocumentSandboxApi } from \"../../models/DocumentSandboxApi\";\nimport { style } from \"./App.css\";\n\nimport { AddOnSDKAPI, RuntimeType } from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\n// The following line defines a custom element <add-on-app> using the Lit\n// customElement decorator.\n@customElement(\"add-on-app\") \nexport class App extends LitElement {\n    @property({ type: Object })\n    addOnUISdk!: AddOnSDKAPI;\n\n    @state()\n    private _sandboxProxy: DocumentSandboxApi;\n\n    static get styles() {\n        return style;\n    }\n\n    async firstUpdated(): Promise<void> {\n        const { runtime } = this.addOnUISdk.instance;\n        this._sandboxProxy = await runtime.apiProxy(RuntimeType.documentSandbox);\n    }\n\n    private _handleClick() {\n        this._sandboxProxy.createRectangle();\n    }\n    // The render method returns an HTML template that uses the .container\n    // class defined in the CSS.\n    render() {\n        // This block is a template literal that returns an HTML template \n        // using the Lit html function. A template literal in Lit is \n        // enclosed in backticks (\\`) and can contain placeholders (\\${expression}) \n        // for dynamic values.\n        return html\\` <sp-theme theme=\"express\" color=\"light\" scale=\"medium\">\n            <div class=\"container\">\n                <sp-button size=\"m\" @click=\\${this._handleClick}>Create Rectangle</sp-button>\n            </div>\n        </sp-theme>\\`;\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"appcssts\"\n    }}>{`App.css.ts`}</h3>\n    <p>{`Defines the CSS styles for the `}<inlineCode parentName=\"p\">{`<add-on-app>`}</inlineCode>{` component using Lit's `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` tagged template literal.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { css } from \"lit\"; // Import the css function from the lit package\n\n// The following block defines the CSS styles for the .container class \n// using the css tagged template literal. The styles are defined within \n// backticks (\\`) and are passed to the css function to create a CSSResult \n// object. A CSSResult object is a representation of CSS that can be applied \n// to a LitElement component.\nexport const style = css\\`\n    .container {\n        margin: 24px;\n        display: flex;\n        flex-direction: column;\n    }\n\\`;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"documentsandboxapits\"\n    }}>{`DocumentSandboxApi.ts`}</h3>\n    <p>{`Defines the TypeScript interface for the APIs that the `}<a parentName=\"p\" {...{\n        \"href\": \"../../references/document-sandbox/index.md\"\n      }}>{`document sandbox runtime`}</a>{` exposes to the UI runtime. Once you define an interface, any object that implements that interface must implement to the contract defined in the interface. The document sandbox runtime implements this interface in the `}<inlineCode parentName=\"p\">{`code.ts`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export interface DocumentSandboxApi { //\n    createRectangle(): void;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"codets\"\n    }}>{`code.ts`}</h3>\n    <p>{`Contains the implementation of the document sandbox runtime. It defines the `}<inlineCode parentName=\"p\">{`createRectangle`}</inlineCode>{` function and exposes it to the UI runtime (ie: the code running in the iframe in the `}<inlineCode parentName=\"p\">{`ui`}</inlineCode>{` folder).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import addOnSandboxSdk from \"add-on-sdk-document-sandbox\";\nimport { editor } from \"express-document-sdk\";\n// Import the DocumentSandboxApi interface from the models folder\nimport { DocumentSandboxApi } from \"../models/DocumentSandboxApi\"; \n\nconst { runtime } = addOnSandboxSdk.instance;\n\nfunction start(): void {\n    // The following block defines a sandboxApi object that implements the\n    // DocumentSandboxApi interface. Since it implements the interface, it \n    // must provide an implementation for the createRectangle function.\n    const sandboxApi: DocumentSandboxApi = {\n        createRectangle: () => {\n            const rectangle = editor.createRectangle();\n            rectangle.width = 240;\n            rectangle.height = 180;\n            rectangle.translation = { x: 10, y: 10 };\n            const color = { red: 0.32, green: 0.34, blue: 0.89, alpha: 1 };\n            const rectangleFill = editor.makeColorFill(color);\n            rectangle.fill = rectangleFill;\n            const insertionParent = editor.context.insertionParent;\n            insertionParent.children.append(rectangle);\n        }\n    };\n    const sandboxApi: DocumentSandboxApi = {\n        createRectangle: () => {\n            const rectangle = editor.createRectangle();\n            rectangle.width = 240;\n            rectangle.height = 180;\n            rectangle.translation = { x: 10, y: 10 };\n            const color = { red: 0.32, green: 0.34, blue: 0.89, alpha: 1 };\n            const rectangleFill = editor.makeColorFill(color);\n            rectangle.fill = rectangleFill;\n            const insertionParent = editor.context.insertionParent;\n            insertionParent.children.append(rectangle);\n        }\n    };\n\n    runtime.exposeApi(sandboxApi);\n}\n\nstart();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"tsconfigjson\"\n    }}>{`tsconfig.json`}</h3>\n    <p>{`Specifies the TypeScript compiler options for your project. It includes settings like the target ECMAScript version, module format, and output directory.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"compilerOptions\": {\n    \"target\": \"ES2018\",\n    \"module\": \"ESNext\",\n    \"strict\": true,\n    \"outDir\": \"./dist\"\n  },\n  \"include\": [\"src/**/*\"]\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"create-a-new-lit-component\"\n    }}>{`Create a New Lit Component`}</h2>\n    <p>{`To create a new component using Lit and TypeScript, follow these steps:`}</p>\n    <h4 {...{\n      \"id\": \"step-1-create-a-new-typescript-file-in-the-srcuicomponents-directory\"\n    }}>{`Step 1: Create a new TypeScript file in the `}<inlineCode parentName=\"h4\">{`src/ui/components`}</inlineCode>{` directory.`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`touch src/ui/components/MyCustomButton.ts\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"step-2-define-a-new-class-that-extends-litelement-and-implements-your-component-logic\"\n    }}>{`Step 2: Define a new class that extends `}<inlineCode parentName=\"h4\">{`LitElement`}</inlineCode>{` and implements your component logic.`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { LitElement, html } from \"lit\";\n// Import the customElement and state decorators from the lit package\nimport { customElement, state } from \"lit/decorators.js\";  \n@customElement(\"my-custom-button\") // Decorator defines my-custom-button\n\n// Define a custom LitElement component MyCustomButton that extends LitElement. \n// The code includes a state property message that holds the text to be \n// displayed and a render method that returns an HTML template. The template \n// includes a button element that triggers the handleClick method when clicked \n// and displays the message property value.\nexport class MyCustomButton extends LitElement {\n    @state()\n    private message = \"Hello, Lit!\";\n    \n    render() {\n        return html\\`\n                <sp-button @click=\"\\${this.handleClick}\">Send</sp-button>\n                <p>\\${this.message}</p>\n        \\`;\n    }\n\n    handleClick() {\n        this.message = \"Custom Button Clicked!\";\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"step-2-import-the-component\"\n    }}>{`Step 2: Import the Component`}</h4>\n    <p>{`To use the new component in your application, import it in the `}<inlineCode parentName=\"p\">{`App.ts`}</inlineCode>{` file and include it in the render method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { LitElement, html } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators.js\";\n// Import the MyCustomButton component   \nimport { MyCustomButton } from \"./MyCustomButton\";\n\n@customElement(\"add-on-app\")\n// Now you can use the MyCustomButton component in the render method of \n// the App component. For instance in the block below:\nexport class App extends LitElement {\n    ...\n    render() {\n        return html\\` <sp-theme theme=\"express\" color=\"light\" scale=\"medium\">\n            <div class=\"container\">\n                <sp-button size=\"m\" @click=\\${this._handleClick}>Create Rectangle</sp-button>                \n                <my-custom-button></my-custom-button>\n            </div>\n        </sp-theme>\\`;\n    }\n    ...\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"next-steps\"\n    }}>{`Next Steps`}</h2>\n    <p>{`Next, you can explore more advanced features of Lit and TypeScript to enhance your components. Some areas to explore include:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://lit.dev/docs/v1/components/events/\"\n        }}><strong parentName=\"a\">{`Event Handling`}</strong></a>{`: Learn how to handle events in Lit components and communicate between components.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://lit.dev/docs/composition/component-composition/\"\n        }}><strong parentName=\"a\">{`Component Composition`}</strong></a>{`: Explore how to compose multiple components together to create complex UIs.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://lit.dev/articles/lit-cheat-sheet/#data-flow-and-state-management\"\n        }}><strong parentName=\"a\">{`State Management`}</strong></a>{`: Implement state management solutions like Redux or MobX to manage the state of your components.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://lit.dev/docs/components/events/#optimizing-for-performance\"\n        }}><strong parentName=\"a\">{`Performance Optimization`}</strong></a>{`: Optimize your components for performance by using memoization, lazy loading, and other techniques.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://lit.dev/docs/tools/testing/\"\n        }}><strong parentName=\"a\">{`Testing`}</strong></a>{`: Write unit tests for your components using tools like Jest or Mocha to ensure their correctness and reliability.`}</li>\n    </ul>\n    <p>{`Check out `}<a parentName=\"p\" {...{\n        \"href\": \"https://lit.dev/articles/lit-cheat-sheet/#shadow-dom\"\n      }}>{`this handy cheat sheet`}</a>{` on properties and state for further reference throughout your development.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","ProductCard","InlineAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","slots","theme","width","parentName","variant","isMDXComponent"],"sourceRoot":""}