{"version":3,"file":"component---src-pages-guides-learn-how-to-create-renditions-md-1dbd04d1d31dc294e510.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/learn/how_to/create_renditions.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"create-renditions\"\n    }}>{`Create Renditions`}</h1>\n    <p>{`Renditions are different output versions of a document made for specific purposes; for example, a high-quality PDF for printing or a smaller JPG for sharing online.`}</p>\n    <h2 {...{\n      \"id\": \"rendition-settings\"\n    }}>{`Rendition settings`}</h2>\n    <p>{`Renditions are created via the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#createrenditions\"\n      }}><inlineCode parentName=\"a\">{`createRendition()`}</inlineCode></a>{` method of the `}<inlineCode parentName=\"p\">{`addOnUISdk.app.document`}</inlineCode>{` object. The method accepts two parameters:`}</p>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"../../../references/addonsdk/app-document.md#renditionoptions\"\n        }}><inlineCode parentName=\"a\">{`renditionOptions`}</inlineCode></a>{`: controls the page range that is meant to be exported and the file format (jpg, png, mp4 and pdf).`}</li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"../../../references/addonsdk/addonsdk-constants.md\"\n        }}><inlineCode parentName=\"a\">{`renditionIntent`}</inlineCode></a>{` constant (optional): controls the intent of the exported content (preview, export, print).`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"check-export-permissions\"\n    }}>{`Check export permissions`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`exportAllowed()`}</inlineCode>{` method determines whether the current document can be exported based on its review status in collaborative workflows. This applies mainly to `}<a parentName=\"p\" {...{\n        \"href\": \"https://business.adobe.com/products/workfront/integrations/express.html\"\n      }}>{`enterprise customers using Adobe Express's review and approval features`}</a>{`, where documents may be restricted from export until approved by designated reviewers.`}</p>\n    <p>{`Before creating renditions for export or print purposes, you can check that it's permitted first using the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#exportallowed\"\n      }}><inlineCode parentName=\"a\">{`exportAllowed()`}</inlineCode></a>{` method:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Check export permissions before creating non-preview renditions\nconst canExport = await addOnUISdk.app.document.exportAllowed();\n\nif (!canExport) {\n  // Export/print not allowed, but preview renditions are still permitted\n  console.log(\"Export restricted - only preview available\");\n\n  // Create preview rendition (always allowed)\n  const previewRendition = await addOnUISdk.app.document.createRenditions(\n    { range: addOnUISdk.constants.Range.currentPage, format: addOnUISdk.constants.RenditionFormat.png },\n    addOnUISdk.constants.RenditionIntent.preview\n  );\n  // ... show in UI only, don't allow download\n  return;\n}\n\n// Proceed with export renditions if allowed\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`Important:`}</strong>{` This check is only necessary for `}<inlineCode parentName=\"p\">{`RenditionIntent.export`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`RenditionIntent.print`}</inlineCode>{`. Renditions created with `}<inlineCode parentName=\"p\">{`RenditionIntent.preview`}</inlineCode>{` are always allowed, regardless of the document's review status.`}</p>\n    <p><strong parentName=\"p\">{`Why check export permissions first?`}</strong>{` If you skip this check and attempt to create export/print renditions when the document doesn't allow exports, users may see an error message such as \"Request approval\" and \"Get approval from your viewers before sharing this file\". Checking `}<inlineCode parentName=\"p\">{`exportAllowed()`}</inlineCode>{` first lets you provide a better user experience by either offering preview-only options or explaining why export is restricted.`}</p>\n    <h2 {...{\n      \"id\": \"export-content\"\n    }}>{`Export content`}</h2>\n    <p>{`Usually, you create renditions to allow users to download or share your content in different formats. This is a multi-step process that involves:`}</p>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Creating a new rendition`}</strong>{` based on specific export configuration options via the `}<a parentName=\"li\" {...{\n          \"href\": \"../../../references/addonsdk/app-document.md#createrenditions\"\n        }}><inlineCode parentName=\"a\">{`createRendition()`}</inlineCode></a>{` method of the `}<inlineCode parentName=\"li\">{`addOnUISdk.app.document`}</inlineCode>{` object.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Converting`}</strong>{` the returned `}<inlineCode parentName=\"li\">{`blob`}</inlineCode>{` object into a URL via the `}<inlineCode parentName=\"li\">{`URL.createObjectURL()`}</inlineCode>{` method.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Creating a download link`}</strong>{` for the user to download the rendition, e.g., using the URL string from the previous step as the `}<inlineCode parentName=\"li\">{`href`}</inlineCode>{` attribute of an `}<inlineCode parentName=\"li\">{`<a>`}</inlineCode>{` element.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <p>{`In the following snippet, we create a rendition of the current page in PNG format when the user clicks a button. We'll create a temporary anchor element to trigger the download of the rendition.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(async () => {\n  // Attach the rendition creation to a button click event\n  document\n    .querySelector(\"#download-button\")\n    .addEventListener(\"click\", async () => {\n      // Check if export is allowed (prevents \"Request approval\" error dialog)\n      const canExport = await addOnUISdk.app.document.exportAllowed();\n\n      if (!canExport) {\n        try {\n            // Show informational message for preview\n            let dialogOptions = {\n              variant: \"information\",\n              title: \"Requires approval\",\n              description:\n                \"Content export/download is restricted while the document is under review and requires approval. Showing preview instead.\",\n              buttonLabels: { primary: \"Ok\", cancel: \"Cancel\" },\n            };\n            const result = await addOnUISdk.app.showModalDialog(dialogOptions);\n            console.log(\"Button type clicked \" + result.buttonType);\n        } catch (error) {\n            console.log(\"Error showing modal dialog:\", error);\n        }\n\n        // Create preview rendition (always allowed). You will need to add the \\`\"renditionPreview\"\\` flag to the \\`manifest.json\\` file in order to create preview renditions.\n        const previewRendition = await addOnUISdk.app.document.createRenditions(\n          {\n            range: addOnUISdk.constants.Range.currentPage,\n            format: addOnUISdk.constants.RenditionFormat.png,\n          },\n          addOnUISdk.constants.RenditionIntent.preview\n        );\n\n        // Display preview in UI only (don't trigger download)\n        const previewUrl = URL.createObjectURL(previewRendition[0].blob);\n        const img = document.createElement(\"img\");\n        img.src = previewUrl;\n        document.body.appendChild(img);\n        return;\n      }\n\n      // Create a rendition for download (export intent)\n      const rendition = await addOnUISdk.app.document.createRenditions(\n        // renditionOptions\n        {\n          range: addOnUISdk.constants.Range.currentPage,\n          format: addOnUISdk.constants.RenditionFormat.png,\n        },\n        // renditionIntent\n        addOnUISdk.constants.RenditionIntent.export\n      );\n\n      console.log(\"Renditions created: \", rendition);\n      // [{\n      //   type: \"page\",\n      //   blob: { size: 16195, type: \"image/png\" },\n      //   title: \"\",\n      //   metadata: { ... },\n      // }];\n\n      // Convert the blob into a URL to be consumed by an anchor element\n      const downloadUrl = URL.createObjectURL(rendition[0].blob);\n\n      // Create a temp/disposable anchor element to trigger the download\n      const a = document.createElement(\"a\");\n      a.href = downloadUrl; // Set the URL\n      a.download = \"Preview_rendition.png\"; // Set the desired file name\n      document.body.appendChild(a); // Add the anchor to the DOM\n      a.click(); // Trigger the download\n      document.body.removeChild(a); // Clean up\n      URL.revokeObjectURL(downloadUrl); // Release the object URL\n    });\n});\n`}</code></pre>\n    <p>{`There are multiple classes that inherit from the `}<inlineCode parentName=\"p\">{`RenditionOptions`}</inlineCode>{` class, such as `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#jpgrenditionoptions\"\n      }}><inlineCode parentName=\"a\">{`JpgRenditionOptions`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#pngrenditionoptions\"\n      }}><inlineCode parentName=\"a\">{`PngRenditionOptions`}</inlineCode></a>{`, and `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#pdfrenditionoptions\"\n      }}><inlineCode parentName=\"a\">{`PdfRenditionOptions`}</inlineCode></a>{`. Each of these classes has specific properties that can be set to control the output of the rendition.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const JpgRendition = await addOnUISdk.app.document.createRenditions(\n  // JpgRenditionOptions\n  {\n    range: addOnUISdk.constants.Range.currentPage,\n    format: addOnUISdk.constants.RenditionFormat.jpg,\n    // number in the range [0, 1]\n    quality: 0.41,\n    // no upscaling, result depends on the original image size/ratio\n    requestedSize: { width: 600, height: 600 },\n  }\n);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const pdfRendition = await addOnUISdk.app.document.createRenditions(\n  // PdfRenditionOptions\n  {\n    range: addOnUISdk.constants.Range.currentPage,\n    format: addOnUISdk.constants.RenditionFormat.pdf,\n    bleed: { amount: 5, unit: addOnUISdk.constants.BleedUnit.mm },\n  }\n);\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`To allow the user to download the rendition, the `}<strong parentName=\"p\">{`\"permissions\"`}</strong>{` section should include `}<inlineCode parentName=\"p\">{`\"allow-downloads\"`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`\"sandbox\"`}</inlineCode>{` array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"testId\": \"cbe48204-578d-47cc-9ad4-a9aaa81dc3d3\",\n  \"name\": \"Hello World\", \"version\": \"1.0.0\", \"manifestVersion\": 2,\n  \"requirements\": {\n    \"apps\": [ { \"name\": \"Express\", \"apiVersion\": 1 } ],\n  },\n  \"entryPoints\": [\n    {\n      \"type\": \"panel\", \"id\": \"panel1\", \"main\": \"index.html\",\n      \"documentSandbox\": \"sandbox/code.js\",\n      \"permissions\": {\n        \"sandbox\": [\n          \"allow-popups-to-escape-sandbox\",\n          \"allow-popups\",\n          \"allow-downloads\" 👈 👀\n        ]\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <p>{`Please also check out the `}<a parentName=\"p\" {...{\n        \"href\": \"../samples.md#export-sample\"\n      }}>{`export-sample add-on`}</a>{` for a more detailed example.`}</p>\n    <h2 {...{\n      \"id\": \"the-preview-intent\"\n    }}>{`The Preview intent`}</h2>\n    <p>{`When the `}<inlineCode parentName=\"p\">{`renditionIntent`}</inlineCode>{` is set to `}<inlineCode parentName=\"p\">{`RenditionIntent.preview`}</inlineCode>{`, the output is created for `}<strong parentName=\"p\">{`preview purposes only`}</strong>{`. This means that the rendition is not meant to be downloaded or shared; for example, because the user is not on a paid Adobe Express plan and the design contains Premium content.`}</p>\n    <p>{`In this case, preview renditions are used either for processing purposes (e.g., if the add-on needs to perform data analysis on the design), or to be displayed in the add-on's panel or in a new window—making sure users cannot extract the content. Please see `}<a parentName=\"p\" {...{\n        \"href\": \"./premium_content.md#allow-only-the-preview-of-premium-content\"\n      }}>{`this page`}</a>{` for more detail on handling such scenarios.`}</p>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`When the `}<inlineCode parentName=\"p\">{`renditionIntent`}</inlineCode>{` is set to `}<inlineCode parentName=\"p\">{`RenditionIntent.preview`}</inlineCode>{`, you must add to the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{` a `}<inlineCode parentName=\"p\">{`\"renditionPreview\"`}</inlineCode>{` flag set to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<strong parentName=\"p\">{`\"requirements\"`}</strong>{` section.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"testId\": \"cbe48204-578d-47cc-9ad4-a9aaa81dc3d3\",\n  \"name\": \"Hello World\", \"version\": \"1.0.0\", \"manifestVersion\": 2,\n  \"requirements\": {\n    \"apps\": [ { \"name\": \"Express\", \"apiVersion\": 1 } ],\n    \"renditionPreview\": true 👈 👀\n  },\n  \"entryPoints\": [\n    // ...\n  ]\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"faqs\"\n    }}>{`FAQs`}</h2>\n    <h4 {...{\n      \"id\": \"q-how-do-i-create-a-rendition\"\n    }}>{`Q: How do I create a rendition?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Call `}<inlineCode parentName=\"p\">{`addOnUISdk.app.document.createRenditions(options, intent)`}</inlineCode>{` to export pages in different formats.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-file-formats-are-supported\"\n    }}>{`Q: What file formats are supported?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` JPG, PNG, MP4, and PDF formats via `}<inlineCode parentName=\"p\">{`addOnUISdk.constants.RenditionFormat`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-export-content-for-download\"\n    }}>{`Q: How do I export content for download?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Create rendition, convert blob to URL with `}<inlineCode parentName=\"p\">{`URL.createObjectURL()`}</inlineCode>{`, then use anchor element to trigger download.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-permissions-are-needed-for-downloads\"\n    }}>{`Q: What permissions are needed for downloads?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Add `}<inlineCode parentName=\"p\">{`\"allow-downloads\"`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`\"sandbox\"`}</inlineCode>{` array in manifest permissions.`}</p>\n    <h4 {...{\n      \"id\": \"q-should-i-check-export-permissions-before-creating-renditions\"\n    }}>{`Q: Should I check export permissions before creating renditions?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Yes, always call `}<inlineCode parentName=\"p\">{`await addOnUISdk.app.document.exportAllowed()`}</inlineCode>{` before using `}<inlineCode parentName=\"p\">{`RenditionIntent.export`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`RenditionIntent.print`}</inlineCode>{` to avoid approval error dialogs.`}</p>\n    <h4 {...{\n      \"id\": \"q-when-do-i-need-to-check-exportallowed\"\n    }}>{`Q: When do I need to check exportAllowed()?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Check before creating renditions with `}<inlineCode parentName=\"p\">{`RenditionIntent.export`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`RenditionIntent.print`}</inlineCode>{`. Preview renditions with `}<inlineCode parentName=\"p\">{`RenditionIntent.preview`}</inlineCode>{` are always allowed.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-happens-if-i-dont-check-export-permissions-first\"\n    }}>{`Q: What happens if I don't check export permissions first?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Users may see error dialogs like \"Request approval\" and \"Get approval from your viewers before sharing this file\" in collaborative workflows.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-should-i-do-when-export-is-not-allowed\"\n    }}>{`Q: What should I do when export is not allowed?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Create preview renditions instead using `}<inlineCode parentName=\"p\">{`RenditionIntent.preview`}</inlineCode>{`, show informational messages, and display content in UI only without download options.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-is-the-preview-intent-for\"\n    }}>{`Q: What is the preview intent for?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Preview intent creates renditions for processing or display only, not for download or sharing.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-set-jpg-quality\"\n    }}>{`Q: How do I set JPG quality?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`quality`}</inlineCode>{` property (0-1 range) in `}<inlineCode parentName=\"p\">{`JpgRenditionOptions`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"q-whats-required-for-preview-intent\"\n    }}>{`Q: What's required for preview intent?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Set `}<inlineCode parentName=\"p\">{`\"renditionPreview\": true`}</inlineCode>{` in manifest requirements section.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-export-the-current-page-only\"\n    }}>{`Q: How do I export the current page only?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`range: addOnUISdk.constants.Range.currentPage`}</inlineCode>{` in rendition options.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","isMDXComponent"],"sourceRoot":""}