"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[9834],{38200:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return s},default:function(){return p}});var o=a(58168),t=a(80045),d=(a(88763),a(15680)),i=a(83407);const l=["components"],s={},r={_frontmatter:s},m=i.A;function p(e){let{components:n}=e,a=(0,t.A)(e,l);return(0,d.mdx)(m,(0,o.A)({},r,a,{components:n,mdxType:"MDXLayout"}),(0,d.mdx)("h1",{id:"use-modal-dialogs"},"Use Modal Dialogs"),(0,d.mdx)("p",null,"When you need to pop up a dialog to show a certain message, such as an informational, warning, or error message, you can use a modal dialog."),(0,d.mdx)("p",null,"Below are some examples of the different types. Also, check out the SDK references for details on how to ",(0,d.mdx)("a",{parentName:"p",href:"/express-add-ons-docs/references/addonsdk/addonsdk-app.md#showmodaldialog"},"show")," or ",(0,d.mdx)("a",{parentName:"p",href:"/express-add-ons-docs/references/addonsdk/runtime-dialog.md#close"},"programmatically close a dialog"),", as well as the ",(0,d.mdx)("a",{parentName:"p",href:"../samples.md#dialog-add-on"},"dialog add-on sample")," for more details."),(0,d.mdx)("h2",{id:"simple-modal-dialog"},"Simple Modal Dialog"),(0,d.mdx)("p",null,"You can show a dialog with the ",(0,d.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/addonsdk-app.md#showmodaldialog"},(0,d.mdx)("inlineCode",{parentName:"a"},"addOnUISdk.app.showModalDialog()"))," method, which accepts an options object containing the ",(0,d.mdx)("inlineCode",{parentName:"p"},"variant"),", ",(0,d.mdx)("inlineCode",{parentName:"p"},"title"),", ",(0,d.mdx)("inlineCode",{parentName:"p"},"description")," and, optionally, ",(0,d.mdx)("inlineCode",{parentName:"p"},"buttonLabels"),". The returned result object from a dialog will contain the ",(0,d.mdx)("inlineCode",{parentName:"p"},"buttonType")," clicked."),(0,d.mdx)("h3",{id:"example"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-js"},'import addOnUISdk from "https://express.adobe.com/static/add-on-sdk/sdk.js";\n\naddOnUISdk.ready.then(() => {\n  // Utility function to show a confirmation dialog\n  async function showConfirmDialog() {\n    try {\n      // Dialog Settings\n      const dialogOptions = {\n        // Available variants:\n        // confirmation, information, warning,\n        // destructive, error, input, custom\n        variant: "confirmation",\n        title: "Enable smart Filters",\n        description: "Smart filters are editable filters.",\n        // Available button labels: primary, secondary, cancel\n        buttonLabels: { primary: "Enable", cancel: "Cancel" },\n      };\n\n      // Show the dialog\n      const result = await addOnUISdk.app.showModalDialog(dialogOptions);\n\n      // Log the button type clicked, return either "primary" or "cancel"\n      console.log("Button type clicked " + result.buttonType);\n    } catch (error) {\n      console.log("Error showing modal dialog:", error);\n    }\n  }\n  // Call the function to show the dialog\n  showConfirmDialog();\n});\n')),(0,d.mdx)("h3",{id:"input-modal-dialog"},"Input Modal Dialog"),(0,d.mdx)("p",null,"A dialog of variant ",(0,d.mdx)("inlineCode",{parentName:"p"},"input")," allows you to accept input from the user. The construction of the dialog is similar to the previous example, but with an additional ",(0,d.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/addonsdk-app.md#field"},(0,d.mdx)("inlineCode",{parentName:"a"},"field"))," object that defines the input field and has a ",(0,d.mdx)("inlineCode",{parentName:"p"},"label"),", ",(0,d.mdx)("inlineCode",{parentName:"p"},"placeholder")," and ",(0,d.mdx)("inlineCode",{parentName:"p"},"fieldType")," properties. In addition to the ",(0,d.mdx)("inlineCode",{parentName:"p"},"buttonType"),", the ",(0,d.mdx)("inlineCode",{parentName:"p"},"fieldValue")," is returned in the result object of the ",(0,d.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/addonsdk-app.md#showmodaldialog"},(0,d.mdx)("inlineCode",{parentName:"a"},"addOnUISdk.app.showModalDialog()"))," method."),(0,d.mdx)("h3",{id:"example-1"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-js"},'import addOnUISdk from "https://express.adobe.com/static/add-on-sdk/sdk.js";\n\naddOnUISdk.ready.then(() => {\n  // Utility function to show an input dialog\n  async function showInputDialog() {\n    try {\n      // Dialog Settings\n      const inputDialogOptions = {\n        variant: "input", // ðŸ‘ˆ\n        title: "Please enter your key",\n        description: "Your API key",\n        buttonLabels: { cancel: "Cancel" },\n        field: {\n          // ðŸ‘ˆ\n          label: "API Key",\n          placeholder: "Enter API key",\n          fieldType: "text",\n        },\n      };\n\n      // Show the dialog\n      const inputDialogResult = await addOnUISdk.app.showModalDialog(\n        inputDialogOptions\n      );\n\n      if (inputDialogResultwi.buttonType === "primary") {\n        // returns the input the user entered if they didn\'t cancel\n        console.log("Field value", inputDialogResult.fieldValue); // ðŸ‘ˆ\n      }\n    } catch (error) {\n      console.log("Error showing modal dialog:", error);\n    }\n  }\n  // Call the function to show the dialog\n  showInputDialog();\n});\n')),(0,d.mdx)("h2",{id:"custom-dialog"},"Custom Dialog"),(0,d.mdx)("p",null,"If you need to show a dialog with custom content, you can use the ",(0,d.mdx)("inlineCode",{parentName:"p"},"custom")," variant. This allows you to define the content in a separate source file (e.g., a ",(0,d.mdx)("inlineCode",{parentName:"p"},"dialog.html"),") and specify the container's size and title."),(0,d.mdx)("h3",{id:"example-2"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-js"},'import addOnUISdk from "https://express.adobe.com/static/add-on-sdk/sdk.js";\n\naddOnUISdk.ready.then(() => {\n  // Utility function to show a custom dialog\n  async function showCustomDialog() {\n    try {\n      // Dialog Settings\n      const customDialogOptions = {\n        variant: "custom",\n        title: "Custom Modal",\n        src: "dialog.html", // use content from this html file\n        size: { width: 600, height: 400 },\n      };\n\n      // Show the dialog\n      const customDialogResult = await addOnUISdk.app.showModalDialog(\n        customDialogOptions\n      );\n\n      // Log the result object\n      console.log("Custom dialog result " + customDialogResult.result);\n    } catch (error) {\n      console.log("Error showing modal dialog:", error);\n    }\n  }\n  // Call the function to show the dialog\n  showCustomDialog();\n});\n')),(0,d.mdx)("p",null,"Inside the custom dialog's HTML file, you can use the ",(0,d.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/runtime-dialog.md"},(0,d.mdx)("inlineCode",{parentName:"a"},"addOnUISdk.instance.runtime.dialog"))," object, especially its ",(0,d.mdx)("inlineCode",{parentName:"p"},"close()")," method, to programmatically close the dialog and set an optional return value."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-js"},'import addOnUISdk from "https://express.adobe.com/static/add-on-sdk/sdk.js";\n\n// Wait for the SDK to be ready\nawait addOnUISdk.ready;\n\ncloseButton.onsubmit = () => {\n  // User canceled the operation, close the dialog with no result\n  addOnUISdk.instance.runtime.dialog.close();\n};\n\ncreateButton.onsubmit = () => {\n  // return an object, to be captured in the result object\n  addOnUISdk.instance.runtime.dialog.close({\n    selectedDesign: "grid-layout",\n  });\n};\n')),(0,d.mdx)("h2",{id:"use-cases"},"Use Cases"),(0,d.mdx)("p",null,"Modals are versatile tools suitable for a wide range of scenarios. They can display simple information or warning pop-ups when you need users to confirm an action or provide input. Additionally, modals can present more complex content, such as custom dialogs that initiate the payment process for accessing add-on's premium features."),(0,d.mdx)("h2",{id:"faqs"},"FAQs"),(0,d.mdx)("h4",{id:"q-how-do-i-show-a-modal-dialog"},"Q: How do I show a modal dialog?"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"A:")," Call ",(0,d.mdx)("inlineCode",{parentName:"p"},"addOnUISdk.app.showModalDialog(options)")," with variant, title, and description options."),(0,d.mdx)("h4",{id:"q-what-dialog-variants-are-available"},"Q: What dialog variants are available?"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"A:")," confirmation, information, warning, destructive, error, input, and custom variants."),(0,d.mdx)("h4",{id:"q-how-do-i-get-user-input-from-a-dialog"},"Q: How do I get user input from a dialog?"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"A:"),' Use variant "input" with a field object containing label, placeholder, and fieldType properties.'),(0,d.mdx)("h4",{id:"q-what-button-types-can-be-returned"},"Q: What button types can be returned?"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"A:")," Dialog results contain buttonType with values like primary, secondary, or cancel."),(0,d.mdx)("h4",{id:"q-how-do-i-create-a-custom-dialog"},"Q: How do I create a custom dialog?"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"A:"),' Use variant "custom" with src pointing to HTML file and optional size properties.'),(0,d.mdx)("h4",{id:"q-how-do-i-programmatically-close-a-dialog"},"Q: How do I programmatically close a dialog?"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"A:")," Call ",(0,d.mdx)("inlineCode",{parentName:"p"},"addOnUISdk.instance.runtime.dialog.close()")," with optional result object."),(0,d.mdx)("h4",{id:"q-what-properties-does-the-result-object-contain"},"Q: What properties does the result object contain?"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"A:")," Result contains buttonType, and for input dialogs also fieldValue with user input."),(0,d.mdx)("h4",{id:"q-what-are-common-use-cases-for-modal-dialogs"},"Q: What are common use cases for modal dialogs?"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"A:")," Confirmations, warnings, user input collection, settings, and premium feature access."))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-learn-how-to-modal-dialogs-md-6e9dd47dd705ffb10393.js.map