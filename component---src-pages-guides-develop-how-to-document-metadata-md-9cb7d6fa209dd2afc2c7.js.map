{"version":3,"file":"component---src-pages-guides-develop-how-to-document-metadata-md-9cb7d6fa209dd2afc2c7.js","mappings":"yTAMaA,EAAe,CAAC,EAKvBC,GAJgBC,EAIY,cAJJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,GAHsBD,MAKtB,MAAMK,EAAc,CAClBP,gBAEIQ,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIR,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,KAACE,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBJ,EAAK,CAAES,WAAYA,EAAYI,QAAQ,eAG5EV,EAAAA,EAAAA,KAAA,MACE,GAAM,yBACJ,0BACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,iCACJ,kCACJA,EAAAA,EAAAA,KAAA,SAAI,gBAAeA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC7B,KAAQ,gDACN,iCAAqC,6IAA4IX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,QAAqB,6BAA4BX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,WAAwB,oIAAmIX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,uBAAoC,SAAQX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,uBAAoC,+CAA8CX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC3nB,KAAQ,oDACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,wBAAwC,aACzEX,EAAAA,EAAAA,KAAA,MACE,GAAM,WACJ,YACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,eACX,q3BA2BNX,EAAAA,EAAAA,KAACL,EAAW,CAACiB,MAAM,OAAOC,QAAQ,UAAUH,QAAQ,iBACpDV,EAAAA,EAAAA,KAAA,SAAI,yBAAwBA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,QAAqB,MAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,WAAwB,UAASX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAAuB,wDAAuDX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,2BAAwC,uCAAsCX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,SAAsB,oEAGzZ,CAEAP,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/develop/how_to/document_metadata.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"use-document-metadata\"\n    }}>{`Use Document Metadata`}</h1>\n    <h2 {...{\n      \"id\": \"get-the-document-id-and-title\"\n    }}>{`Get the Document ID and Title`}</h2>\n    <p>{`Through the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md\"\n      }}>{`Add-on UI SDK Document object`}</a>{`, you can retrieve some information about the current document. Currently, there are asynchronous methods that allow you to retrieve the `}<inlineCode parentName=\"p\">{`id()`}</inlineCode>{` of the document and the `}<inlineCode parentName=\"p\">{`title()`}</inlineCode>{`. Also, associated events will let you listen for when the Document ID or the Document Title have changed, respectively via the `}<inlineCode parentName=\"p\">{`documentIdAvailable`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`documentTitleChange`}</inlineCode>{` events, which you can listen for with the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/addonsdk-app.md#on\"\n      }}><inlineCode parentName=\"a\">{`addOnUISdk.app.on()`}</inlineCode></a>{` method.`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(() => {\n\n  // Get the document ID\n  const docId = await addOnUISdk.app.document.id();\n  // urn:aaid:sc:VA6C2:679a7c92-33ce-4320-a610-f58ccaf56aa8\n\n  // Get the document title\n  const docTitle = await addOnUISdk.app.document.title();\n\n  // Get the document Link\n  const docLink = await addOnUISdk.app.document.link();\n  \n  console.log(\\`Document ID: \\${docId}; Document Title: \\${docTitle}\\`; \\`Document Link: \\${docLink}\\`);  \n\n  // Listen for document ID change\n  addOnUISdk.app.on(\"documentIdAvailable\", data => {\n    console.log(\\`Document ID changed to: \\${data.documentId}\\`);\n  });\n\n  // Listen for document title change\n  addOnUISdk.app.on(\"documentTitleChange\", data => {\n    console.log(\\`Document title changed to: \\${data.documentTitle}\\`);\n  });\n});\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`Please remember that `}<inlineCode parentName=\"p\">{`id()`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`title()`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`link()`}</inlineCode>{` are asynchronous methods and not properties of the `}<inlineCode parentName=\"p\">{`addOnUISdk.app.document`}</inlineCode>{` object. You need to call them and `}<inlineCode parentName=\"p\">{`await`}</inlineCode>{` for the promise to be resolved before using the returned value.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","isMDXComponent"],"sourceRoot":""}