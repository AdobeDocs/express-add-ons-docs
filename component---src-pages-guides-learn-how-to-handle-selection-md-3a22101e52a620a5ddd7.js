"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[292],{38740:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return a},default:function(){return u}});var o=t(58168),l=t(80045),i=(t(88763),t(15680)),s=t(83407);const d=["components"],a={},c=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",n)},r=c("InlineAlert"),p=c("CodeBlock"),m=c("InlineNestedAlert"),g={_frontmatter:a},h=s.A;function u(e){let{components:n}=e,t=(0,l.A)(e,d);return(0,i.mdx)(h,(0,o.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"handle-element-selection"},"Handle Element Selection"),(0,i.mdx)("p",null,"Learn how to work with user selections, handle selection changes, and create responsive interfaces that react to what users select in their Adobe Express documents."),(0,i.mdx)("h2",{id:"getting-started-with-selections"},"Getting Started with Selections"),(0,i.mdx)("p",null,"Selections in Adobe Express represent the elements (nodes) that users have currently selected in their document. The selection system provides access to what's selected, the ability to change selections programmatically, and events to respond to selection changes."),(0,i.mdx)("p",null,"All selection operations use the ",(0,i.mdx)("strong",{parentName:"p"},"Document API")," and run in the ",(0,i.mdx)("strong",{parentName:"p"},"document sandbox environment"),". This means your selection code should be placed in your ",(0,i.mdx)("inlineCode",{parentName:"p"},"code.js")," file, not in your main iframe panel code."),(0,i.mdx)(r,{slots:"header,text",variant:"info",mdxType:"InlineAlert"}),(0,i.mdx)("h3",{id:"document-sandbox-setup"},"Document Sandbox Setup"),(0,i.mdx)("p",null,"Make sure your ",(0,i.mdx)("inlineCode",{parentName:"p"},"manifest.json")," includes ",(0,i.mdx)("inlineCode",{parentName:"p"},'"documentSandbox": "code.js"')," in the entry points to set up the document sandbox environment."),(0,i.mdx)("h3",{id:"check-current-selection"},"Check Current Selection"),(0,i.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"javascript"},"JavaScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js  \nimport { editor } from "express-document-sdk";\n\n// Check if anything is selected\nif (editor.context.hasSelection) {\n  const selection = editor.context.selection;\n  console.log(`Selected ${selection.length} item(s)`);\n  \n  // Process each selected node\n  selection.forEach((node, index) => {\n    console.log(`Node ${index + 1}: ${node.type}`);\n  });\n} else {\n  console.log("Nothing is selected");\n}\n')),(0,i.mdx)("h4",{id:"typescript"},"TypeScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},'// sandbox/code.ts\nimport { editor, Node, EditorEvent } from "express-document-sdk";\n\n// Check if anything is selected\nif (editor.context.hasSelection) {\n  const selection: readonly Node[] = editor.context.selection;\n  console.log(`Selected ${selection.length} item(s)`);\n  \n  // Process each selected node\n  selection.forEach((node: Node, index: number) => {\n    console.log(`Node ${index + 1}: ${node.type}`);\n  });\n} else {\n  console.log("Nothing is selected");\n}\n')),(0,i.mdx)("h2",{id:"understanding-selections"},"Understanding Selections"),(0,i.mdx)("p",null,"In Adobe Express, the selection system provides:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},"Current selection access")," - Get what's currently selected"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},"Selection modification")," - Programmatically change selections  "),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},"Selection events")," - React to selection changes"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},"Selection filtering")," - Handle locked/non-editable content")),(0,i.mdx)("h3",{id:"selection-rules"},"Selection Rules"),(0,i.mdx)("p",null,"Adobe Express enforces these constraints:"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("strong",{parentName:"li"},"Artboard constraint")," - Only nodes within the current artboard can be selected"),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("strong",{parentName:"li"},"Hierarchy filtering")," - Cannot select both parent and child nodes simultaneously"),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("strong",{parentName:"li"},"Locked node filtering")," - Locked nodes are excluded from the main selection"),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("strong",{parentName:"li"},"Editable-only")," - Main selection only includes editable nodes")),(0,i.mdx)("h2",{id:"basic-selection-operations"},"Basic Selection Operations"),(0,i.mdx)("p",null,"Core operations for working with selections."),(0,i.mdx)("h3",{id:"getting-the-current-selection"},"Getting the Current Selection"),(0,i.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"javascript-1"},"JavaScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor } from "express-document-sdk";\n\n// Get the current selection\nconst selection = editor.context.selection;\n\nconsole.log("Selected nodes:", selection.length);\n\n// Process each selected node\nselection.forEach((node, index) => {\n  console.log(`Node ${index + 1}: ${node.type}`);\n  \n  // Common node properties you can access\n  console.log("  Position:", node.translation);\n  console.log("  Size:", { width: node.width, height: node.height });\n});\n')),(0,i.mdx)("h4",{id:"typescript-1"},"TypeScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},'// sandbox/code.ts\nimport { editor, Node, EditorEvent } from "express-document-sdk";\n\n// Get the current selection\nconst selection: readonly Node[] = editor.context.selection;\n\nconsole.log("Selected nodes:", selection.length);\n\n// Process each selected node\nselection.forEach((node: Node, index: number) => {\n  console.log(`Node ${index + 1}: ${node.type}`);\n  \n  // Common node properties you can access  \n  console.log("  Position:", node.translation);\n  console.log("  Size:", { width: node.width, height: node.height });\n});\n')),(0,i.mdx)("h3",{id:"programmatic-selection"},"Programmatic Selection"),(0,i.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"javascript-2"},"JavaScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor } from "express-document-sdk";\n\n// Create and select a single element\nconst rectangle = editor.createRectangle();\nrectangle.width = 100;\nrectangle.height = 100;\nrectangle.translation = { x: 50, y: 50 };\n\n// Add to document\neditor.context.insertionParent.children.append(rectangle);\n\n// Select the rectangle (single element)\neditor.context.selection = rectangle; \n// OR using array syntax: editor.context.selection = [rectangle];\n\nconsole.log("Rectangle is now selected");\n')),(0,i.mdx)("h4",{id:"typescript-2"},"TypeScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},'// code.ts  \nimport { editor, RectangleNode, ContainerNode } from "express-document-sdk";\n\n// Create a simple rectangle to demonstrate selection\nconst rectangle: RectangleNode = editor.createRectangle();\nrectangle.width = 100;\nrectangle.height = 100;\nrectangle.translation = { x: 50, y: 50 };\n\n// Add to document\nconst insertionParent: ContainerNode = editor.context.insertionParent;\ninsertionParent.children.append(rectangle);\n\n// Select the rectangle (single element)\neditor.context.selection = rectangle;\n// OR using array syntax: editor.context.selection = [rectangle];\n\nconsole.log("Rectangle is now selected");\n')),(0,i.mdx)("h3",{id:"multiple-selection"},"Multiple Selection"),(0,i.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"javascript-3"},"JavaScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor } from "express-document-sdk";\n\n// Create multiple elements\nconst rectangle = editor.createRectangle();\nrectangle.width = 80;\nrectangle.height = 80;\nrectangle.translation = { x: 50, y: 50 };\n\nconst ellipse = editor.createEllipse();\nellipse.rx = 40;\nellipse.ry = 40;\nellipse.translation = { x: 200, y: 50 };\n\n// Add both to document\nconst parent = editor.context.insertionParent;\nparent.children.append(rectangle, ellipse);\n\n// Select both elements at once\neditor.context.selection = [rectangle, ellipse];\n\nconsole.log("Multiple elements selected:", editor.context.selection.length);\n')),(0,i.mdx)("h4",{id:"typescript-3"},"TypeScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},'// sandbox/code.ts\nimport { editor, RectangleNode, EllipseNode, ContainerNode } from "express-document-sdk";\n\n// Create multiple simple elements\nconst rectangle: RectangleNode = editor.createRectangle();\nrectangle.width = 80;\nrectangle.height = 80;  \nrectangle.translation = { x: 50, y: 50 };\n\nconst ellipse: EllipseNode = editor.createEllipse();\nellipse.rx = 40;\nellipse.ry = 40;\nellipse.translation = { x: 200, y: 50 };\n\n// Add both to document\nconst parent: ContainerNode = editor.context.insertionParent;\nparent.children.append(rectangle, ellipse);\n\n// Select both elements at once\neditor.context.selection = [rectangle, ellipse];\n\nconsole.log("Multiple elements selected:", editor.context.selection.length);\n')),(0,i.mdx)("h3",{id:"clearing-the-selection"},"Clearing the Selection"),(0,i.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"javascript-4"},"JavaScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor } from "express-document-sdk";\n\n// Clear the selection - both ways work\neditor.context.selection = [];\n// OR: editor.context.selection = undefined;\n\nconsole.log("Selection cleared");\nconsole.log("Has selection:", editor.context.hasSelection); // false\n')),(0,i.mdx)("h4",{id:"typescript-4"},"TypeScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},'// sandbox/code.ts\nimport { editor } from "express-document-sdk";\n\n// Clear the selection - both ways work\neditor.context.selection = [];\n// OR: editor.context.selection = undefined;\n\nconsole.log("Selection cleared");\nconsole.log("Has selection:", editor.context.hasSelection); // false\n')),(0,i.mdx)("h2",{id:"selection-events"},"Selection Events"),(0,i.mdx)("p",null,"Respond to selection changes to create dynamic UIs that update based on what's selected."),(0,i.mdx)("h3",{id:"basic-selection-change-handler"},"Basic Selection Change Handler"),(0,i.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"javascript-5"},"JavaScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor, EditorEvent } from "express-document-sdk";\n\n// Listen for selection changes  \nconst handlerId = editor.context.on(EditorEvent.selectionChange, () => {\n  const selection = editor.context.selection;\n  \n  console.log("Selection changed!");\n  console.log("New selection count:", selection.length);\n  \n  if (selection.length === 0) {\n    console.log("Nothing selected");\n  } else if (selection.length === 1) {\n    console.log("One item selected:", selection[0].type);\n  } else {\n    console.log("Multiple items selected");\n  }\n});\n\n// Store handlerId if you need to unregister later\nconsole.log("Selection handler registered:", handlerId);\n')),(0,i.mdx)("h4",{id:"typescript-5"},"TypeScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},'// sandbox/code.ts\nimport { editor, Node, EditorEvent } from "express-document-sdk";\n\n// Listen for selection changes\nconst handlerId: string = editor.context.on(EditorEvent.selectionChange, () => {\n  const selection: readonly Node[] = editor.context.selection;\n  \n  console.log("Selection changed!");\n  console.log("New selection count:", selection.length);\n  \n  if (selection.length === 0) {\n    console.log("Nothing selected");\n  } else if (selection.length === 1) {\n    console.log("One item selected:", selection[0].type);\n  } else {\n    console.log("Multiple items selected");\n  }\n});\n\n// Store handlerId if you need to unregister later  \nconsole.log("Selection handler registered:", handlerId);\n')),(0,i.mdx)("h3",{id:"properties-panel-example"},"Properties Panel Example"),(0,i.mdx)("p",null,"Dynamic properties panel based on selection:"),(0,i.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"javascript-6"},"JavaScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor, EditorEvent } from "express-document-sdk";\n\nfunction updatePropertiesPanel() {\n  const selection = editor.context.selection;\n  \n  if (selection.length === 0) {\n    console.log("Properties Panel: Show \'Nothing Selected\' state");\n    return;\n  }\n  \n  if (selection.length === 1) {\n    const node = selection[0];\n    console.log("Properties Panel: Show properties for", node.type);\n    \n    // Show different properties based on node type\n    if (node.type === "Text") {\n      console.log("  - Show font controls");\n      console.log("  - Show text color picker");\n    } else if (node.type === "Rectangle" || node.type === "Ellipse") {\n      console.log("  - Show fill color picker");  \n      console.log("  - Show stroke controls");\n    }\n    \n    // Common properties for all nodes\n    console.log("  - Show position controls");\n    console.log("  - Show size controls");\n    \n  } else {\n    console.log("Properties Panel: Show multi-selection options");\n    console.log(`  - ${selection.length} items selected`);\n    console.log("  - Show alignment tools");\n    console.log("  - Show group option");\n  }\n}\n\n// Register the handler\neditor.context.on(EditorEvent.selectionChange, updatePropertiesPanel);\n\n// Call once on startup to initialize\nupdatePropertiesPanel();\n')),(0,i.mdx)("h4",{id:"typescript-6"},"TypeScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},'// sandbox/code.ts\nimport { editor, Node, TextNode } from "express-document-sdk";\n\nfunction updatePropertiesPanel(): void {\n  const selection: readonly Node[] = editor.context.selection;\n  \n  if (selection.length === 0) {\n    console.log("Properties Panel: Show \'Nothing Selected\' state");\n    return;\n  }\n  \n  if (selection.length === 1) {\n    const node: Node = selection[0];\n    console.log("Properties Panel: Show properties for", node.type);\n    \n    // Show different properties based on node type\n    if (node.type === "Text") {\n      console.log("  - Show font controls");\n      console.log("  - Show text color picker");\n    } else if (node.type === "Rectangle" || node.type === "Ellipse") {\n      console.log("  - Show fill color picker");\n      console.log("  - Show stroke controls");\n    }\n    \n    // Common properties for all nodes\n    console.log("  - Show position controls");\n    console.log("  - Show size controls");\n    \n  } else {\n    console.log("Properties Panel: Show multi-selection options");\n    console.log(`  - ${selection.length} items selected`);\n    console.log("  - Show alignment tools");\n    console.log("  - Show group option");\n  }\n}\n\n// Register the handler\neditor.context.on(EditorEvent.selectionChange, updatePropertiesPanel);\n\n// Call once on startup to initialize\nupdatePropertiesPanel();\n')),(0,i.mdx)("h3",{id:"event-handler-cleanup"},"Event Handler Cleanup"),(0,i.mdx)("p",null,"⚠️ ",(0,i.mdx)("strong",{parentName:"p"},"Important"),": Always clean up event handlers to prevent memory leaks."),(0,i.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"javascript-7"},"JavaScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor, EditorEvent } from "express-document-sdk";\n\n// Store handler IDs so you can unregister them later\nlet selectionHandlerId = null;\n\nfunction startListening() {\n  // Register handler and store the ID\n  selectionHandlerId = editor.context.on(EditorEvent.selectionChange, () => {\n    console.log("Selection changed!");\n    // Handle selection change\n  });\n  \n  console.log("✅ Selection handler registered");\n}\n\nfunction stopListening() {\n  // Clean up the handler\n  if (selectionHandlerId) {\n    editor.context.off(EditorEvent.selectionChange, selectionHandlerId);\n    selectionHandlerId = null;\n    console.log("✅ Selection handler cleaned up");\n  }\n}\n\n// Start listening\nstartListening();\n\n// Clean up when your add-on is being destroyed or reset\n// stopListening();\n')),(0,i.mdx)("h4",{id:"typescript-7"},"TypeScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},'// sandbox/code.ts\nimport { editor, EditorEvent } from "express-document-sdk";\n\n// Store handler IDs so you can unregister them later\nlet selectionHandlerId: string | null = null;\n\nfunction startListening(): void {\n  // Register handler and store the ID\n  selectionHandlerId = editor.context.on(EditorEvent.selectionChange, () => {\n    console.log("Selection changed!");\n    // Handle selection change\n  });\n  \n  console.log("✅ Selection handler registered");\n}\n\nfunction stopListening(): void {\n  // Clean up the handler\n  if (selectionHandlerId) {\n    editor.context.off(EditorEvent.selectionChange, selectionHandlerId);\n    selectionHandlerId = null;\n    console.log("✅ Selection handler cleaned up");\n  }\n}\n\n// Start listening\nstartListening();\n\n// Clean up when your add-on is being destroyed or reset\n// stopListening();\n')),(0,i.mdx)("h2",{id:"advanced-selection-techniques"},"Advanced Selection Techniques"),(0,i.mdx)("p",null,"Advanced patterns for complex add-ons."),(0,i.mdx)("h3",{id:"working-with-lockednon-editable-elements"},"Working with Locked/Non-Editable Elements"),(0,i.mdx)("p",null,"Handle selections that include locked or non-editable content:"),(0,i.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"javascript-8"},"JavaScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor, EditorEvent } from "express-document-sdk";\n\nfunction analyzeCompleteSelection() {\n  const selection = editor.context.selection;\n  const fullSelection = editor.context.selectionIncludingNonEditable;\n  \n  return {\n    editableCount: selection.length,\n    totalCount: fullSelection.length,\n    lockedCount: fullSelection.length - selection.length,\n    types: [...new Set(selection.map(node => node.type))], // Unique types\n    hasText: selection.some(node => node.type === "Text"),\n    hasShapes: selection.some(node => \n      node.type === "Rectangle" || node.type === "Ellipse"\n    ),\n    isEmpty: !editor.context.hasSelection\n  };\n}\n\n// Example: Dynamic UI updates based on detailed analysis\neditor.context.on(EditorEvent.selectionChange, () => {\n  const analysis = analyzeCompleteSelection();\n  \n  console.log("📊 Detailed Selection Info:");\n  console.log(`  Editable: ${analysis.editableCount}`);\n  if (analysis.lockedCount > 0) {\n    console.log(`  Locked: ${analysis.lockedCount}`);\n  }\n  console.log(`  Types: ${analysis.types.join(", ")}`);\n  \n  // Enable specific tools based on content\n  if (analysis.hasText) {\n    console.log("🔤 Text formatting tools available");\n  }\n  if (analysis.hasShapes) {\n    console.log("🔷 Shape styling tools available");  \n  }\n  if (analysis.editableCount > 1) {\n    console.log("📐 Alignment tools available");\n  }\n});\n')),(0,i.mdx)("h4",{id:"typescript-8"},"TypeScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},'// code.ts\nimport { editor, Node, EditorEvent } from "express-document-sdk";\n\ninterface DetailedSelectionAnalysis {\n  editableCount: number;\n  totalCount: number;\n  lockedCount: number;\n  types: string[];\n  hasText: boolean;\n  hasShapes: boolean;\n  isEmpty: boolean;\n}\n\nfunction analyzeSelection(): DetailedSelectionAnalysis {\n  const selection: readonly Node[] = editor.context.selection;\n  const fullSelection: readonly Node[] = editor.context.selectionIncludingNonEditable;\n  \n  return {\n    editableCount: selection.length,\n    totalCount: fullSelection.length,\n    lockedCount: fullSelection.length - selection.length,\n    types: [...new Set(selection.map((node: Node) => node.type))], // Unique types\n    hasText: selection.some((node: Node) => node.type === "Text"),\n    hasShapes: selection.some((node: Node) => \n      node.type === "Rectangle" || node.type === "Ellipse"\n    ),\n    isEmpty: !editor.context.hasSelection\n  };\n}\n\n// Example: Dynamic UI updates based on detailed analysis\neditor.context.on(EditorEvent.selectionChange, () => {\n  const analysis: DetailedSelectionAnalysis = analyzeSelection();\n  \n  console.log("📊 Detailed Selection Info:");\n  console.log(`  Editable: ${analysis.editableCount}`);\n  if (analysis.lockedCount > 0) {\n    console.log(`  Locked: ${analysis.lockedCount}`);\n  }\n  console.log(`  Types: ${analysis.types.join(", ")}`);\n  \n  // Enable specific tools based on content\n  if (analysis.hasText) {\n    console.log("🔤 Text formatting tools available");\n  }\n  if (analysis.hasShapes) {\n    console.log("🔷 Shape styling tools available");\n  }\n  if (analysis.editableCount > 1) {\n    console.log("📐 Alignment tools available");\n  }\n});\n')),(0,i.mdx)("h2",{id:"ui-integration"},"UI Integration"),(0,i.mdx)("p",null,"Communicate selection changes between the document sandbox and your UI panel to create responsive interfaces."),(0,i.mdx)("h3",{id:"selection-based-actions"},"Selection-Based Actions"),(0,i.mdx)("p",null,"Common patterns for performing actions on selected elements:"),(0,i.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"javascript-9"},"JavaScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor, colorUtils } from "express-document-sdk";\n\n// Function to apply red color to selected text\nfunction applyRedToSelectedText() {\n  const selection = editor.context.selection;\n  \n  // Filter for text nodes only\n  const textNodes = selection.filter(node => node.type === "Text");\n  \n  if (textNodes.length === 0) {\n    console.log("No text nodes selected");\n    return;\n  }\n  \n  // Apply red color to all selected text\n  const redColor = colorUtils.fromHex("#FF0000");\n  \n  textNodes.forEach(textNode => {\n    textNode.fullContent.applyCharacterStyles({ color: redColor });\n  });\n  \n  console.log(`Applied red color to ${textNodes.length} text nodes`);\n}\n\n// Function to group selected elements\nfunction groupSelection() {\n  const selection = editor.context.selection;\n  \n  if (selection.length < 2) {\n    console.log("Need at least 2 elements to create a group");\n    return;\n  }\n  \n  // Create a group\n  const group = editor.createGroup();\n  \n  // Add selected elements to the group\n  selection.forEach(node => {\n    // Remove from current parent and add to group\n    node.removeFromParent();\n    group.children.append(node);\n  });\n  \n  // Add group to the document\n  editor.context.insertionParent.children.append(group);\n  \n  // Select the new group\n  editor.context.selection = group;\n  \n  console.log(`Created group with ${selection.length} elements`);\n}\n\n// Register handlers for different actions\neditor.context.on(EditorEvent.selectionChange, () => {\n  const selection = editor.context.selection;\n  \n  // Update UI or enable/disable actions based on selection\n  if (selection.length === 0) {\n    console.log("No selection - disable all actions");\n  } else if (selection.length === 1) {\n    console.log("Single selection - enable individual actions");\n  } else {\n    console.log("Multiple selection - enable group actions");\n  }\n});\n')),(0,i.mdx)("h4",{id:"typescript-9"},"TypeScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},'// sandbox/code.ts\nimport { editor, colorUtils, Node, TextNode, GroupNode, ContainerNode } from "express-document-sdk";\n\n// Function to apply red color to selected text\nfunction applyRedToSelectedText(): void {\n  const selection: readonly Node[] = editor.context.selection;\n  \n  // Filter for text nodes only\n  const textNodes = selection.filter((node: Node): node is TextNode => \n    node.type === "Text"\n  );\n  \n  if (textNodes.length === 0) {\n    console.log("No text nodes selected");\n    return;\n  }\n  \n  // Apply red color to all selected text\n  const redColor = colorUtils.fromHex("#FF0000");\n  \n  textNodes.forEach((textNode: TextNode) => {\n    textNode.fullContent.applyCharacterStyles({ color: redColor });\n  });\n  \n  console.log(`Applied red color to ${textNodes.length} text nodes`);\n}\n\n// Function to group selected elements\nfunction groupSelection(): void {\n  const selection: readonly Node[] = editor.context.selection;\n  \n  if (selection.length < 2) {\n    console.log("Need at least 2 elements to create a group");\n    return;\n  }\n  \n  // Create a group\n  const group: GroupNode = editor.createGroup();\n  \n  // Add selected elements to the group\n  selection.forEach((node: Node) => {\n    // Remove from current parent and add to group\n    node.removeFromParent();\n    group.children.append(node);\n  });\n  \n  // Add group to the document\n  const insertionParent: ContainerNode = editor.context.insertionParent;\n  insertionParent.children.append(group);\n  \n  // Select the new group\n  editor.context.selection = group;\n  \n  console.log(`Created group with ${selection.length} elements`);\n}\n\n// Register handlers for different actions\neditor.context.on(EditorEvent.selectionChange, () => {\n  const selection: readonly Node[] = editor.context.selection;\n  \n  // Update UI or enable/disable actions based on selection\n  if (selection.length === 0) {\n    console.log("No selection - disable all actions");\n  } else if (selection.length === 1) {\n    console.log("Single selection - enable individual actions");\n  } else {\n    console.log("Multiple selection - enable group actions");\n  }\n});\n')),(0,i.mdx)("h3",{id:"selection-state-management"},"Selection State Management"),(0,i.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"javascript-10"},"JavaScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor, EditorEvent } from "express-document-sdk";\n\nclass SelectionManager {\n  constructor() {\n    this.selectionHistory = [];\n    this.handlerId = null;\n    this.startListening();\n  }\n  \n  startListening() {\n    this.handlerId = editor.context.on(EditorEvent.selectionChange, () => {\n      const selection = editor.context.selection;\n      \n      // Store selection in history (limit to last 10)\n      this.selectionHistory.push([...selection]);\n      if (this.selectionHistory.length > 10) {\n        this.selectionHistory.shift();\n      }\n      \n      console.log("Selection history length:", this.selectionHistory.length);\n      this.notifySelectionChange(selection);\n    });\n  }\n  \n  notifySelectionChange(selection) {\n    // Custom logic based on selection\n    if (selection.length === 0) {\n      this.onNoSelection();\n    } else if (selection.length === 1) {\n      this.onSingleSelection(selection[0]);\n    } else {\n      this.onMultipleSelection(selection);\n    }\n  }\n  \n  onNoSelection() {\n    console.log("No elements selected");\n    // Disable context-sensitive UI\n  }\n  \n  onSingleSelection(node) {\n    console.log("Single element selected:", node.type);\n    // Enable single-element actions\n  }\n  \n  onMultipleSelection(selection) {\n    console.log("Multiple elements selected:", selection.length);\n    // Enable multi-element actions\n  }\n  \n  restorePreviousSelection() {\n    if (this.selectionHistory.length >= 2) {\n      const previousSelection = this.selectionHistory[this.selectionHistory.length - 2];\n      editor.context.selection = previousSelection;\n    }\n  }\n  \n  stopListening() {\n    if (this.handlerId) {\n      editor.context.off(EditorEvent.selectionChange, this.handlerId);\n      this.handlerId = null;\n    }\n  }\n}\n\n// Usage\nconst selectionManager = new SelectionManager();\n')),(0,i.mdx)("h4",{id:"typescript-10"},"TypeScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},'// code.ts\nimport { editor, Node, EditorEvent } from "express-document-sdk";\n\nclass SelectionManager {\n  private selectionHistory: Node[][] = [];\n  private handlerId: string | null = null;\n  \n  constructor() {\n    this.startListening();\n  }\n  \n  startListening(): void {\n    this.handlerId = editor.context.on(EditorEvent.selectionChange, () => {\n      const selection: readonly Node[] = editor.context.selection;\n      \n      // Store selection in history (limit to last 10)\n      this.selectionHistory.push([...selection]);\n      if (this.selectionHistory.length > 10) {\n        this.selectionHistory.shift();\n      }\n      \n      console.log("Selection history length:", this.selectionHistory.length);\n      this.notifySelectionChange(selection);\n    });\n  }\n  \n  private notifySelectionChange(selection: readonly Node[]): void {\n    // Custom logic based on selection\n    if (selection.length === 0) {\n      this.onNoSelection();\n    } else if (selection.length === 1) {\n      this.onSingleSelection(selection[0]);\n    } else {\n      this.onMultipleSelection(selection);\n    }\n  }\n  \n  private onNoSelection(): void {\n    console.log("No elements selected");\n    // Disable context-sensitive UI\n  }\n  \n  private onSingleSelection(node: Node): void {\n    console.log("Single element selected:", node.type);\n    // Enable single-element actions\n  }\n  \n  private onMultipleSelection(selection: readonly Node[]): void {\n    console.log("Multiple elements selected:", selection.length);\n    // Enable multi-element actions\n  }\n  \n  restorePreviousSelection(): void {\n    if (this.selectionHistory.length >= 2) {\n      const previousSelection = this.selectionHistory[this.selectionHistory.length - 2];\n      editor.context.selection = previousSelection;\n    }\n  }\n  \n  stopListening(): void {\n    if (this.handlerId) {\n      editor.context.off(EditorEvent.selectionChange, this.handlerId);\n      this.handlerId = null;\n    }\n  }\n}\n\n// Usage\nconst selectionManager = new SelectionManager();\n')),(0,i.mdx)("h2",{id:"best-practices--guidelines"},"Best Practices & Guidelines"),(0,i.mdx)("h3",{id:"event-handler-cleanup-1"},"Event Handler Cleanup"),(0,i.mdx)("p",null,"⚠️ ",(0,i.mdx)("strong",{parentName:"p"},"Important"),": Always clean up event handlers to prevent memory leaks."),(0,i.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"javascript-11"},"JavaScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor, EditorEvent } from "express-document-sdk";\n\n// Store handler IDs for cleanup\nlet selectionHandlerId = null;\n\nfunction setupSelectionHandling() {\n  // Register handler and store ID\n  selectionHandlerId = editor.context.on(EditorEvent.selectionChange, () => {\n    console.log("Selection changed");\n    // Handle selection change\n  });\n  \n  console.log("Selection handler registered");\n}\n\nfunction cleanupSelectionHandling() {\n  // Unregister the handler\n  if (selectionHandlerId) {\n    editor.context.off(EditorEvent.selectionChange, selectionHandlerId);\n    selectionHandlerId = null;\n    console.log("Selection handler unregistered");\n  }\n}\n\n// Setup\nsetupSelectionHandling();\n\n// Cleanup when add-on is being destroyed or reset\n// cleanupSelectionHandling();\n')),(0,i.mdx)("h4",{id:"typescript-11"},"TypeScript"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ts"},'// code.ts\nimport { editor, EditorEvent } from "express-document-sdk";\n\n// Store handler IDs for cleanup\nlet selectionHandlerId: string | null = null;\n\nfunction setupSelectionHandling(): void {\n  // Register handler and store ID\n  selectionHandlerId = editor.context.on(EditorEvent.selectionChange, () => {\n    console.log("Selection changed");\n    // Handle selection change\n  });\n  \n  console.log("Selection handler registered");\n}\n\nfunction cleanupSelectionHandling(): void {\n  // Unregister the handler\n  if (selectionHandlerId) {\n    editor.context.off(EditorEvent.selectionChange, selectionHandlerId);\n    selectionHandlerId = null;\n    console.log("Selection handler unregistered");\n  }\n}\n\n// Setup\nsetupSelectionHandling();\n\n// Cleanup when add-on is being destroyed or reset\n// cleanupSelectionHandling();\n')),(0,i.mdx)("h3",{id:"selection-system-rules"},"Selection System Rules"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("strong",{parentName:"li"},"Artboard constraint"),": Only nodes within the current artboard can be selected"),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("strong",{parentName:"li"},"Hierarchy filtering"),": Cannot select both parent and child nodes simultaneously  "),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("strong",{parentName:"li"},"Locked node handling"),": Locked nodes are excluded from main selection but available in ",(0,i.mdx)("inlineCode",{parentName:"li"},"selectionIncludingNonEditable")),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("strong",{parentName:"li"},"Automatic filtering"),": System automatically filters out invalid selections")),(0,i.mdx)("h3",{id:"important-selection-handler-restrictions"},"Important: Selection Handler Restrictions"),(0,i.mdx)(m,{header:"true",variant:"warning",iconPosition:"left",mdxType:"InlineNestedAlert"},(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Document Modification Restrictions")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Never modify the document inside selection change handlers!")," This can crash the application."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"✅ Safe in selection handlers:")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Update UI panels"),(0,i.mdx)("li",{parentName:"ul"},"Log information  "),(0,i.mdx)("li",{parentName:"ul"},"Analyze selection"),(0,i.mdx)("li",{parentName:"ul"},"Enable/disable buttons"),(0,i.mdx)("li",{parentName:"ul"},"Send data to UI panel")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"❌ Never do in selection handlers:")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Create, delete, or modify nodes"),(0,i.mdx)("li",{parentName:"ul"},"Change document structure  "),(0,i.mdx)("li",{parentName:"ul"},"Set properties on selected elements"))),(0,i.mdx)("h3",{id:"performance-guidelines"},"Performance Guidelines"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("strong",{parentName:"li"},"Keep handlers fast"),": Minimize processing time"),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("strong",{parentName:"li"},"Essential work only"),": Avoid heavy computations"),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("strong",{parentName:"li"},"Clean Up"),": Always unregister handlers when done (",(0,i.mdx)("inlineCode",{parentName:"li"},"editor.context.off()"),")"),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("strong",{parentName:"li"},"Avoid Heavy Work"),": Don't do complex calculations in selection callbacks")),(0,i.mdx)("h3",{id:"communication-between-ui-and-document-sandbox"},"Communication Between UI and Document Sandbox"),(0,i.mdx)("p",null,"One of the most important real-world patterns is communicating selection changes from the document sandbox to your UI panel, allowing you to update the interface based on what the user has selected."),(0,i.mdx)("p",null,"For detailed information on the communication APIs, see the ",(0,i.mdx)("a",{parentName:"p",href:"../../../references/document-sandbox/communication/"},"Communication API reference"),"."),(0,i.mdx)("h4",{id:"complete-communication-example"},"Complete Communication Example"),(0,i.mdx)("p",null,"This example shows how to set up bidirectional communication between your UI panel and document sandbox for selection-based interactions."),(0,i.mdx)("h2",{id:"quick-reference--common-patterns"},"Quick Reference & Common Patterns"),(0,i.mdx)("p",null,"Here are some frequently used patterns you can copy and adapt:"),(0,i.mdx)("h3",{id:"conditional-actions-based-on-selection"},"Conditional Actions Based on Selection"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'// code.js\nimport { editor, EditorEvent } from "express-document-sdk";\n\n// Enable/disable actions based on selection type\neditor.context.on(EditorEvent.selectionChange, () => {\n  const selection = editor.context.selection;\n  \n  // Communicate with your UI panel\n  const actions = {\n    canGroup: selection.length >= 2,\n    canApplyTextStyle: selection.some(node => node.type === "Text"),\n    canApplyFill: selection.some(node => \n      ["Rectangle", "Ellipse"].includes(node.type)\n    ),\n    isEmpty: selection.length === 0\n  };\n  \n  // Send to UI panel for enabling/disabling buttons\n  // (Use the communication API to send this data)\n});\n')),(0,i.mdx)("h3",{id:"selection-based-properties-panel"},"Selection-Based Properties Panel"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'// code.js\nimport { editor, EditorEvent } from "express-document-sdk";\n\n// Update properties panel based on selection\neditor.context.on(EditorEvent.selectionChange, () => {\n  const selection = editor.context.selection;\n  \n  if (selection.length === 1) {\n    const node = selection[0]; // Common pattern: access first selected element\n    \n    // Send node properties to UI for editing\n    const properties = {\n      type: node.type,\n      width: node.width || null,\n      height: node.height || null,\n      x: node.translation?.x || null,\n      y: node.translation?.y || null,\n      locked: node.locked || false\n    };\n    \n    // Update UI panel with these properties\n    console.log("Node properties:", properties);\n  }\n});\n')),(0,i.mdx)("h3",{id:"working-with-single-selection"},"Working with Single Selection"),(0,i.mdx)("p",null,"Many add-ons focus on single-element operations. Here's a common pattern used throughout the documentation:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'// code.js\nimport { editor } from "express-document-sdk";\n\n// Safe access to first selected element (used in use_text.md and other guides)\nif (editor.context.hasSelection) {\n  const selectedNode = editor.context.selection[0];\n  \n  // Perform operations on the selected node\n  if (selectedNode.type === "Text") {\n    // Handle text-specific operations\n  }\n}\n')),(0,i.mdx)("h2",{id:"faqs"},"FAQs"),(0,i.mdx)("h4",{id:"q-how-do-i-get-the-current-selection"},"Q: How do I get the current selection?"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,i.mdx)("inlineCode",{parentName:"p"},"editor.context.selection")," to get an array of currently selected nodes."),(0,i.mdx)("h4",{id:"q-how-do-i-listen-for-selection-changes"},"Q: How do I listen for selection changes?"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,i.mdx)("inlineCode",{parentName:"p"},"editor.context.on(EditorEvent.selectionChange, callback)")," to register a selection change handler."),(0,i.mdx)("h4",{id:"q-how-do-i-programmatically-select-elements"},"Q: How do I programmatically select elements?"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"A:")," Set ",(0,i.mdx)("inlineCode",{parentName:"p"},"editor.context.selection = node")," for single elements or ",(0,i.mdx)("inlineCode",{parentName:"p"},"editor.context.selection = [node1, node2]")," for multiple elements."),(0,i.mdx)("h4",{id:"q-whats-the-difference-between-selection-and-selectionincludingnoneditable"},"Q: What's the difference between selection and selectionIncludingNonEditable?"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"A:")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"selection")," only includes editable nodes, while ",(0,i.mdx)("inlineCode",{parentName:"p"},"selectionIncludingNonEditable")," also includes locked/non-editable nodes."),(0,i.mdx)("h4",{id:"q-can-i-modify-the-document-in-a-selection-change-callback"},"Q: Can I modify the document in a selection change callback?"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"A:")," No, avoid making document changes in selection change callbacks as it may destabilize the application."),(0,i.mdx)("h4",{id:"q-how-do-i-clear-the-selection"},"Q: How do I clear the selection?"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"A:")," Set ",(0,i.mdx)("inlineCode",{parentName:"p"},"editor.context.selection = []")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"editor.context.selection = undefined"),"."),(0,i.mdx)("h4",{id:"q-what-are-the-selection-rules"},"Q: What are the selection rules?"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"A:")," Nodes must be within the current artboard, ancestors cannot be selected with descendants, and locked nodes are filtered out."),(0,i.mdx)("h4",{id:"q-how-do-i-unregister-selection-event-handlers"},"Q: How do I unregister selection event handlers?"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,i.mdx)("inlineCode",{parentName:"p"},"editor.context.off(EditorEvent.selectionChange, handlerId)")," with the ID returned from the ",(0,i.mdx)("inlineCode",{parentName:"p"},"on()")," method."),(0,i.mdx)("h2",{id:"related-topics"},"Related Topics"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},(0,i.mdx)("a",{parentName:"strong",href:"../../../references/document-sandbox/document-apis/classes/Context.md"},"Context API Reference"))," - Complete API documentation for the Context class"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},(0,i.mdx)("a",{parentName:"strong",href:"../../../references/document-sandbox/communication/"},"Communication APIs"))," - Learn how to communicate between document sandbox and UI panel  "),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},(0,i.mdx)("a",{parentName:"strong",href:"./group_elements.md"},"Group Elements"))," - Working with selections to create and manage groups"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},(0,i.mdx)("a",{parentName:"strong",href:"./position_elements.md"},"Position Elements"))," - Positioning and transforming selected elements"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},(0,i.mdx)("a",{parentName:"strong",href:"./use_text.md"},"Use Text"))," - Examples of working with text selections using ",(0,i.mdx)("inlineCode",{parentName:"li"},"editor.context.selection[0]")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},(0,i.mdx)("a",{parentName:"strong",href:"../../../references/document-sandbox/document-apis/enumerations/EditorEvent.md"},"EditorEvent Enumeration"))," - All available editor events"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("strong",{parentName:"li"},(0,i.mdx)("a",{parentName:"strong",href:"../../../references/document-sandbox/document-apis/classes/Node.md"},"Node API Reference"))," - Understanding the Node class used in selections")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-learn-how-to-handle-selection-md-3a22101e52a620a5ddd7.js.map