"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[1719],{37986:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return s},default:function(){return c}});var o=t(87462),i=t(63366),r=(t(15007),t(64983)),a=t(91515),m=["components"],s={},d={_frontmatter:s},p=a.Z;function c(e){var n=e.components,t=(0,i.Z)(e,m);return(0,r.mdx)(p,(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"communication-apis"},"Communication APIs"),(0,r.mdx)("p",null,"The communication APIs allow you to communicate between the script runtime and the iframe where your add-on is running. "),(0,r.mdx)("h2",{id:"overview"},"Overview"),(0,r.mdx)("p",null,"The script runtime and iframe runtime are two different runtime execution environments which are present on different threads in the browser. The communication APIs are based on the ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/GoogleChromeLabs/comlink"},"Comlink library")," and provide a mechanism to allow the JavaScript code executing in each to interact, so developers can call apis exposed in one environment (ie: script runtime) from another environment (ie: iframe where their add-on is running) bidirectionally."),(0,r.mdx)("h2",{id:"example-code-snippets"},"Example Code Snippets"),(0,r.mdx)("p",null,"The AddOnSdk ",(0,r.mdx)("inlineCode",{parentName:"p"},"runtime")," object provides the methods to allow you to communicate between the two execution environments via ",(0,r.mdx)("inlineCode",{parentName:"p"},"exposeApi()")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"apiProxy()"),". The examples below show the methods in use from both the ",(0,r.mdx)("inlineCode",{parentName:"p"},"index.html")," where the iframe is running with your add-on code, and the script runtime environment running the contents of ",(0,r.mdx)("inlineCode",{parentName:"p"},"code.js"),"."),(0,r.mdx)("h3",{id:"expose-apis-from-the-script"},"Expose APIs from the script"),(0,r.mdx)("h4",{id:"codejs"},(0,r.mdx)("inlineCode",{parentName:"h4"},"code.js")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"const scriptApis = {\n    performWorkOnDocument: function (data, someFlag) {\n        // call content authoring APIs\n    },\n    getDataFromDocument: function() {\n        // get some data from document\n    }\n}\n// expose these apis to be directly consumed in the UI (ie: index.html file).\nruntime.exposeApi(scriptApis);\n")),(0,r.mdx)("h4",{id:"indexhtml"},"index.html"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},'import AddOnSdk from "https://localhost.adobe.com:8081/sdk.js";\n\nAddOnSdk.ready.then(async () => {\n    const { runtime } = AddOnSdk.instance;\n\n    // Wait for the promise to resolve (the script runtime may not have initialized yet) to get a proxy to call APIs defined in the script\n    const scriptApis = await runtime.apiProxy("script");\n\n    await scriptApis.performWorkOnDocument({\n        pageNumber: 1,\n        op: "change_background_color",\n        data: {\n            toColor: "blue"\n        }\n    }, true);\n\n    console.log(await scriptApis.getDataFromDocument());\n});\n')),(0,r.mdx)("h3",{id:"expose-apis-from-the-ui"},"Expose APIs from the UI"),(0,r.mdx)("h4",{id:"indexhtml-1"},(0,r.mdx)("inlineCode",{parentName:"h4"},"index.html")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},'AddOnSdk.ready.then(async () => {\n    console.log("AddOnSdk is ready for use.");\n\n    const { runtime } = AddOnSdk.instance;\n    const uiApi = {\n        performWorkOnUI: function(data, someFlag) {\n            // Do some ui operation\n        },\n        getDataFromUI: async function() {\n            let resolver = undefined;\n            const promise = new Promise(resolve => {\n                resolver = resolve;\n            });\n            setTimeout(() => {\n                resolver("button_color_blue");\n            }, 10);\n            return await promise;\n        }\n    }\n    // Expose the UI Apis to be used in the script code (ie: code.js)\n    runtime.exposeApi(uiApi);\n}\n')),(0,r.mdx)("h4",{id:"codejs-1"},(0,r.mdx)("inlineCode",{parentName:"h4"},"code.js")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},'async function callUIApis() {\n    // Get a proxy to the APIs defined in the UI\n    const uiApis = await runtime.apiProxy("panel");\n    await uiApis.performWorkOnUI({\n        buttonTextFont: 20,\n        buttonColor: "Green"\n    }, true);\n\n    const result = await uiApis.getDataFromUI();\n    console.log("Data from UI: " + result);\n}\n')))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-references-scriptruntime-communication-index-md-74777ed153e58ed686ad.js.map