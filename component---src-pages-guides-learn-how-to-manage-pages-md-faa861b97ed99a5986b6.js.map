{"version":3,"file":"component---src-pages-guides-learn-how-to-manage-pages-md-faa861b97ed99a5986b6.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/learn/how_to/manage_pages.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"manage-pages\"\n    }}>{`Manage Pages`}</h1>\n    <p>{`Learn how to programmatically create, access, and manage pages in Adobe Express documents using the Document API.`}</p>\n    <h2 {...{\n      \"id\": \"understanding-pages-in-adobe-express\"\n    }}>{`Understanding Pages in Adobe Express`}</h2>\n    <p>{`In Adobe Express, documents are organized hierarchically:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Document`}</strong>{` (root)`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\">{`Pages`}</strong>{` (timeline sequence)`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\"><strong parentName=\"li\">{`Artboards`}</strong>{` (scenes within a page)`}\n                <ul parentName=\"li\">\n                  <li parentName=\"ul\"><strong parentName=\"li\">{`Content`}</strong>{` (text, shapes, media, etc.)`}</li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`Every page contains at least one artboard, and all artboards within a page share the same dimensions.`}</p>\n    <h2 {...{\n      \"id\": \"add-a-page\"\n    }}>{`Add a Page`}</h2>\n    <p>{`Use the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/PageList.md#addpage\"\n      }}><inlineCode parentName=\"a\">{`editor.documentRoot.pages.addPage()`}</inlineCode></a>{` method to create a new page with specified dimensions.`}</p>\n    <h3 {...{\n      \"id\": \"example-add-a-standard-page\"\n    }}>{`Example: Add a Standard Page`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Define page dimensions (width x height in pixels)\nconst pageGeometry = {\n  width: 1080,\n  height: 1080\n};\n\n// Add a new page with the specified dimensions\nconst newPage = editor.documentRoot.pages.addPage(pageGeometry);\n\nconsole.log(\"New page created:\", newPage);\nconsole.log(\"Page dimensions:\", newPage.width, \"x\", newPage.height);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// sandbox/code.ts\nimport { editor, PageNode, RectangleGeometry } from \"express-document-sdk\";\n\n// Define page dimensions (width x height in pixels)\nconst pageGeometry: RectangleGeometry = {\n  width: 1080,\n  height: 1080\n};\n\n// Add a new page with the specified dimensions\nconst newPage: PageNode = editor.documentRoot.pages.addPage(pageGeometry);\n\nconsole.log(\"New page created:\", newPage);\nconsole.log(\"Page dimensions:\", newPage.width, \"x\", newPage.height);\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`When you call `}<inlineCode parentName=\"p\">{`editor.documentRoot.pages.addPage()`}</inlineCode>{`, the new page automatically becomes the active page and the default insertion point for new content. The viewport also switches to display the new page's artboard.`}</p>\n    <h3 {...{\n      \"id\": \"example-add-pages-with-different-dimensions\"\n    }}>{`Example: Add Pages with Different Dimensions`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-1\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Add an Instagram post page (square)\nconst instagramPage = editor.documentRoot.pages.addPage({\n  width: 1080,\n  height: 1080\n});\n\n// Add a story page (vertical)\nconst storyPage = editor.documentRoot.pages.addPage({\n  width: 1080,\n  height: 1920\n});\n\n// Add a landscape page\nconst landscapePage = editor.documentRoot.pages.addPage({\n  width: 1920,\n  height: 1080\n});\n\nconsole.log(\"Created 3 pages with different dimensions\");\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-1\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// sandbox/code.ts\nimport { editor, PageNode, RectangleGeometry } from \"express-document-sdk\";\n\n// Add an Instagram post page (square)\nconst instagramPage: PageNode = editor.documentRoot.pages.addPage({\n  width: 1080,\n  height: 1080\n} as RectangleGeometry);\n\n// Add a story page (vertical)\nconst storyPage: PageNode = editor.documentRoot.pages.addPage({\n  width: 1080,\n  height: 1920\n} as RectangleGeometry);\n\n// Add a landscape page\nconst landscapePage: PageNode = editor.documentRoot.pages.addPage({\n  width: 1920,\n  height: 1080\n} as RectangleGeometry);\n\nconsole.log(\"Created 3 pages with different dimensions\");\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"access-pages\"\n    }}>{`Access Pages`}</h2>\n    <h3 {...{\n      \"id\": \"get-the-current-page\"\n    }}>{`Get the Current Page`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-2\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Get the currently active page\nconst currentPage = editor.context.currentPage;\n\nconsole.log(\"Current page dimensions:\", currentPage.width, \"x\", currentPage.height);\nconsole.log(\"Number of artboards:\", currentPage.artboards.length);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-2\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// sandbox/code.js\nimport { editor, PageNode } from \"express-document-sdk\";\n\n// Get the currently active page\nconst currentPage: PageNode = editor.context.currentPage;\n\nconsole.log(\"Current page dimensions:\", currentPage.width, \"x\", currentPage.height);\nconsole.log(\"Number of artboards:\", currentPage.artboards.length);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"access-all-pages\"\n    }}>{`Access All Pages`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-3\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Get all pages in the document\nconst allPages = editor.documentRoot.pages;\n\nconsole.log(\"Total pages in document:\", allPages.length);\n\n// Iterate through all pages\nfor (const page of allPages) {\n  console.log(\\`Page dimensions: \\${page.width} x \\${page.height}\\`);\n  console.log(\\`Artboards in this page: \\${page.artboards.length}\\`);\n}\n\n// Access specific pages by index\nconst firstPage = allPages[0];\nconst lastPage = allPages[allPages.length - 1];\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-3\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// sandbox/code.ts\nimport { editor, PageList, PageNode } from \"express-document-sdk\";\n\n// Get all pages in the document\nconst allPages: PageList = editor.documentRoot.pages;\n\nconsole.log(\"Total pages in document:\", allPages.length);\n\n// Iterate through all pages\nfor (const page of allPages) {\n  console.log(\\`Page dimensions: \\${page.width} x \\${page.height}\\`);\n  console.log(\\`Artboards in this page: \\${page.artboards.length}\\`);\n}\n\n// Access specific pages by index\nconst firstPage: PageNode = allPages[0];\nconst lastPage: PageNode = allPages[allPages.length - 1];\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"working-with-page-content\"\n    }}>{`Working with Page Content`}</h2>\n    <h3 {...{\n      \"id\": \"add-content-to-a-specific-page\"\n    }}>{`Add Content to a Specific Page`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-4\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Create a new page\nconst newPage = editor.documentRoot.pages.addPage({\n  width: 1080,\n  height: 1080\n});\n\n// The new page is automatically active, so content will be added to it\nconst textNode = editor.createText(\"Content on the new page!\");\ntextNode.translation = { x: 100, y: 100 };\n\n// Add to the current insertion parent (the new page's artboard)\neditor.context.insertionParent.children.append(textNode);\n\nconsole.log(\"Added text to the new page\");\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-4\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// sandbox/code.ts\nimport { editor, PageNode, StandaloneTextNode, ContainerNode } from \"express-document-sdk\";\n\n// Create a new page\nconst newPage: PageNode = editor.documentRoot.pages.addPage({\n  width: 1080,\n  height: 1080\n});\n\n// The new page is automatically active, so content will be added to it\nconst textNode: StandaloneTextNode = editor.createText(\"Content on the new page!\");\ntextNode.translation = { x: 100, y: 100 };\n\n// Add to the current insertion parent (the new page's artboard)\nconst insertionParent: ContainerNode = editor.context.insertionParent;\ninsertionParent.children.append(textNode);\n\nconsole.log(\"Added text to the new page\");\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"work-with-page-artboards\"\n    }}>{`Work with Page Artboards`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-5\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Get the current page\nconst currentPage = editor.context.currentPage;\n\n// Access the page's artboards\nconst artboards = currentPage.artboards;\nconsole.log(\"Number of artboards:\", artboards.length);\n\n// Get the first (and typically only) artboard\nconst firstArtboard = artboards.first;\nconsole.log(\"First artboard dimensions:\", firstArtboard.width, \"x\", firstArtboard.height);\n\n// Add content directly to a specific artboard\nconst rect = editor.createRectangle();\nrect.width = 200;\nrect.height = 200;\nrect.translation = { x: 50, y: 50 };\n\nfirstArtboard.children.append(rect);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-5\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// sandbox/code.ts\nimport { editor, PageNode, ArtboardList, ArtboardNode, RectangleNode } from \"express-document-sdk\";\n\n// Get the current page\nconst currentPage: PageNode = editor.context.currentPage;\n\n// Access the page's artboards\nconst artboards: ArtboardList = currentPage.artboards;\nconsole.log(\"Number of artboards:\", artboards.length);\n\n// Get the first (and typically only) artboard\nconst firstArtboard: ArtboardNode = artboards.first!;\nconsole.log(\"First artboard dimensions:\", firstArtboard.width, \"x\", firstArtboard.height);\n\n// Add content directly to a specific artboard\nconst rect: RectangleNode = editor.createRectangle();\nrect.width = 200;\nrect.height = 200;\nrect.translation = { x: 50, y: 50 };\n\nfirstArtboard.children.append(rect);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"common-patterns-and-best-practices\"\n    }}>{`Common Patterns and Best Practices`}</h2>\n    <h3 {...{\n      \"id\": \"page-creation-workflow\"\n    }}>{`Page Creation Workflow`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-6\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\nfunction createTemplatePages() {\n  // Define common page sizes\n  const pageSizes = {\n    instagram: { width: 1080, height: 1080 },\n    story: { width: 1080, height: 1920 },\n    landscape: { width: 1920, height: 1080 },\n    a4: { width: 595, height: 842 }\n  };\n\n  // Create pages for each template\n  const pages = {};\n  \n  for (const [name, dimensions] of Object.entries(pageSizes)) {\n    const page = editor.documentRoot.pages.addPage(dimensions);\n    pages[name] = page;\n    \n    // Add a title to each page\n    const title = editor.createText(\\`\\${name.toUpperCase()} Template\\`);\n    title.translation = { x: 50, y: 50 };\n    editor.context.insertionParent.children.append(title);\n    \n    console.log(\\`Created \\${name} page: \\${dimensions.width}x\\${dimensions.height}\\`);\n  }\n\n  return pages;\n}\n\n// Create template pages\nconst templatePages = createTemplatePages();\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-6\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// sandbox/code.ts\nimport { editor, PageNode, RectangleGeometry, StandaloneTextNode } from \"express-document-sdk\";\n\ninterface PageSizes {\n  [key: string]: RectangleGeometry;\n}\n\nfunction createTemplatePages(): { [key: string]: PageNode } {\n  // Define common page sizes\n  const pageSizes: PageSizes = {\n    instagram: { width: 1080, height: 1080 },\n    story: { width: 1080, height: 1920 },\n    landscape: { width: 1920, height: 1080 },\n    a4: { width: 595, height: 842 }\n  };\n\n  // Create pages for each template\n  const pages: { [key: string]: PageNode } = {};\n  \n  for (const [name, dimensions] of Object.entries(pageSizes)) {\n    const page: PageNode = editor.documentRoot.pages.addPage(dimensions);\n    pages[name] = page;\n    \n    // Add a title to each page\n    const title: StandaloneTextNode = editor.createText(\\`\\${name.toUpperCase()} Template\\`);\n    title.translation = { x: 50, y: 50 };\n    editor.context.insertionParent.children.append(title);\n    \n    console.log(\\`Created \\${name} page: \\${dimensions.width}x\\${dimensions.height}\\`);\n  }\n\n  return pages;\n}\n\n// Create template pages\nconst templatePages = createTemplatePages();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"check-page-properties\"\n    }}>{`Check Page Properties`}</h3>\n    <p>{`For detailed page information including content analysis and print readiness, see the `}<a parentName=\"p\" {...{\n        \"href\": \"page_metadata.md\"\n      }}>{`Page Metadata Ho-to Guide`}</a>{`.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-7\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\nfunction analyzeDocument() {\n  const pages = editor.documentRoot.pages;\n  \n  console.log(\"=== Document Analysis ===\");\n  console.log(\\`Total pages: \\${pages.length}\\`);\n  \n  for (let i = 0; i < pages.length; i++) {\n    const page = pages[i];\n    console.log(\\`\\\\nPage \\${i + 1}:\\`);\n    console.log(\\`  Dimensions: \\${page.width} x \\${page.height}\\`);\n    console.log(\\`  Artboards: \\${page.artboards.length}\\`);\n    \n    // Count content in each artboard\n    for (let j = 0; j < page.artboards.length; j++) {\n      const artboard = page.artboards[j];\n      console.log(\\`  Artboard \\${j + 1}: \\${artboard.children.length} items\\`);\n    }\n  }\n}\n\n// Analyze the current document\nanalyzeDocument();\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-7\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// sandbox/code.ts\nimport { editor, PageList, PageNode, ArtboardNode } from \"express-document-sdk\";\n\nfunction analyzeDocument(): void {\n  const pages: PageList = editor.documentRoot.pages;\n  \n  console.log(\"=== Document Analysis ===\");\n  console.log(\\`Total pages: \\${pages.length}\\`);\n  \n  for (let i = 0; i < pages.length; i++) {\n    const page: PageNode = pages[i];\n    console.log(\\`\\\\nPage \\${i + 1}:\\`);\n    console.log(\\`  Dimensions: \\${page.width} x \\${page.height}\\`);\n    console.log(\\`  Artboards: \\${page.artboards.length}\\`);\n    \n    // Count content in each artboard\n    for (let j = 0; j < page.artboards.length; j++) {\n      const artboard: ArtboardNode = page.artboards[j];\n      console.log(\\`  Artboard \\${j + 1}: \\${artboard.children.length} items\\`);\n    }\n  }\n}\n\n// Analyze the current document\nanalyzeDocument();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"key-concepts\"\n    }}>{`Key Concepts`}</h2>\n    <h3 {...{\n      \"id\": \"pages-vs-artboards\"\n    }}>{`Pages vs Artboards`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Pages`}</strong>{`: Top-level containers in the document timeline`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Artboards`}</strong>{`: \"Scenes\" within a page containing the actual content`}</li>\n      <li parentName=\"ul\">{`All artboards within a page share the same dimensions`}</li>\n      <li parentName=\"ul\">{`When you add a page, it automatically gets one default artboard`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"insertion-context\"\n    }}>{`Insertion Context`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Adding a page automatically makes it the active page`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`editor.context.insertionParent`}</inlineCode>{` points to the active artboard`}</li>\n      <li parentName=\"ul\">{`New content is added to the current insertion parent`}</li>\n      <li parentName=\"ul\">{`The viewport switches to display the new page`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"common-pitfalls\"\n    }}>{`Common Pitfalls`}</h3>\n    <p>{`When working with pages, avoid these common mistakes:`}</p>\n    <InlineAlert slots=\"header, text1, text2\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`Critical: Use the correct method path`}</p>\n    <p>{`The Adobe Express Document API requires the full method path to create pages:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`❌ `}<inlineCode parentName=\"li\">{`editor.addPage()`}</inlineCode>{` (doesn't exist)  `}</li>\n      <li parentName=\"ul\">{`❌ `}<inlineCode parentName=\"li\">{`editor.createPage()`}</inlineCode>{` (doesn't exist)`}</li>\n      <li parentName=\"ul\">{`✅ `}<inlineCode parentName=\"li\">{`editor.documentRoot.pages.addPage()`}</inlineCode>{` (correct)`}</li>\n    </ul>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Don't assume API consistency`}</strong>{` - Unlike other creation methods (like `}<inlineCode parentName=\"li\">{`editor.createRectangle()`}</inlineCode>{`), pages require the full path through the document structure.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Provide page dimensions`}</strong>{` - The `}<inlineCode parentName=\"li\">{`addPage()`}</inlineCode>{` method requires a geometry parameter with width and height.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Expect automatic navigation`}</strong>{` - Adding a page automatically switches to it and updates the viewport.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Remember shared dimensions`}</strong>{` - All artboards within a page must have the same dimensions.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"integration-with-other-apis\"\n    }}>{`Integration with Other APIs`}</h2>\n    <h3 {...{\n      \"id\": \"using-with-metadata-apis\"\n    }}>{`Using with Metadata APIs`}</h3>\n    <p>{`Pages created with `}<inlineCode parentName=\"p\">{`editor.documentRoot.pages.addPage()`}</inlineCode>{` can be used with other Document APIs, particularly for retrieving metadata. See the `}<a parentName=\"p\" {...{\n        \"href\": \"page_metadata.md\"\n      }}>{`Page Metadata How-to Guide`}</a>{` for complete examples.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-8\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Add a page and get its metadata\nconst newPage = editor.documentRoot.pages.addPage({ width: 1080, height: 1080 });\n\n// Get the page ID for use with Add-on UI SDK metadata APIs\nconsole.log(\"New page ID:\", newPage.id);\n\n// You can use this ID with the Add-on UI SDK to get detailed metadata\n// See the Page Metadata guide for complete examples:\n// const pageMetadata = await addOnUISdk.app.document.getPagesMetadata({\n//   pageIds: [newPage.id]\n// });\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-8\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// sandbox/code.ts\nimport { editor, PageNode } from \"express-document-sdk\";\n\n// Add a page and get its metadata\nconst newPage: PageNode = editor.documentRoot.pages.addPage({ width: 1080, height: 1080 });\n\n// Get the page ID for use with Add-on UI SDK metadata APIs\nconsole.log(\"New page ID:\", newPage.id);\n\n// You can use this ID with the Add-on UI SDK to get detailed metadata\n// See the Page Metadata guide for complete examples:\n// const pageMetadata = await addOnUISdk.app.document.getPagesMetadata({\n//   pageIds: [newPage.id]\n// });\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"faqs\"\n    }}>{`FAQs`}</h2>\n    <h4 {...{\n      \"id\": \"q-how-do-i-add-a-page-programmatically\"\n    }}>{`Q: How do I add a page programmatically?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`editor.documentRoot.pages.addPage(dimensions)`}</inlineCode>{` with page dimensions. There is no `}<inlineCode parentName=\"p\">{`createPage()`}</inlineCode>{` method.`}</p>\n    <h4 {...{\n      \"id\": \"q-why-doesnt-createpage-work\"\n    }}>{`Q: Why doesn't createPage() work?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` The Document API uses `}<inlineCode parentName=\"p\">{`editor.documentRoot.pages.addPage()`}</inlineCode>{` for pages, not `}<inlineCode parentName=\"p\">{`createPage()`}</inlineCode>{`. Use `}<inlineCode parentName=\"p\">{`editor.documentRoot.pages.addPage(dimensions)`}</inlineCode>{` instead.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-get-the-current-page\"\n    }}>{`Q: How do I get the current page?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`editor.context.currentPage`}</inlineCode>{` to access the currently active page.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-navigate-between-pages\"\n    }}>{`Q: How do I navigate between pages?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Adding a page automatically switches to it. You can also access pages via `}<inlineCode parentName=\"p\">{`editor.documentRoot.pages`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-happens-when-i-add-a-page\"\n    }}>{`Q: What happens when I add a page?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` A new page with a default artboard is created and automatically becomes the active page and insertion parent.`}</p>\n    <h4 {...{\n      \"id\": \"q-can-i-remove-pages\"\n    }}>{`Q: Can I remove pages?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Currently, the Document API doesn't provide a direct method to remove pages programmatically.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-access-all-pages-in-a-document\"\n    }}>{`Q: How do I access all pages in a document?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`editor.documentRoot.pages`}</inlineCode>{` to access the PageList containing all pages.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-are-the-minimum-requirements-for-a-page\"\n    }}>{`Q: What are the minimum requirements for a page?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Every page must have at least one artboard. The `}<inlineCode parentName=\"p\">{`editor.documentRoot.pages.addPage()`}</inlineCode>{` method automatically creates a default artboard.`}</p>\n    <h2 {...{\n      \"id\": \"related-topics\"\n    }}>{`Related Topics`}</h2>\n    <h3 {...{\n      \"id\": \"page-information-and-metadata\"\n    }}>{`Page Information and Metadata`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"page_metadata.md\"\n          }}>{`Page Metadata`}</a></strong>{` - Get detailed information about pages, including dimensions, content types, and selected page IDs`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"document_metadata.md\"\n          }}>{`Document Metadata`}</a></strong>{` - Access document-level information and listen for document events`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"../../../references/addonsdk/app-document.md#getselectedpageids\"\n          }}>{`getSelectedPageIds() API`}</a></strong>{` - Retrieve IDs of currently selected pages (experimental)`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"working-with-page-content-1\"\n    }}>{`Working with Page Content`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"position_elements.md\"\n          }}>{`Position Elements`}</a></strong>{` - Position and arrange content within pages and artboards`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"group_elements.md\"\n          }}>{`Group Elements`}</a></strong>{` - Organize page content using groups`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"use_geometry.md\"\n          }}>{`Use Geometry`}</a></strong>{` - Create shapes and geometric elements for your pages`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"use_text.md\"\n          }}>{`Use Text`}</a></strong>{` - Add and style text content on pages`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"use_images.md\"\n          }}>{`Use Images`}</a></strong>{` - Import and work with images on pages`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"document-structure-and-context\"\n    }}>{`Document Structure and Context`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"../platform_concepts/document-api.md\"\n          }}>{`Document API Concepts`}</a></strong>{` - Understanding the Adobe Express Document Object Model`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"../../../references/document-sandbox/document-apis/classes/Context.md\"\n          }}>{`Context API Reference`}</a></strong>{` - Current page, selection, and insertion context`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"../../../references/document-sandbox/document-apis/classes/PageNode.md\"\n          }}>{`PageNode API Reference`}</a></strong>{` - Detailed page node documentation`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"../../../references/document-sandbox/document-apis/classes/PageList.md\"\n          }}>{`PageList API Reference`}</a></strong>{` - Page list management methods`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"advanced-topics\"\n    }}>{`Advanced Topics`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"create_renditions.md\"\n          }}>{`Create Renditions`}</a></strong>{` - Export specific pages or entire documents as images, PDFs, or videos`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"page_metadata.md\"\n          }}>{`Page Metadata`}</a></strong>{` - Retrieve detailed page information including dimensions, content analysis, and print readiness`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","CodeBlock","InlineAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","repeat","languages","variant","isMDXComponent"],"sourceRoot":""}