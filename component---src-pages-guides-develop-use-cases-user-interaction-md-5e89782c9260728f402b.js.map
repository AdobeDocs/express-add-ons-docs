{"version":3,"file":"component---src-pages-guides-develop-use-cases-user-interaction-md-5e89782c9260728f402b.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/develop/use_cases/user_interaction.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"user-interaction\"\n    }}>{`User Interaction`}</h1>\n    <h2 {...{\n      \"id\": \"drag-and-drop\"\n    }}>{`Drag and Drop`}</h2>\n    <p>{`If you want to allow a user to drag and drop items from your add-on to the document, you can use the `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/addonsdk/addonsdk-app.md#enabledragtodocument\"\n      }}>{`methods provided in the add-on SDK`}</a>{`. There are also several `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/samples.md\"\n      }}>{`code samples`}</a>{` that implement drag and drop, including the `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/samples.md#import-images-using-oauth\"\n      }}>{`import-images-using-oauth`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/samples.md#pix\"\n      }}>{`pix`}</a>{` samples you can reference. Some example use cases are shown below.`}</p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`To drag audio content, you must specify an additional `}<inlineCode parentName=\"p\">{`attributes`}</inlineCode>{` object with a `}<inlineCode parentName=\"p\">{`title`}</inlineCode>{` property. A note on how to include it found in the `}<a parentName=\"p\" {...{\n        \"href\": \"#example-using-an-image-url\"\n      }}>{`second example below`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-using-local-images\"\n    }}>{`Example using local images`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\nconst IMAGES = new Map([\n    [\"image1.jpg\", \"./images/image1.jpg\"],    \n    [\"image2.jpg\", \"./images/image2.jpg\"],\n    [\"image3.jpg\", \"./images/image3.jpg\"]\n]);\n\nlet gallery;\n\n// Wait for the SDK to be ready before rendering elements in the DOM.\naddOnUISdk.ready.then(async () => {\n    // Create elements in the DOM.\n    gallery = document.createElement(\"div\");\n    gallery.className = \"gallery\";\n\n    IMAGES.forEach((url, id) => {\n        const image = document.createElement(\"img\");\n        image.id = id;\n        image.src = url;\n        image.addEventListener(\"click\", addToDocument);\n\n        // Enable drag to document for the image.\n        addOnUISdk.app.enableDragToDocument(image, {\n            previewCallback: element => {\n                return new URL(element.src);\n            },\n            completionCallback: async (element) => {\n                return [{ blob: await getBlob(element.src) }];\n            }\n        });\n\n        gallery.appendChild(image);\n    });\n\n    // Register event handler for \"dragstart\" event\n    addOnUISdk.app.on(\"dragstart\", startDrag);\n     // Register event handler for 'dragend' event\n    addOnUISdk.app.on(\"dragend\", endDrag);\n\n    document.body.appendChild(gallery);\n});\n\n/**\n * Add image to the document.\n */\nasync function addToDocument(event) {\n    const url = event.currentTarget.src;\n    const blob = await getBlob(url);\n    addOnUISdk.app.document.addImage(blob);\n}\n\n/**\n * Handle \"dragstart\" event\n */\nfunction startDrag(eventData) {\n    console.log(\"The drag event has started for\", eventData.element.id);\n}\n\n/**\n * Handle \"dragend\" event\n */\nfunction endDrag(eventData) {\n    if (!eventData.dropCancelled) {\n        console.log(\"The drag event has ended for\", eventData.element.id);\n    } else {\n        console.log(\"The drag event was cancelled for\", eventData.element.id);\n    }\n}\n\n/**\n * Get the binary object for the image.\n */\nasync function getBlob(url) {\n    return await fetch(url).then(response => response.blob());\n}\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-using-an-image-url\"\n    }}>{`Example using an image URL`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\n// Enable drag support for an element\nfunction makeDraggableUsingUrl(elementId: string, previewUrl: string) {\n  const image = document.getElementById(elementId);\n\n  const dragCallbacks = {\n    previewCallback: (image: HTMLElement) => {\n      return new URL(previewUrl);\n    },\n    completionCallback: async (image: HTMLElement) => {\n      const imageBlob = await fetch(image.src).then((response) =>\n        response.blob()\n      );\n      return [{ blob: imageBlob }];\n      // Note: for audio content, an attributes object with the title is mandatory. \n      // For instance, replace the above return with the following:\n      // return [{blob: audioBlob, attributes: { title: \"Jazzy beats\" }}];\n    },\n  };\n\n  try {\n    addOnUISdk.app.enableDragToDocument(image, dragCallbacks);\n  } catch (error) {\n    console.log(\"Failed to enable DragToDocument:\", error);\n  }\n}\n\naddOnUISdk.app.on(\"dragstart\", (eventData: DragStartEventData) => {\n  console.log(\"The drag event has started for\", eventData.element);\n});\n\naddOnUISdk.app.on(\"dragend\", (eventData: DragEndEventData) => {\n  if (!eventData.dropCancelled) {\n    console.log(\"The drag event has ended for\", eventData.element);\n    disableDragToDocument();\n  } else {\n    console.log(\"The drag event was cancelled for\", eventData.element);\n    console.log(\"Cancel Reason: \", eventData.dropCancelReason);\n  }\n});\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Important Notes:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`If the content being dragged is an animated GIF, it will be added as an animated GIF to the document, as long as it fits `}<a parentName=\"li\" {...{\n          \"href\": \"https://helpx.adobe.com/express/create-and-edit-videos/change-file-formats/import-gif-limits.html\"\n        }}>{`the size criteria for animated GIF's`}</a>{`. In the event that it doesn't fit the size criteria, an error toast will be shown to the user.`}</li>\n      <li parentName=\"ul\">{`Since the Add-on SDK uses pointer event handlers to perform drag operations, you should ensure that you don't attach any pointer event handlers that prevent default or stop propagation. Adding those types of handlers will kill the built-in handlers and cause the events not to work.`}</li>\n      <li parentName=\"ul\">{`You should not attach `}<inlineCode parentName=\"li\">{`click`}</inlineCode>{` event listeners to drag-enabled elements in the capture phase, as the Add-on SDK attaches a `}<inlineCode parentName=\"li\">{`cancelClickEvent`}</inlineCode>{` handler to drag-enabled elements to ensure that the automatic click (pointer down + pointer up automatically fires a click event) doesn't fire. Adding other handlers to this same element will trigger them on drag & drop completion.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`TIP:`}</strong>{` Use Chrome devTools to check the handlers attached to the element and its ancestors to identify any that may be causing conflicts with drag and drop handlers.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"modal-dialogs\"\n    }}>{`Modal Dialogs`}</h2>\n    <p>{`When you need to pop up a dialog to show a certain message, such as an informational, warning, or error message, you can use a modal dialog. Below are some examples of the different types. Also, check out the SDK references for details on how to `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/addonsdk/addonsdk-app.md#showmodaldialog\"\n      }}>{`show`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/addonsdk/runtime-dialog.md#close\"\n      }}>{`programmatically close a dialog`}</a>{`, as well as the `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/samples.md#dialog-add-on\"\n      }}>{`dialog add-on sample`}</a>{` for more details.`}</p>\n    <h3 {...{\n      \"id\": \"simple-modal-dialog-example\"\n    }}>{`Simple Modal Dialog Example`}</h3>\n    <p>{`The following example shows how to display a simple confirmation dialog.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n \n// Wait for the SDK to be ready\nawait addOnUISdk.ready;\n\nasync function showConfirmDialog() {\n    try {\n        // Confirmation Dialog Example\n        let dialogOptions = {\n            variant: \"confirmation\",\n            title: \"Enable smart Filters\",\n            description: \"Smart filters are nondestructive and will preserve your original images.\",\n            buttonLabels: { primary: \"Enable\", cancel: \"Cancel\" },\n        };    \n        const result = await addOnUISdk.app.showModalDialog(dialogOptions);\n        console.log(\"Button type clicked \" + result.buttonType); \n    } catch (error) {\n        console.log(\"Error showing modal dialog:\", error);\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"input-modal-dialog-example\"\n    }}>{`Input Modal Dialog Example`}</h3>\n    <p>{`Below is an example of using an `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` dialog that accepts input you can retrieve:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n \n// Wait for the SDK to be ready\nawait addOnUISdk.ready;\n\nasync function showInputDialog() {\n    try {\n        // Input Dialog Example\n        let inputDialogOptions = {\n            variant: \"input\",\n            title: \"Please enter your key\",\n            description: \"Your API key\",\n            buttonLabels: { cancel: \"Cancel\" },           \n            field: {\n                label: \"API Key\",\n                placeholder: \"Enter API key\", \n                fieldType: \"text\",\n            },\n        }\n\n        const inputDialogResult = await addOnUISdk.app.showModalDialog(inputDialogOptions);\n        if (inputDialogResult.buttonType === \"primary\") {\n            console.log(\"Field value \" + inputDialogResult.fieldValue); // returns the input the user entered if they didn't cancel\n        }\n    } catch (error) {\n        console.log(\"Error showing modal dialog:\", error);\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"custom-dialog-example\"\n    }}>{`Custom Dialog Example`}</h3>\n    <p>{`This example shows how you can define custom content for your dialog in a separate source file (`}<inlineCode parentName=\"p\">{`dialog.html`}</inlineCode>{` in this case) and with a custom height and title.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n \n// Wait for the SDK to be ready\nawait addOnUISdk.ready;\n \nfunction useCustomDialogResult(data: unknown) {\n  // Use the dialog data\n}\n\n// Custom Dialog\nasync function showCustomDialog() {\n  try {\n    const dialogResult = await addOnUISdk.app.showModalDialog({\n        variant: \"custom\",\n        title: \"Custom Modal\",\n        src: \"dialog.html\", // use content from this html file\n        size: { width: 600, height: 400 }\n    });\n \n    // Use data received from the custom dialog\n    useCustomDialogResult(dialogResult.result);\n \n  } catch (error) {\n    console.log(\"Error showing modal dialog:\", error);\n  }\n}\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"success\" mdxType=\"InlineAlert\" />\n    <p>{`Check out the `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/addonsdk.md\"\n      }}>{`add-on SDK`}</a>{` for more specific details on using modal dialogs, including `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/addonsdk/runtime-dialog.md#close\"\n      }}>{`programmatically closing a dialog with an optional custom result`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","isMDXComponent"],"sourceRoot":""}