{"version":3,"file":"component---src-pages-guides-references-apis-dialogs-md-1b31cb3ccc8d6a97bef2.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,CAAC,EACKI,EAAYN,EAAc,aAC1BO,EAAcP,EAAc,eAC5BQ,EAAc,CAClBT,aAAAA,GAEIU,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGX,GAAKY,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOV,EAAAA,EAAAA,KAACI,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBN,EAAK,CAAEW,WAAYA,EAAYI,QAAQ,eAG5EZ,EAAAA,EAAAA,KAAA,MACE,GAAM,wBAAsB,yBAE9BA,EAAAA,EAAAA,KAAA,wFACAA,EAAAA,EAAAA,KAAA,oCAA8BA,EAAAA,EAAAA,KAAA,KAAGa,WAAW,IACxC,KAAQ,6BAA2B,0BACJ,aAAab,EAAAA,EAAAA,KAAA,KAAGa,WAAW,IAC1D,KAAQ,0BAAwB,iBACV,kJAAkJb,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,2BAAqC,oBACvOb,EAAAA,EAAAA,KAACC,EAAS,CAACa,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,aAAaJ,QAAQ,eAC3EZ,EAAAA,EAAAA,KAAA,MACE,GAAM,aAAW,cAEnBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eAAa,mlFAiK9Bb,EAAAA,EAAAA,KAAA,MACE,GAAM,WAAS,YAEjBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eAAa,ivBAwB9Bb,EAAAA,EAAAA,KAACE,EAAW,CAACY,MAAM,OAAOG,QAAQ,UAAUL,QAAQ,iBACpDZ,EAAAA,EAAAA,KAAA,wHAAkHA,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,iBAA2B,4BAA4Bb,EAAAA,EAAAA,KAAA,KAAGa,WAAW,IACzM,KAAQ,0BAAwB,gBACX,0BAG7B,CAEAP,EAAWY,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/references/apis/dialogs.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/express-add-ons-docs/express-add-ons-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"simple-modal-dialogs\"\n    }}>{`Simple Modal Dialogs`}</h1>\n    <p>{`Allows you to pop-up a modal with different variations depending on needs.`}</p>\n    <p>{`You can also check the `}<a parentName=\"p\" {...{\n        \"href\": \"../references/manifest.md\"\n      }}>{`manifest documentation`}</a>{` and the `}<a parentName=\"p\" {...{\n        \"href\": \"guides/develop/samples\"\n      }}>{`dialog-add-on`}</a>{` code sample for more details on this flag and see how it's used. Also, please report any issues or feedback you may have for this API to the `}<strong parentName=\"p\">{`#express-addons-support`}</strong>{` slack channel.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"interface\"\n    }}>{`Interface`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`interface Application {\n  /**\n   * Show modal dialog\n   */\n  showModalDialog(dialogOptions: DialogOptions): Promise<DialogResult>;\n}\n \ninterface DialogOptions {\n  /**\n   * Variant\n   */\n  variant: Variant;\n \n  /**\n   * Title\n   */\n  title: LocalizedString;\n \n  /**\n   * Description\n   */\n  description: LocalizedString;\n \n  /**\n   * Buttons\n   */\n  buttonLabels?: ButtonLabels;\n}\n \ninterface InputDialogOptions extends DialogOptions {\n  /**\n   * Variant\n   */\n  variant: Variant.input;\n \n  /**\n   * Input field\n   */\n  field: Field;\n}\n \nenum Variant {\n  export enum Variant {\n    /**\n     * Ask a user to confirm an action\n     */\n    confirmation = \"confirmation\",\n\n    /**\n     * Share information for user to acknowledge\n     */\n    information = \"information\",\n\n    /**\n     * Share information that a user needs to consider before proceeding\n     */\n    warning = \"warning\",\n\n    /**\n     * Tell a user that if they proceed with an action, it may impact their data in a negative way\n     */\n    destructive = \"destructive\",\n\n    /**\n     * Communicate critical issue that a user needs to resolve before proceeding\n     */\n    error = \"error\",\n\n    /**\n     * Ask a user to provide some inputs\n     */\n    input = \"input\"\n}\n \ninterface ButtonLabels {\n  /**\n   * Primary action label\n   * Default label is \"OK\".\n   */\n  primary?: LocalizedString;\n \n  /**\n   * Secondary action label\n   */\n  secondary?: LocalizedString;\n \n  /**\n   * Cancel action label\n   */\n  cancel?: LocalizedString;\n}\n \ninterface Field {\n  /**\n   * Label\n   */\n  label: LocalizedString;\n \n  /**\n   * Specifies a short hint that describes the expected value of the field\n   */\n  placeholder: LocalizedString;\n \n  /**\n   * Type of the field\n   */\n  fieldType: FieldType;\n}\n \nenum FieldType {\n  /**\n   * One-line text input field\n   */\n  text = \"text\"\n}\n \n/**\n * Placeholder for future localization support\n */\ntype LocalizedString = string;\n \ninterface DialogResult {\n  /**\n   * Clicked button\n   */\n  buttonType: ButtonType\n}\n \ninterface InputDialogResult extends DialogResult {\n  /**\n   * Field value\n   */\n  fieldValue: string;\n}\n\n/**\n * Button types for Simple Dialog\n */\nexport enum ButtonType {\n    /**\n     * Primary button pressed\n     */\n    primary = \"primary\",\n\n    /**\n     * Secondary button pressed\n     */\n    secondary = \"secondary\",\n\n    /**\n     * Cancel button pressed\n     */\n    cancel = \"cancel\",\n\n    /**\n     * Dialog closed via ESC or close(X) button\n     */\n    close = \"close\"\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n \n// Wait for the SDK to be ready\nawait AddOnSdk.ready;\n  \n// Get confirmation from the user to enable a feature\nasync function EnableSmartFilters() {\n  try {\n    const dialogResult = await AddOnSdk.app.showModalDialog({\n        variant: Variant.confirmation,\n        title: \"Enable smart Filters\",\n        description: \"Smart filters are nondestructive and will preserve your original images.\",\n        buttonLabels: { primary: \"Enable\", cancel: \"Cancel\" },\n      });\n \n    if (dialogResult.buttonType === ButtonType.primary) {\n      // Enable smart filters\n    }\n  } catch (error) {\n    console.log(\"Error showing modal dialog:\", error);\n  }\n}\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"success\" mdxType=\"InlineAlert\" />\n    <p>{`We have provided a sample that can be used as a reference for implementing the Dialog APIs. Please see the `}<strong parentName=\"p\">{`dialog-add-on`}</strong>{` sample provided in the `}<a parentName=\"p\" {...{\n        \"href\": \"guides/develop/samples\"\n      }}>{`code samples`}</a>{` for specific details.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","CodeBlock","InlineAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","_extends","mdxType","parentName","slots","repeat","languages","variant","isMDXComponent"],"sourceRoot":""}