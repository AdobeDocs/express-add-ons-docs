{"version":3,"file":"component---src-pages-guides-develop-how-to-use-color-md-4f81340bc7aa2eaf70ba.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/develop/how_to/use_color.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"use-color\"\n    }}>{`Use Color`}</h1>\n    <h2 {...{\n      \"id\": \"create-colors\"\n    }}>{`Create colors`}</h2>\n    <p>{`Colors in Adobe Express are created as instances of the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/interfaces/Color.md\"\n      }}><inlineCode parentName=\"a\">{`Color`}</inlineCode></a>{` class: objects with `}<inlineCode parentName=\"p\">{`red`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`green`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`blue`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`alpha`}</inlineCode>{` (optional) values in the range from 0 to 1. The `}<inlineCode parentName=\"p\">{`alpha`}</inlineCode>{` value represents the opacity of the color, with 0 being fully transparent and 1 fully opaque.`}</p>\n    <p>{`The entrypoint for creating colors is the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/ColorUtils.md\"\n      }}><inlineCode parentName=\"a\">{`colorUtils`}</inlineCode></a>{` class, imported from the `}<inlineCode parentName=\"p\">{`\"express-document-sdk\"`}</inlineCode>{`, so we're talking about `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/index.md\"\n      }}>{`Document APIs`}</a>{` here. Especially the static `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/ColorUtils.md#fromrgb\"\n      }}><inlineCode parentName=\"a\">{`fromRgb()`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/ColorUtils.md#fromhex\"\n      }}><inlineCode parentName=\"a\">{`fromHex()`}</inlineCode></a>{` methods.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, colorUtils } from \"express-document-sdk\";\n\n// Alpha is optional, defaults to 1\nconst red = colorUtils.fromRgb(1, 0, 0);\nconst green = colorUtils.fromHex(\"#00FF00\");\n\n// With alpha\nconst feldgrau = colorUtils.fromRgb(0.28, 0.32, 0.39, 0.5); // 50% opacity\nconst heliotrope = colorUtils.fromHex(\"#C768F780\"); // 50% opacity\n`}</code></pre>\n    <p>{`In case you need it, you can also convert a color to a HEX string using the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/ColorUtils.md#tohex\"\n      }}><inlineCode parentName=\"a\">{`toHex()`}</inlineCode></a>{` method. Please note that the alpha value is always included in the output string.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const red = colorUtils.fromRgb(1, 0, 0);\nconst redHex = colorUtils.toHex(red); // #FF0000FF\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"apply-colors\"\n    }}>{`Apply colors`}</h2>\n    <p>{`You can directly set the `}<inlineCode parentName=\"p\">{`color`}</inlineCode>{` property of a Text node via `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#applycharacterstyles\"\n      }}><inlineCode parentName=\"a\">{`applyCharacterStyles()`}</inlineCode></a>{`:`}</p>\n    <h3 {...{\n      \"id\": \"example-text-color\"\n    }}>{`Example: Text color`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, colorUtils } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\n\n// Apply character styles to the first three letters\ntextNode.fullContent.applyCharacterStyles(\n  { color: colorUtils.fromHex(\"#E1A141\") }, // ðŸ‘ˆ\n  { start: 0, length: 3 }\n);\n`}</code></pre>\n    <p>{`See the `}<a parentName=\"p\" {...{\n        \"href\": \"./use_text.md\"\n      }}>{`Use Text`}</a>{` page for more examples.`}</p>\n    <h3 {...{\n      \"id\": \"example-fill-and-stroke-colors\"\n    }}>{`Example: Fill and Stroke colors`}</h3>\n    <p>{`Colors are not directly applied, instead, to shapes; more generally, they are used to create `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/interfaces/Fill.md\"\n      }}><inlineCode parentName=\"a\">{`Fill`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/interfaces/Stroke.md\"\n      }}><inlineCode parentName=\"a\">{`Stroke`}</inlineCode></a>{` objects with the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/Editor.md#makecolorfill\"\n      }}><inlineCode parentName=\"a\">{`editor.makeColorFill()`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/Editor.md#makestroke\"\n      }}><inlineCode parentName=\"a\">{`editor.makeStroke()`}</inlineCode></a>{` methods, respectively, that you can then apply to `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/FillableNode.md\"\n      }}><inlineCode parentName=\"a\">{`Fillable`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/StrokableNode.md\"\n      }}><inlineCode parentName=\"a\">{`Strokable`}</inlineCode></a>{` nodes.`}</p>\n    <p>{`If you're confused, worry not! This is the wondrous word of object oriented programming. The following example should clarify things:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, colorUtils } from \"express-document-sdk\";\n\n// Create the shape\nconst ellipse = editor.createEllipse();\nellipse.width = 100;\nellipse.height = 50;\nellipse.translation = { x: 50, y: 50 };\n\n// Generate the needed colors\nconst innerColor = colorUtils.fromHex(\"#A38AF0\");\nconst outerColor = colorUtils.fromHex(\"#2ACfA9\");\n\n// Make the colorFill and the Stroke\nconst innerColorFill = editor.makeColorFill(innerColor);\nconst outerColorStroke = editor.makeStroke({\n  color: outerColor,\n  width: 20,\n});\n\n// ðŸ‘‡ Apply the fill and stroke\nellipse.fill = innerColorFill;\nellipse.stroke = outerColorStroke;\n\n// Add the shape to the document\neditor.context.insertionParent.children.append(ellipse);\n`}</code></pre>\n    <p>{`While the `}<inlineCode parentName=\"p\">{`fill`}</inlineCode>{` property is more straightforward to create, the `}<inlineCode parentName=\"p\">{`color`}</inlineCode>{` is just one of the possible properties of a `}<inlineCode parentName=\"p\">{`stroke`}</inlineCode>{`, as you can read in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/interfaces/SolidColorStroke.md\"\n      }}>{`SolidColorStroke`}</a>{` interface reference.`}</p>\n    <p>{`Simplifying the example above:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// ...\nellipse.fill = editor.makeColorFill(colorUtils.fromHex(\"#A38AF0\"));\nellipse.stroke = editor.makeStroke({\n  color: colorUtils.fromHex(\"#2ACfA9\"),\n  width: 20,\n});\n// ...\n`}</code></pre>\n    <InlineAlert slots=\"header, text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`Naming conventions`}</p>\n    <p>{`Please note that Adobe Express uses the terms `}<strong parentName=\"p\">{`make`}</strong>{` and `}<strong parentName=\"p\">{`create`}</strong>{` to distinguish between plain objects and live document objects. You `}<inlineCode parentName=\"p\">{`makeColorFill()`}</inlineCode>{`, but `}<inlineCode parentName=\"p\">{`createEllipse()`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","isMDXComponent"],"sourceRoot":""}