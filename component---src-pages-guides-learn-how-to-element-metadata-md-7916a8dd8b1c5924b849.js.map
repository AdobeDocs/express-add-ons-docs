{"version":3,"file":"component---src-pages-guides-learn-how-to-element-metadata-md-7916a8dd8b1c5924b849.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/learn/how_to/element_metadata.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"element-metadata\"\n    }}>{`Element Metadata`}</h1>\n    <h2 {...{\n      \"id\": \"get-and-set-element-metadata\"\n    }}>{`Get and Set Element Metadata`}</h2>\n    <p>{`Add-ons can store `}<strong parentName=\"p\">{`private metadata`}</strong>{` (custom data accessible only to the add-on that set it) on any node within the Express document. Currently, each node can hold up to `}<strong parentName=\"p\">{`3â€¯KB`}</strong>{` of data, organized as key/value pairs where both keys and values are Strings. Additionally, there is a limit of `}<strong parentName=\"p\">{`20 key/value pairs`}</strong>{` per node.`}</p>\n    <p>{`All nodes that inherit from the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/BaseNode.md\"\n      }}><inlineCode parentName=\"a\">{`BaseNode`}</inlineCode></a>{` class have a `}<inlineCode parentName=\"p\">{`addOnData`}</inlineCode>{` property that can be used to store and retrieve metadata. It is an instance of the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/AddOnData.md\"\n      }}><inlineCode parentName=\"a\">{`AddOnData`}</inlineCode></a>{` class, which provides methods to perform operations such as `}<inlineCode parentName=\"p\">{`getItem()`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`setItem()`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`removeItem()`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`clear()`}</inlineCode>{`.`}</p>\n    <p>{`With the `}<inlineCode parentName=\"p\">{`remainingQuota`}</inlineCode>{` property, you can check how much space is left, both in terms of `}<inlineCode parentName=\"p\">{`sizeInBytes`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`numKeys`}</inlineCode>{`, while `}<inlineCode parentName=\"p\">{`keys()`}</inlineCode>{` returns an array of the keys in use.`}</p>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`While Document and Page metadata operate from the `}<inlineCode parentName=\"p\">{`addOnUISdk.app.document`}</inlineCode>{` object and belong to the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/index.md\"\n      }}>{`Add-on UI SDK`}</a>{`, Element metadata are part of the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/index.md\"\n      }}>{`Document Sandbox`}</a>{` and are accessed through the `}<inlineCode parentName=\"p\">{`node.addOnData`}</inlineCode>{` property.`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { editor } from \"express-document-sdk\";\n\n// Create some dummy node\nconst text = editor.createText(\"Hello, World!\");\n\n// Store some metadata as key/value pairs\ntext.addOnData.setItem(\"originalText\", \"Hello, World!\");\ntext.addOnData.setItem(\"date\", new Date().toISOString());\n\n// Retrieve the metadata\nconsole.log(\"Original text: \", text.addOnData.getItem(\"originalText\"));\n\n// Check the remaining quota\nconsole.log(\"Remaining quota: \", text.addOnData.remainingQuota);\n// {\n//   \"sizeInBytes\": 3062,\n//   \"numKeys\": 19\n// }\n\n// Check the keys in use\nconsole.log(\"Keys in use: \", text.addOnData.keys());\n// [\"originalText\", \"date\"]\n\n// Remove the metadata\ntext.addOnData.removeItem(\"originalText\");\n\n// clear all metadata\ntext.addOnData.clear();\n`}</code></pre>\n    <p>{`Please note that the `}<inlineCode parentName=\"p\">{`addOnData`}</inlineCode>{` property is iterable with `}<inlineCode parentName=\"p\">{`for...of`}</inlineCode>{` loops, so you can use it to iterate over the key/value pairs; each pair is an array with the key as the first element and the value as the second.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// iterate over key/value pairs\nfor (let pair of text.addOnData) {\n  console.log(pair);\n  // ['originalText', 'Hello, World!']\n  // ['date', '2025-01-20T11:06:19.051Z']\n}\n`}</code></pre>\n    <p>{`Alternatively, you can use the `}<inlineCode parentName=\"p\">{`keys()`}</inlineCode>{` method to get an array of all keys and then iterate over them.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Iterate over all keys\ntext.addOnData.keys().forEach((key) => {\n  console.log(\\`Key: \\${key}, Value: \\${text.addOnData.getItem(key)}\\`);\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use Cases`}</h2>\n    <p>{`Per-element metadata can be useful to keep track, for example, of the original properties a node has been created with, the history of the subsequent changes made to it, or to tag some nodes in a way that is meaningful for the add-on (e.g., it's supposed to be skipped when a certain routine is launched). It can also be used to store temporary data that is not meant to be persisted.`}</p>\n    <p>{`Please, refer to the SDK Reference section for `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/AddOnData.md\"\n      }}><inlineCode parentName=\"a\">{`AddOnData`}</inlineCode></a>{` for a complete list of methods, and the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/express-add-on-samples/tree/main/document-sandbox-samples/per-element-metadata\"\n      }}><inlineCode parentName=\"a\">{`per-element-metadata`}</inlineCode></a>{` sample add-on for a demonstrative implementation.`}</p>\n    <h2 {...{\n      \"id\": \"faqs\"\n    }}>{`FAQs`}</h2>\n    <h4 {...{\n      \"id\": \"q-how-do-i-store-metadata-on-an-element\"\n    }}>{`Q: How do I store metadata on an element?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`node.addOnData.setItem(\"key\", \"value\")`}</inlineCode>{` to store key/value pairs on any node.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-retrieve-stored-metadata\"\n    }}>{`Q: How do I retrieve stored metadata?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`node.addOnData.getItem(\"key\")`}</inlineCode>{` to retrieve the value for a specific key.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-are-the-storage-limits\"\n    }}>{`Q: What are the storage limits?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Each node can store up to 3 KB of data with a maximum of 20 key/value pairs.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-check-remaining-storage-space\"\n    }}>{`Q: How do I check remaining storage space?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`node.addOnData.remainingQuota`}</inlineCode>{` to get remaining bytes and key count.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-remove-metadata\"\n    }}>{`Q: How do I remove metadata?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`removeItem(\"key\")`}</inlineCode>{` for specific keys or `}<inlineCode parentName=\"p\">{`clear()`}</inlineCode>{` to remove all metadata.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-iterate-over-all-metadata\"\n    }}>{`Q: How do I iterate over all metadata?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`for...of`}</inlineCode>{` loops on `}<inlineCode parentName=\"p\">{`addOnData`}</inlineCode>{` or iterate over `}<inlineCode parentName=\"p\">{`keys()`}</inlineCode>{` array with `}<inlineCode parentName=\"p\">{`forEach()`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"q-can-other-add-ons-access-my-metadata\"\n    }}>{`Q: Can other add-ons access my metadata?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` No, metadata is private and only accessible to the add-on that set it.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-types-can-i-store\"\n    }}>{`Q: What types can I store?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Only strings are supported for both keys and values.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","isMDXComponent"],"sourceRoot":""}