{"version":3,"file":"component---src-pages-guides-learn-how-to-element-metadata-md-0e624ca1fa63db5c43e5.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/learn/how_to/element_metadata.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"element-metadata\"\n    }}>{`Element Metadata`}</h1>\n    <p>{`Store and retrieve custom metadata on document elements.`}</p>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`Add-ons can store `}<strong parentName=\"p\">{`private metadata`}</strong>{` (custom data accessible only to the add-on that set it) on elements within the Express document. There are two main approaches for working with element metadata:`}</p>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Runtime Metadata`}</strong>{`: Set and modify metadata on existing elements using the Document Sandbox APIs`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Import-Time Metadata`}</strong>{`: Attach metadata to media assets during import using the Add-on UI SDK`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"runtime-element-metadata\"\n    }}>{`Runtime Element Metadata`}</h2>\n    <h3 {...{\n      \"id\": \"get-and-set-element-metadata\"\n    }}>{`Get and Set Element Metadata`}</h3>\n    <p>{`Add-ons can store metadata on any node within the Express document. Currently, each node can hold up to `}<strong parentName=\"p\">{`3 KB`}</strong>{` of data, organized as key/value pairs where both keys and values are Strings. Additionally, there is a limit of `}<strong parentName=\"p\">{`20 key/value pairs`}</strong>{` per node.`}</p>\n    <p>{`All nodes that inherit from the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/BaseNode.md\"\n      }}><inlineCode parentName=\"a\">{`BaseNode`}</inlineCode></a>{` class have a `}<inlineCode parentName=\"p\">{`addOnData`}</inlineCode>{` property that can be used to store and retrieve metadata. It is an instance of the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/AddOnData.md\"\n      }}><inlineCode parentName=\"a\">{`AddOnData`}</inlineCode></a>{` class, which provides methods to perform operations such as `}<inlineCode parentName=\"p\">{`getItem()`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`setItem()`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`removeItem()`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`clear()`}</inlineCode>{`.`}</p>\n    <p>{`With the `}<inlineCode parentName=\"p\">{`remainingQuota`}</inlineCode>{` property, you can check how much space is left, both in terms of `}<inlineCode parentName=\"p\">{`sizeInBytes`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`numKeys`}</inlineCode>{`, while `}<inlineCode parentName=\"p\">{`keys()`}</inlineCode>{` returns an array of the keys in use.`}</p>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`While Document and Page metadata operate from the `}<inlineCode parentName=\"p\">{`addOnUISdk.app.document`}</inlineCode>{` object and belong to the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/index.md\"\n      }}>{`Add-on UI SDK`}</a>{`, Element metadata are part of the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/index.md\"\n      }}>{`Document Sandbox`}</a>{` and are accessed through the `}<inlineCode parentName=\"p\">{`node.addOnData`}</inlineCode>{` property.`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { editor } from \"express-document-sdk\";\n\n// Create some dummy node\nconst text = editor.createText(\"Hello, World!\");\n\n// Store some metadata as key/value pairs\ntext.addOnData.setItem(\"originalText\", \"Hello, World!\");\ntext.addOnData.setItem(\"date\", new Date().toISOString());\n\n// Retrieve the metadata\nconsole.log(\"Original text: \", text.addOnData.getItem(\"originalText\"));\n\n// Check the remaining quota\nconsole.log(\"Remaining quota: \", text.addOnData.remainingQuota);\n// {\n//   \"sizeInBytes\": 3062,\n//   \"numKeys\": 19\n// }\n\n// Check the keys in use\nconsole.log(\"Keys in use: \", text.addOnData.keys());\n// [\"originalText\", \"date\"]\n\n// Remove the metadata\ntext.addOnData.removeItem(\"originalText\");\n\n// clear all metadata\ntext.addOnData.clear();\n`}</code></pre>\n    <p>{`Please note that the `}<inlineCode parentName=\"p\">{`addOnData`}</inlineCode>{` property is iterable with `}<inlineCode parentName=\"p\">{`for...of`}</inlineCode>{` loops, so you can use it to iterate over the key/value pairs; each pair is an array with the key as the first element and the value as the second.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// iterate over key/value pairs\nfor (let pair of text.addOnData) {\n  console.log(pair);\n  // ['originalText', 'Hello, World!']\n  // ['date', '2025-01-20T11:06:19.051Z']\n}\n`}</code></pre>\n    <p>{`Alternatively, you can use the `}<inlineCode parentName=\"p\">{`keys()`}</inlineCode>{` method to get an array of all keys and then iterate over them.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Iterate over all keys\ntext.addOnData.keys().forEach((key) => {\n  console.log(\\`Key: \\${key}, Value: \\${text.addOnData.getItem(key)}\\`);\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"import-time-metadata-for-media-assets-add-on-ui-sdk\"\n    }}>{`Import-Time Metadata for Media Assets (Add-on UI SDK)`}</h2>\n    <p>{`When importing media assets (images, videos, animated images) using the Add-on UI SDK, you can attach metadata using the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#importaddondata\"\n      }}><inlineCode parentName=\"a\">{`ImportAddOnData`}</inlineCode></a>{` parameter. This provides two distinct types of metadata storage:`}</p>\n    <h3 {...{\n      \"id\": \"container-vs-media-metadata\"\n    }}>{`Container vs. Media Metadata`}</h3>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`nodeAddOnData`}</inlineCode></strong>{` - Container-Level Metadata:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Persists with the individual asset container`}</li>\n      <li parentName=\"ul\">{`Remains attached even when the asset content is replaced`}</li>\n      <li parentName=\"ul\">{`Each container instance has independent metadata`}</li>\n      <li parentName=\"ul\">{`Accessed via `}<a parentName=\"li\" {...{\n          \"href\": \"../../../references/document-sandbox/document-apis/classes/MediaContainerNode.md#addondata\"\n        }}><inlineCode parentName=\"a\">{`MediaContainerNode.addOnData`}</inlineCode></a>{` in the Document Sandbox`}</li>\n    </ul>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`mediaAddOnData`}</inlineCode></strong>{` - Content-Level Metadata:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Tied to the actual asset content`}</li>\n      <li parentName=\"ul\">{`Shared across all copies of the same asset in the document`}</li>\n      <li parentName=\"ul\">{`Reset if the asset content is replaced with different media`}</li>\n      <li parentName=\"ul\">{`Accessed via `}<a parentName=\"li\" {...{\n          \"href\": \"../../../references/document-sandbox/document-apis/classes/MediaRectangleNode.md#mediaaddondata\"\n        }}><inlineCode parentName=\"a\">{`MediaRectangleNode.mediaAddOnData`}</inlineCode></a>{` in the Document Sandbox`}</li>\n    </ul>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`Import-time metadata is `}<strong parentName=\"p\">{`not supported`}</strong>{` for PSD/AI assets. An error will be thrown if you attempt to use `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#importaddondata\"\n      }}><inlineCode parentName=\"a\">{`ImportAddOnData`}</inlineCode></a>{` with these file types.`}</p>\n    <h3 {...{\n      \"id\": \"example-set-metadata-with-add-on-ui-sdk-importaddondata\"\n    }}>{`Example: Set Metadata with Add-on UI SDK `}<inlineCode parentName=\"h3\">{`ImportAddOnData`}</inlineCode></h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"4\" languages=\"JavaScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"add-image\"\n    }}>{`Add Image`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Store metadata when importing\n// ui/index.js (iframe runtime)\nimport addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(async () => {\n  try {\n    // Create or fetch your image blob\n    const imageBlob = await fetch(\"./sample-image.png\").then(r => r.blob());\n    \n    // Import image with ImportAddOnData\n    await addOnUISdk.app.document.addImage(\n      imageBlob,\n      // Optional MediaAttributes\n      {\n        title: \"Sample Test Image\",\n        author: \"Add-on Developer\"\n      },\n      {\n        // Container-level metadata (persists with container)\n        nodeAddOnData: {\n          \"imageId\": \"test_001\",\n          \"category\": \"demo\",\n          \"importDate\": new Date().toISOString(),\n          \"source\": \"addon-tester\"\n        },\n        // Content-level metadata (tied to actual image content)\n        mediaAddOnData: {\n          \"resolution\": \"200x150\",\n          \"format\": \"PNG\",\n          \"source\": \"generated_canvas\",\n          \"color\": \"green\"\n        }\n      }\n    );\n    \n    console.log(\"✅ Image imported successfully with metadata!\");\n    \n  } catch (error) {\n    console.error(\"❌ Failed to import image:\", error);\n  }\n});\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"add-video\"\n    }}>{`Add Video`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// ui/index.js (iframe runtime)\n// Import a video with container metadata only\nawait addOnUISdk.app.document.addVideo(videoBlob, {\n  title: \"Product Demo\"\n}, {\n  nodeAddOnData: {\n    \"video-category\": \"product-demo\",\n    \"import-timestamp\": new Date().toISOString()\n  },\n  mediaAddOnData: {\n    \"resolution\": \"1920x1080\",\n    \"format\": \"MP4\",\n    \"duration\": \"596s\",\n    \"testFlag\": \"remote_video_test\"\n  }\n});\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"add-animated-image\"\n    }}>{`Add Animated Image`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// ui/index.js (iframe runtime)\n// Import an animated image with media metadata only\nawait addOnUISdk.app.document.addAnimatedImage(gifBlob, {\n  title: \"Animated Logo\"\n}, {\n  mediaAddOnData: {\n    \"animation-type\": \"logo\",\n    \"frame-count\": \"24\",\n    \"duration\": \"2000ms\"\n  }\n});\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p><a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#importaddondata\"\n      }}><inlineCode parentName=\"a\">{`ImportAddOnData`}</inlineCode></a>{` is also supported in drag-and-drop operations via the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/addonsdk-app.md#enabledragtodocument\"\n      }}><inlineCode parentName=\"a\">{`enableDragToDocument`}</inlineCode></a>{` method. See the `}<a parentName=\"p\" {...{\n        \"href\": \"drag_and_drop.md\"\n      }}>{`Drag and Drop guide`}</a>{` for more details.`}</p>\n    <h3 {...{\n      \"id\": \"example-retrieve-imported-metadata-in-document-sandbox\"\n    }}>{`Example: Retrieve Imported Metadata in Document Sandbox`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"all-media-metadata\"\n    }}>{`All Media Metadata`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js (document sandbox)\nimport { editor } from \"express-document-sdk\";\n\nfunction retrieveAllMediaMetadata() {\n  console.log(\"Starting metadata retrieval...\");\n  \n  const documentRoot = editor.documentRoot;\n  let mediaContainerCount = 0;\n  \n  // Traverse document structure to find media nodes\n  for (const page of documentRoot.pages) {\n    console.log(\\`📄 Checking page: \\${page.id}\\`);\n    \n    for (const artboard of page.artboards) {\n      console.log(\\`🎨 Checking artboard: \\${artboard.id}\\`);\n      \n      // Use recursive traversal to find all MediaContainer nodes\n      traverseNodeForMedia(artboard);\n    }\n  }\n  \n  function traverseNodeForMedia(node) {\n    // Check if current node is a MediaContainer\n    if (node.type === 'MediaContainer') {\n      mediaContainerCount++;\n      console.log(\\`\\\\n📦 Found MediaContainer #\\${mediaContainerCount}: \\${node.id}\\`);\n      \n      try {\n        // Retrieve container metadata (nodeAddOnData)\n        const containerMetadata = {};\n        const containerKeys = node.addOnData.keys();\n        \n        for (const key of containerKeys) {\n          containerMetadata[key] = node.addOnData.getItem(key);\n        }\n        \n        if (containerKeys.length > 0) {\n          console.log('📝 Container metadata (nodeAddOnData):', containerMetadata);\n        } else {\n          console.log('📝 No container metadata found');\n        }\n        \n        // Access the media rectangle directly via the mediaRectangle property\n        const mediaRectangle = node.mediaRectangle;\n        \n        if (mediaRectangle) {\n          console.log(\\`🖼️  Media rectangle type: \\${mediaRectangle.type}\\`);\n          \n          try {\n            // Retrieve media-specific metadata (mediaAddOnData)\n            const mediaMetadata = {};\n            const mediaKeys = mediaRectangle.mediaAddOnData.keys();\n            \n            for (const key of mediaKeys) {\n              mediaMetadata[key] = mediaRectangle.mediaAddOnData.getItem(key);\n            }\n            \n            if (mediaKeys.length > 0) {\n              console.log('🎯 Media metadata (mediaAddOnData):', mediaMetadata);\n            } else {\n              console.log('🎯 No media metadata found');\n            }\n            \n          } catch (error) {\n            // Handle PSD/AI assets or other errors\n            console.log('⚠️  Cannot access mediaAddOnData (likely PSD/AI asset):', error.message);\n          }\n        } else {\n          console.log('⚠️  No media rectangle found');\n        }\n        \n      } catch (error) {\n        console.error('❌ Error accessing container metadata:', error);\n      }\n    }\n    \n    // Recursively traverse all children\n    // MediaContainers can be nested inside groups or other containers\n    if (node.allChildren) {\n      for (const child of node.allChildren) {\n        traverseNodeForMedia(child);\n      }\n    }\n  }\n  \n  console.log(\\`\\\\n✅ Metadata retrieval complete! Found \\${mediaContainerCount} MediaContainer(s)\\`);\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"known-mediacontainer\"\n    }}>{`Known MediaContainer`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js (document sandbox)\n// Simple access example for a known MediaContainer\nconst mediaContainer = /* get MediaContainerNode from document */;\n\n// Access container-level metadata\nconst containerMetadata = mediaContainer.addOnData;\nconsole.log(\"Image ID:\", containerMetadata.getItem(\"imageId\"));\nconsole.log(\"Category:\", containerMetadata.getItem(\"category\"));\n\n// Access media-level metadata\nconst mediaRectangle = mediaContainer.mediaRectangle;\nconst mediaMetadata = mediaRectangle.mediaAddOnData;\nconsole.log(\"Resolution:\", mediaMetadata.getItem(\"resolution\"));\nconsole.log(\"Format:\", mediaMetadata.getItem(\"format\"));\n\n// Check all available keys\nconsole.log(\"Container keys:\", containerMetadata.keys());\nconsole.log(\"Media keys:\", mediaMetadata.keys());\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"when-to-use-each-type\"\n    }}>{`When to Use Each Type`}</h3>\n    <p><strong parentName=\"p\">{`Use `}<inlineCode parentName=\"strong\">{`nodeAddOnData`}</inlineCode>{` when:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Tracking add-on-specific UI state or settings for each container`}</li>\n      <li parentName=\"ul\">{`Storing metadata that should persist even if the user replaces the media content`}</li>\n      <li parentName=\"ul\">{`Each instance of the media should have independent metadata`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Use `}<inlineCode parentName=\"strong\">{`mediaAddOnData`}</inlineCode>{` when:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Storing information about the media content itself (source, licensing, etc.)`}</li>\n      <li parentName=\"ul\">{`The metadata should be shared across all instances of the same media`}</li>\n      <li parentName=\"ul\">{`The metadata is only relevant to the specific media content`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use Cases`}</h2>\n    <p>{`Element metadata can be useful in various scenarios:`}</p>\n    <h3 {...{\n      \"id\": \"runtime-metadata-use-cases\"\n    }}>{`Runtime Metadata Use Cases`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Track original properties a node was created with`}</li>\n      <li parentName=\"ul\">{`Store history of subsequent changes made to elements`}</li>\n      <li parentName=\"ul\">{`Tag nodes in ways meaningful for the add-on (e.g., skip certain operations)`}</li>\n      <li parentName=\"ul\">{`Store temporary data that doesn't need to be persisted`}</li>\n      <li parentName=\"ul\">{`Maintain add-on-specific UI state for elements`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"import-time-metadata-use-cases\"\n    }}>{`Import-Time Metadata Use Cases`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Asset Attribution`}</strong>{`: Store source URLs, author information, and licensing details`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Content Management`}</strong>{`: Track asset IDs, categories, and organizational metadata`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Workflow Context`}</strong>{`: Record placement context, import timestamps, and processing flags`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Asset Relationships`}</strong>{`: Maintain connections between related media assets`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Quality Assurance`}</strong>{`: Store validation flags, approval status, and review notes`}</li>\n    </ul>\n    <p>{`Please refer to the SDK Reference section for `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/AddOnData.md\"\n      }}><inlineCode parentName=\"a\">{`AddOnData`}</inlineCode></a>{` for a complete list of methods, and the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/express-add-on-samples/tree/main/document-sandbox-samples/per-element-metadata\"\n      }}><inlineCode parentName=\"a\">{`per-element-metadata`}</inlineCode></a>{` sample add-on for a demonstrative implementation.`}</p>\n    <h2 {...{\n      \"id\": \"faqs\"\n    }}>{`FAQs`}</h2>\n    <h4 {...{\n      \"id\": \"q-how-do-i-store-metadata-on-an-element\"\n    }}>{`Q: How do I store metadata on an element?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`node.addOnData.setItem(\"key\", \"value\")`}</inlineCode>{` to store key/value pairs on any node.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-retrieve-stored-metadata\"\n    }}>{`Q: How do I retrieve stored metadata?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`node.addOnData.getItem(\"key\")`}</inlineCode>{` to retrieve the value for a specific key.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-are-the-storage-limits\"\n    }}>{`Q: What are the storage limits?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Each node can store up to 3 KB of data with a maximum of 20 key/value pairs.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-check-remaining-storage-space\"\n    }}>{`Q: How do I check remaining storage space?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`node.addOnData.remainingQuota`}</inlineCode>{` to get remaining bytes and key count.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-remove-metadata\"\n    }}>{`Q: How do I remove metadata?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`removeItem(\"key\")`}</inlineCode>{` for specific keys or `}<inlineCode parentName=\"p\">{`clear()`}</inlineCode>{` to remove all metadata.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-iterate-over-all-metadata\"\n    }}>{`Q: How do I iterate over all metadata?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`for...of`}</inlineCode>{` loops on `}<inlineCode parentName=\"p\">{`addOnData`}</inlineCode>{` or iterate over `}<inlineCode parentName=\"p\">{`keys()`}</inlineCode>{` array with `}<inlineCode parentName=\"p\">{`forEach()`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"q-can-other-add-ons-access-my-metadata\"\n    }}>{`Q: Can other add-ons access my metadata?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` No, metadata is private and only accessible to the add-on that set it.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-types-can-i-store\"\n    }}>{`Q: What types can I store?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Only strings are supported for both keys and values.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-add-metadata-when-importing-media\"\n    }}>{`Q: How do I add metadata when importing media?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#importaddondata\"\n      }}><inlineCode parentName=\"a\">{`ImportAddOnData`}</inlineCode></a>{` parameter in media import methods like `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#addimage\"\n      }}><inlineCode parentName=\"a\">{`addImage()`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#addvideo\"\n      }}><inlineCode parentName=\"a\">{`addVideo()`}</inlineCode></a>{`, and `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#addanimatedimage\"\n      }}><inlineCode parentName=\"a\">{`addAnimatedImage()`}</inlineCode></a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"q-whats-the-difference-between-nodeaddondata-and-mediaaddondata\"\n    }}>{`Q: What's the difference between nodeAddOnData and mediaAddOnData?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` `}<inlineCode parentName=\"p\">{`nodeAddOnData`}</inlineCode>{` persists with the container even when media is replaced; `}<inlineCode parentName=\"p\">{`mediaAddOnData`}</inlineCode>{` is tied to the media content and shared across copies.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-access-media-specific-metadata\"\n    }}>{`Q: How do I access media-specific metadata?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/MediaRectangleNode.md#mediaaddondata\"\n      }}><inlineCode parentName=\"a\">{`mediaRectangleNode.mediaAddOnData`}</inlineCode></a>{` to access metadata tied to the media content itself.`}</p>\n    <h4 {...{\n      \"id\": \"q-can-i-use-importaddondata-with-all-media-types\"\n    }}>{`Q: Can I use ImportAddOnData with all media types?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` No, import-time metadata is not supported for PSD/AI assets. An error will be thrown if you attempt to use `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#importaddondata\"\n      }}><inlineCode parentName=\"a\">{`ImportAddOnData`}</inlineCode></a>{` with these file types.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-happens-to-mediaaddondata-when-i-copy-a-media-element\"\n    }}>{`Q: What happens to mediaAddOnData when I copy a media element?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` All copies of the same media asset share the same `}<inlineCode parentName=\"p\">{`mediaAddOnData`}</inlineCode>{`. Changes to one copy affect all copies.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-happens-to-nodeaddondata-when-i-replace-media-content\"\n    }}>{`Q: What happens to nodeAddOnData when I replace media content?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` `}<inlineCode parentName=\"p\">{`nodeAddOnData`}</inlineCode>{` persists with the container even when the media content is replaced, while `}<inlineCode parentName=\"p\">{`mediaAddOnData`}</inlineCode>{` is reset.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","repeat","languages","isMDXComponent"],"sourceRoot":""}