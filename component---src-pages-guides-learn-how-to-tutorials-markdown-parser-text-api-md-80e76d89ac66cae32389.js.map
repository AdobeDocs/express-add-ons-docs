{"version":3,"file":"component---src-pages-guides-learn-how-to-tutorials-markdown-parser-text-api-md-80e76d89ac66cae32389.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/learn/how_to/tutorials/markdown-parser-text-api.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"create-a-markdown-parser-add-on-with-the-text-api\"\n    }}>{`Create a Markdown Parser Add-on with the Text API`}</h1>\n    <p>{`Learn how to build from scratch an Adobe Express add-on capable of parsing Markdown files and converting them into rich text directly within an Adobe Express document.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/express-add-ons-docs/assets/ae6178b48fc8bf6c593bf5112497991a/markdown--add-on.gif\",\n        \"alt\": \"Markdown Parser complete add-on\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <p>{`Welcome to this hands-on tutorial where we'll build a complete Markdown Parser add-on. It will provide a way for your users to import Markdown documents and see them instantly transformed into styled text elements inside Adobe Express, respecting formatting like headings, bold, italics, and lists.`}</p>\n    <InlineAlert variant=\"info\" slots=\"header, text1\" mdxType=\"InlineAlert\" />\n    <p>{`What's Markdown?`}</p>\n    <p>{`Markdown is a popular lightweight markup language, widely used for formatting textual content quickly and intuitively.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`# Markdown sample – heading\n\nFor example, this is **bold**, _italic_ and even \\`monospace\\` text.\nIt can do much more!\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"what-youll-learn\"\n    }}>{`What you'll learn`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Creating an interactive `}<strong parentName=\"li\">{`drag-and-drop user interface`}</strong>{` with `}<strong parentName=\"li\">{`Spectrum Web Components`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`Integrating `}<strong parentName=\"li\">{`file upload`}</strong>{` and parsing mechanisms.`}</li>\n      <li parentName=\"ul\">{`The power of the `}<strong parentName=\"li\">{`Text API`}</strong>{`.`}</li>\n      <li parentName=\"ul\">{`Applying `}<strong parentName=\"li\">{`fonts`}</strong>{` using the Document API.`}</li>\n      <li parentName=\"ul\">{`Advanced `}<strong parentName=\"li\">{`character styling`}</strong>{`: font size and weight.`}</li>\n      <li parentName=\"ul\">{`Advanced `}<strong parentName=\"li\">{`paragraph styling`}</strong>{`: alignment and list styles.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"what-youll-build\"\n    }}>{`What you'll build`}</h3>\n    <p>{`The add-on will feature a drag-and-drop area for uploading Markdown files and a button to parse the content. It'll read and interpret the Markdown file, and use the Text API to create and insert a Text node with the appropriate Character and Paragraph styles.`}</p>\n    <h3 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h3>\n    <p>{`Before diving into the tutorial, ensure you have:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`An `}<strong parentName=\"li\">{`Adobe account`}</strong>{` (use your existing Adobe ID or `}<a parentName=\"li\" {...{\n          \"href\": \"https://account.adobe.com/\"\n        }}>{`create one for free`}</a>{`).`}</li>\n      <li parentName=\"ul\">{`Basic knowledge of `}<strong parentName=\"li\">{`HTML, CSS, and JavaScript`}</strong>{`.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Node.js`}</strong>{` installed (version 18 or newer is recommended).`}</li>\n      <li parentName=\"ul\">{`A `}<strong parentName=\"li\">{`text editor or IDE`}</strong>{` of your choice.`}</li>\n      <li parentName=\"ul\">{`Experience with Adobe Express add-ons. If you're new or need a refresher, review the `}<a parentName=\"li\" {...{\n          \"href\": \"https://developer.adobe.com/express/add-ons/docs/guides/getting-started/quickstart/\"\n        }}>{`Quickstart Guide`}</a>{`.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"difficulty\"\n    }}>{`Difficulty`}</h3>\n    <p>{`This tutorial is designed for intermediate developers who are comfortable with JavaScript and the Adobe Express add-on SDK.`}</p>\n    <h2 {...{\n      \"id\": \"1-project-setup\"\n    }}>{`1. Project Setup`}</h2>\n    <p>{`We'll start by setting up the foundational structure for our add-on.`}</p>\n    <h3 {...{\n      \"id\": \"11-environment-setup\"\n    }}>{`1.1 Environment Setup`}</h3>\n    <p>{`First, let's get your development environment ready. Download the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/express-add-on-samples/tree/main/document-sandbox-samples/express-markdown-parser-addon/express-markdown-parser-addon-start\"\n      }}>{`Markdown Parser Add-on`}</a>{` from GitHub.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`express-markdown-parser-addon-start`}</inlineCode>{` folder follows a simple and organized structure:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-txt\"\n      }}>{`.\n├── package.json             📦 Project configuration\n├── webpack.config.js        🔧 Build configuration\n├── src\n│   ├── index.html           🌐 UI container\n│   ├── ui\n│   │   └── index.js         💻 UI logic\n│   └── sandbox\n│       └── code.js          📝 Document Sandbox API logic\n`}</code></pre>\n    <p>{`We'll add a few files and packages along the way, but this is the starting point, which comes from a slightly adapted `}<a parentName=\"p\" {...{\n        \"href\": \"../../../getting_started/local_development/dev_tooling.md#templates\"\n      }}>{`CLI template`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"12-initial-code\"\n    }}>{`1.2 Initial Code`}</h3>\n    <p>{`The sample starts with a simple \"Hello World\" setup to ensure the communication bridge between the UI and the document sandbox is working.`}</p>\n    <p>{`Here is a breakdown of this initial setup:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`index.html`}</inlineCode>{` file provides the `}<strong parentName=\"li\">{`basic UI`}</strong>{`, with a single button wrapped in `}<inlineCode parentName=\"li\">{`<sp-theme>`}</inlineCode>{` to match the Adobe Express style.`}</li>\n      <li parentName=\"ul\">{`In `}<inlineCode parentName=\"li\">{`ui/index.js`}</inlineCode>{`, the script waits for the Add-on SDK to be ready (`}<inlineCode parentName=\"li\">{`addOnUISdk.ready`}</inlineCode>{`).`}</li>\n      <li parentName=\"ul\">{`It then creates a `}<inlineCode parentName=\"li\">{`sandboxProxy`}</inlineCode>{` by calling `}<inlineCode parentName=\"li\">{`runtime.apiProxy(\"documentSandbox\")`}</inlineCode>{`. This proxy is the communication link to the document sandbox.`}</li>\n      <li parentName=\"ul\">{`An event listener on the button uses this proxy to call the `}<inlineCode parentName=\"li\">{`sayHello`}</inlineCode>{` function.`}</li>\n      <li parentName=\"ul\">{`In `}<inlineCode parentName=\"li\">{`sandbox/code.js`}</inlineCode>{`, the `}<inlineCode parentName=\"li\">{`runtime.exposeApi()`}</inlineCode>{` method makes the `}<inlineCode parentName=\"li\">{`sayHello`}</inlineCode>{` function available to the UI.`}</li>\n      <li parentName=\"ul\">{`This two-way communication setup is fundamental for add-ons that interact with the document. Clicking the button now proves that our UI and sandbox can communicate successfully and `}<strong parentName=\"li\">{`logs a message`}</strong>{` to the console.`}</li>\n    </ul>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"index.html, ui/index.js, sandbox/code.js\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"indexhtml\"\n    }}>{`index.html`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Markdown Parser add-on</title>\n  <link rel=\"stylesheet\" href=\"styles.css\"/>\n</head>\n\n<body>\n  <sp-theme scale=\"medium\" color=\"light\" system=\"express\">\n    <h2>Markdown Parser</h2>\n    <sp-button id=\"helloButton\">Say Hello</sp-button>\n  </sp-theme>\n</body>\n</html>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"uiindexjs\"\n    }}>{`ui/index.js`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import \"@spectrum-web-components/styles/typography.css\";\nimport \"@spectrum-web-components/theme/src/themes.js\";\nimport \"@spectrum-web-components/theme/theme-light.js\";\nimport \"@spectrum-web-components/theme/express/theme-light.js\";\nimport \"@spectrum-web-components/theme/express/scale-medium.js\";\nimport \"@spectrum-web-components/theme/sp-theme.js\";\nimport \"@spectrum-web-components/button/sp-button.js\";\n\nimport addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(async () => {\n  console.log(\"addOnUISdk is ready for use.\");\n\n  // Get the Authoring Sandbox\n  const { runtime } = addOnUISdk.instance;\n  const sandboxProxy = await runtime.apiProxy(\"documentSandbox\");\n\n  // Log the message to the console when the button is clicked\n  document.getElementById(\"helloButton\").addEventListener(\"click\", () => {\n    sandboxProxy.sayHello(\"from the UI\");\n  });\n});\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sandboxcodejs\"\n    }}>{`sandbox/code.js`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import addOnSandboxSdk from \"add-on-sdk-document-sandbox\";\nconst { runtime } = addOnSandboxSdk.instance;\n\nfunction start() {\n  // APIs to be exposed to the UI runtime\n  const sandboxApi = {\n    sayHello: (message) => {\n      console.log(\\`Hello \\${message}, the sandbox is also running.\\`);\n    },\n  };\n  runtime.exposeApi(sandboxApi);\n}\n\nstart();\n`}</code></pre>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"57.50000000000001%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/express-add-ons-docs/static/fbaca33425c4f6d6b2e5be9a37118409/5530d/markdown--hello.webp 320w\", \"/express-add-ons-docs/static/fbaca33425c4f6d6b2e5be9a37118409/0c8fb/markdown--hello.webp 640w\", \"/express-add-ons-docs/static/fbaca33425c4f6d6b2e5be9a37118409/94b1e/markdown--hello.webp 1280w\", \"/express-add-ons-docs/static/fbaca33425c4f6d6b2e5be9a37118409/0b34d/markdown--hello.webp 1920w\", \"/express-add-ons-docs/static/fbaca33425c4f6d6b2e5be9a37118409/f3963/markdown--hello.webp 2500w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/express-add-ons-docs/static/fbaca33425c4f6d6b2e5be9a37118409/dd4a7/markdown--hello.png 320w\", \"/express-add-ons-docs/static/fbaca33425c4f6d6b2e5be9a37118409/0f09e/markdown--hello.png 640w\", \"/express-add-ons-docs/static/fbaca33425c4f6d6b2e5be9a37118409/bbbf7/markdown--hello.png 1280w\", \"/express-add-ons-docs/static/fbaca33425c4f6d6b2e5be9a37118409/ac7a9/markdown--hello.png 1920w\", \"/express-add-ons-docs/static/fbaca33425c4f6d6b2e5be9a37118409/6482f/markdown--hello.png 2500w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/express-add-ons-docs/static/fbaca33425c4f6d6b2e5be9a37118409/bbbf7/markdown--hello.png\",\n            \"alt\": \"Hello World\",\n            \"title\": \"Hello World\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <h2 {...{\n      \"id\": \"2-build-the-ui-and-handle-files\"\n    }}>{`2. Build the UI and Handle Files`}</h2>\n    <p>{`Now, let's create the actual user interface for our add-on and implement the file handling logic.`}</p>\n    <h3 {...{\n      \"id\": \"21-design-the-ui-with-spectrum-web-components\"\n    }}>{`2.1 Design the UI with Spectrum Web Components`}</h3>\n    <p>{`We'll use Spectrum Web Components (SWC) to create a UI that feels native to Adobe Express. Our interface will have a dropzone for files, a button to trigger parsing, and a progress indicator. The project has already imported the Spectrum Theme and Button components, let's add the other ones we need.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @spectrum-web-components/dropzone \\\\\n            @spectrum-web-components/illustrated-message \\\\\n            @spectrum-web-components/link \\\\\n            @spectrum-web-components/progress-circle\n`}</code></pre>\n    <p>{`Update `}<inlineCode parentName=\"p\">{`src/index.html`}</inlineCode>{` with the following markup.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The core of the UI is the `}<inlineCode parentName=\"li\">{`<sp-dropzone>`}</inlineCode>{` component, which creates an intuitive `}<strong parentName=\"li\">{`drag-and-drop area`}</strong>{` for files.`}</li>\n      <li parentName=\"ul\">{`For accessibility, a standard `}<inlineCode parentName=\"li\">{`<input type=\"file\">`}</inlineCode>{` is included but hidden with CSS.`}</li>\n      <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`<sp-link>`}</inlineCode>{` element is used to programmatically trigger the hidden file input, providing an alternative clickable way to handle file uploads.`}</li>\n      <li parentName=\"ul\">{`The main `}<inlineCode parentName=\"li\">{`<sp-button>`}</inlineCode>{` is initially `}<inlineCode parentName=\"li\">{`disabled`}</inlineCode>{`. This is a good practice to prevent user actions before the add-on is ready or before a file has been loaded. It will be enabled programmatically.`}</li>\n    </ul>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"index.html, styles.css\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"indexhtml-1\"\n    }}>{`index.html`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Markdown Parser add-on</title>\n  <link rel=\"stylesheet\" href=\"styles.css\"/>\n</head>\n\n<body>\n  <sp-theme scale=\"medium\" color=\"light\" system=\"express\">\n    <h2>Markdown Parser</h2>\n    <div class=\"row\">\n      <sp-dropzone tabindex=\"0\" id=\"dropzone\" drop-effect=\"copy\">\n        <sp-illustrated-message id=\"message\"\n          style=\"--mod-illustrated-message-display: flex;\"\n          heading=\"Drag and drop your file\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 150 103\"\n               width=\"150\" height=\"103\">\n            <path\n              d=\"M133.7,8.5h-118c-1.9,0-3.5,1.6-3.5,3.5v27c0,0.8,0.7,1.5,1.5,1.5s1.5-0.7,1.5-1.5V23.5h119V92c0,0.3-0.2,0.5-0.5,0.5h-118c-0.3,0-0.5-0.2-0.5-0.5V69c0-0.8-0.7-1.5-1.5-1.5s-1.5,0.7-1.5,1.5v23c0,1.9,1.6,3.5,3.5,3.5h118c1.9,0,3.5-1.6,3.5-3.5V12C137.2,10.1,135.6,8.5,133.7,8.5z M15.2,21.5V12c0-0.3,0.2-0.5,0.5-0.5h118c0.3,0,0.5,0.2,0.5,0.5v9.5H15.2z M32.6,16.5c0,0.6-0.4,1-1,1h-10c-0.6,0-1-0.4-1-1s0.4-1,1-1h10C32.2,15.5,32.6,15.9,32.6,16.5z M13.6,56.1l-8.6,8.5C4.8,65,4.4,65.1,4,65.1c-0.4,0-0.8-0.1-1.1-0.4c-0.6-0.6-0.6-1.5,0-2.1l8.6-8.5l-8.6-8.5c-0.6-0.6-0.6-1.5,0-2.1c0.6-0.6,1.5-0.6,2.1,0l8.6,8.5l8.6-8.5c0.6-0.6,1.5-0.6,2.1,0c0.6,0.6,0.6,1.5,0,2.1L15.8,54l8.6,8.5c0.6,0.6,0.6,1.5,0,2.1c-0.3,0.3-0.7,0.4-1.1,0.4c-0.4,0-0.8-0.1-1.1-0.4L13.6,56.1z\">\n            </path>\n          </svg>\n        </sp-illustrated-message>\n        <div>\n          <label for=\"file-input\">\n            <sp-link href=\"#\"\n              onclick=\"document.getElementById('file-input').click()\">\n              Select a Markdown File\n            </sp-link>\n            from your computer\n          </label>\n          <input type=\"file\" id=\"file-input\" style=\"display: none\" />\n        </div>\n      </sp-dropzone>\n    </div>\n\n    <div class=\"row button-row\">\n      <sp-button id=\"parseButton\" variant=\"accent\" disabled>\n        Parse Markdown\n      </sp-button>\n      <sp-progress-circle size=\"s\" indeterminate id=\"progress-circle\">\n      </sp-progress-circle>\n    </div>\n\n    <div class=\"row info-text\">\n      <p>\n        Parses Markdown and creates styled text in your Adobe Express\n        document. Supported formats: Headings, Bold, Italic, and Lists.\n      </p>\n    </div>\n  </sp-theme>\n</body>\n</html>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"stylescss\"\n    }}>{`styles.css`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`body { margin: 0; padding: 0; overflow-x: hidden; }\n\nsp-theme {\n  margin: 0 var(--spectrum-global-dimension-static-size-300);\n  display: grid;\n}\n\nh2 { font-weight: var(--spectrum-global-font-weight-black); }\n\nsp-button { flex: 1; }\n\nsp-dropzone { max-width: 272px; }\n\nsp-progress-circle { margin-left: 10px; }\n\n.row {\n  display: flex; flex-direction: row; justify-content: space-between;\n  width: 100%; align-items: flex-end;\n}\n\n.button-row {\n  margin-top: 20px; display: flex; align-items: center;\n  justify-content: center;\n}\n\n.gap-20 { gap: var(--spectrum-global-dimension-static-size-250); }\n\n.gutter-row {\n  display: flex; flex-direction: row; justify-content: flex-end;\n  align-items: flex-start; border: 1px solid black; width: 100%;\n  margin-bottom: var(--spectrum-global-dimension-static-size-150);\n}\n\n.info-text { margin-top: 10px; font-size: 12px; color: #6e6e6e; }\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"22-handle-file-uploads\"\n    }}>{`2.2 Handle File Uploads`}</h3>\n    <p>{`To handle file interactions, we'll create a new file called `}<inlineCode parentName=\"p\">{`ui/file-handler.js`}</inlineCode>{`. This module will `}<strong parentName=\"p\">{`set up event listeners`}</strong>{` on the dropzone and the hidden file input. We'll also touch the `}<inlineCode parentName=\"p\">{`ui/index.js`}</inlineCode>{` file to import and pass it the sandbox proxy.`}</p>\n    <p>{`Let's walk through the file handling logic in `}<inlineCode parentName=\"p\">{`ui/file-handler.js`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`setupFileHandler`}</inlineCode>{` function `}<strong parentName=\"li\">{`centralizes all UI interaction logic`}</strong>{`, and begins by getting references to the necessary DOM elements (dropzone, button, etc.).`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`handleFile`}</inlineCode>{` function is the workhorse here. It first validates that the dropped file is a Markdown file.`}</li>\n      <li parentName=\"ul\">{`It then uses the browser's standard `}<inlineCode parentName=\"li\">{`FileReader`}</inlineCode>{` API to read the file's content asynchronously.`}</li>\n      <li parentName=\"ul\">{`Once the content is loaded (`}<inlineCode parentName=\"li\">{`reader.onload`}</inlineCode>{`), it's stored in a variable, and the \"Parse Markdown\" button is enabled. The `}<inlineCode parentName=\"li\">{`updateMessage`}</inlineCode>{` function is called to update the message to \"Got it!\"`}</li>\n      <li parentName=\"ul\">{`Event listeners are set up for both the Spectrum dropzone's custom `}<inlineCode parentName=\"li\">{`sp-dropzone-drop`}</inlineCode>{` event and the standard `}<inlineCode parentName=\"li\">{`change`}</inlineCode>{` event on the hidden file input, ensuring both upload methods work.`}</li>\n    </ul>\n    <p>{`In `}<inlineCode parentName=\"p\">{`ui/index.js`}</inlineCode>{`, instead:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`We import all the necessary Spectrum components that we installed earlier.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`sandboxProxy`}</inlineCode>{` is retrieved from the runtime API and passed to `}<inlineCode parentName=\"li\">{`setupFileHandler()`}</inlineCode>{`.`}</li>\n    </ul>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, JavaScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"uiindexjs-1\"\n    }}>{`ui/index.js`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import \"@spectrum-web-components/styles/typography.css\";\n\nimport \"@spectrum-web-components/theme/src/themes.js\";\nimport \"@spectrum-web-components/theme/theme-light.js\";\nimport \"@spectrum-web-components/theme/express/theme-light.js\";\nimport \"@spectrum-web-components/theme/express/scale-medium.js\";\nimport \"@spectrum-web-components/theme/sp-theme.js\";\n\nimport \"@spectrum-web-components/button/sp-button.js\";\nimport \"@spectrum-web-components/link/sp-link.js\";\nimport \"@spectrum-web-components/illustrated-message/sp-illustrated-message.js\";\nimport \"@spectrum-web-components/dropzone/sp-dropzone.js\";\nimport \"@spectrum-web-components/progress-circle/sp-progress-circle.js\";\n\nimport addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\nimport setupFileHandler from \"./file-handler.js\";\n\naddOnUISdk.ready.then(async () => {\n  console.log(\"addOnUISdk is ready for use.\");\n\n  // Get the Authoring Sandbox\n  const { runtime } = addOnUISdk.instance;\n  const sandboxProxy = await runtime.apiProxy(\"documentSandbox\");\n\n  // Pass the sandbox proxy to the file handler\n  setupFileHandler(sandboxProxy); // 👈\n});\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"uifile-handlerjs\"\n    }}>{`ui/file-handler.js`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// Sets up file handling functionality for the markdown parser add-on\nexport default function setupFileHandler(sandboxProxy) {\n  customElements.whenDefined(\"sp-dropzone\").then(() => {\n    const dropzone = document.getElementById(\"dropzone\");\n    const parseButton = document.getElementById(\"parseButton\");\n    const message = document.getElementById(\"message\");\n    const fileInput = document.getElementById(\"file-input\");\n    const progressCircle = document.getElementById(\"progress-circle\");\n    let input;\n    let beingDraggedOver = false;\n    let markdownContent = null;\n\n    // Hide progress initially\n    if (progressCircle) { progressCircle.style.display = \"none\" }\n\n    const isMarkdownFile = (file) => {\n      return (\n        file.name.toLowerCase().endsWith(\".md\") ||\n        file.type === \"text/markdown\"\n      );\n    };\n\n    const updateMessage = () => {\n      message.heading =\n        input !== undefined\n          ? beingDraggedOver\n            ? \"Drop here to replace!\"\n            : \"Got it!\"\n          : \"Drag and drop your file\";\n    };\n\n    const handleDropOrChange = (event) => {\n      let file;\n\n      // Handle different event sources\n      if (event.type === \"drop\") {\n        file = event.dataTransfer.files[0];\n      } else if (event.type === \"change\") {\n        file = event.target.files[0];\n      } else if (event.detail && event.detail.dropEvent) {\n        // Handle sp-dropzone-drop event\n        file = event.detail.dropEvent.dataTransfer.files[0];\n      }\n      if (!file) {\n        console.error(\"No file found in the event\"); return;\n      }\n      if (!isMarkdownFile(file)) {\n        message.heading = \"Please drop a markdown (.md) file\"; return;\n      }\n\n      // Set input to a temporary value to show \"Got it!\" immediately\n      input = \"loading\";\n      dropzone.setAttribute(\"filled\", true);\n      beingDraggedOver = false;\n      updateMessage();\n\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const content = e.target.result;\n        input = content;\n        markdownContent = content;\n        console.log(\"Markdown content:\", content);\n        // Enable parse button now that we have content\n        parseButton.disabled = false;\n        // Ensure message is updated after content is loaded\n        updateMessage();\n      };\n      reader.readAsText(file);\n    };\n\n    // Function to parse markdown and insert styled text\n    // into the document - To be implemented later...\n    const parseMarkdownAndInsert = async () => {\n      if (!markdownContent) {\n        console.error(\"No markdown content to parse\"); return;\n      }\n      console.log(\"Parsing will be implemented in the next section.\");\n      message.heading = \"Parsing not implemented yet.\";\n    };\n\n    // Event listeners\n    dropzone.addEventListener(\"dragover\", (event) => {\n      event.preventDefault();\n      beingDraggedOver = true;\n      updateMessage();\n    });\n    dropzone.addEventListener(\"dragleave\", () => {\n      beingDraggedOver = false;\n      updateMessage();\n    });\n    dropzone.addEventListener(\"drop\", (event) => {\n      event.preventDefault();\n      handleDropOrChange(event);\n    });\n    // Also listen for the Spectrum Web Component's native event\n    dropzone.addEventListener(\"sp-dropzone-drop\", (event) => {\n      event.preventDefault();\n      handleDropOrChange(event);\n    });\n    fileInput.addEventListener(\"change\", (event) => {\n      handleDropOrChange(event);\n    });\n\n    // Parse button click handler\n    parseButton.addEventListener(\"click\", parseMarkdownAndInsert);\n    // Initially disable parse button until we have content\n    parseButton.disabled = true;\n  });\n}\n`}</code></pre>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"57.50000000000001%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/express-add-ons-docs/static/ddab09c6934b92c379a6c208d0dd987c/5530d/markdown--ui.webp 320w\", \"/express-add-ons-docs/static/ddab09c6934b92c379a6c208d0dd987c/0c8fb/markdown--ui.webp 640w\", \"/express-add-ons-docs/static/ddab09c6934b92c379a6c208d0dd987c/94b1e/markdown--ui.webp 1280w\", \"/express-add-ons-docs/static/ddab09c6934b92c379a6c208d0dd987c/0b34d/markdown--ui.webp 1920w\", \"/express-add-ons-docs/static/ddab09c6934b92c379a6c208d0dd987c/f3963/markdown--ui.webp 2500w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/express-add-ons-docs/static/ddab09c6934b92c379a6c208d0dd987c/dd4a7/markdown--ui.png 320w\", \"/express-add-ons-docs/static/ddab09c6934b92c379a6c208d0dd987c/0f09e/markdown--ui.png 640w\", \"/express-add-ons-docs/static/ddab09c6934b92c379a6c208d0dd987c/bbbf7/markdown--ui.png 1280w\", \"/express-add-ons-docs/static/ddab09c6934b92c379a6c208d0dd987c/ac7a9/markdown--ui.png 1920w\", \"/express-add-ons-docs/static/ddab09c6934b92c379a6c208d0dd987c/6482f/markdown--ui.png 2500w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/express-add-ons-docs/static/ddab09c6934b92c379a6c208d0dd987c/bbbf7/markdown--ui.png\",\n            \"alt\": \"Markdown Parser UI\",\n            \"title\": \"Markdown Parser UI\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <p>{`As soon as you drop a Markdown file, the UI will show \"Got it!\" and the Parse Markdown button will be enabled.`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"57.50000000000001%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/express-add-ons-docs/static/3a0d1b74a2fe768a707384c49dfbeb25/5530d/markdown--text.webp 320w\", \"/express-add-ons-docs/static/3a0d1b74a2fe768a707384c49dfbeb25/0c8fb/markdown--text.webp 640w\", \"/express-add-ons-docs/static/3a0d1b74a2fe768a707384c49dfbeb25/94b1e/markdown--text.webp 1280w\", \"/express-add-ons-docs/static/3a0d1b74a2fe768a707384c49dfbeb25/0b34d/markdown--text.webp 1920w\", \"/express-add-ons-docs/static/3a0d1b74a2fe768a707384c49dfbeb25/f3963/markdown--text.webp 2500w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/express-add-ons-docs/static/3a0d1b74a2fe768a707384c49dfbeb25/dd4a7/markdown--text.png 320w\", \"/express-add-ons-docs/static/3a0d1b74a2fe768a707384c49dfbeb25/0f09e/markdown--text.png 640w\", \"/express-add-ons-docs/static/3a0d1b74a2fe768a707384c49dfbeb25/bbbf7/markdown--text.png 1280w\", \"/express-add-ons-docs/static/3a0d1b74a2fe768a707384c49dfbeb25/ac7a9/markdown--text.png 1920w\", \"/express-add-ons-docs/static/3a0d1b74a2fe768a707384c49dfbeb25/6482f/markdown--text.png 2500w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/express-add-ons-docs/static/3a0d1b74a2fe768a707384c49dfbeb25/bbbf7/markdown--text.png\",\n            \"alt\": \"Markdown Parser with console text\",\n            \"title\": \"Markdown Parser with console text\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <h2 {...{\n      \"id\": \"3-parse-markdown\"\n    }}>{`3. Parse Markdown`}</h2>\n    <p>{`The next step is to take the raw text from the uploaded file and convert it into a structured format that we can work with.`}</p>\n    <h3 {...{\n      \"id\": \"31-parse-markdown-into-an-abstract-syntax-tree-ast\"\n    }}>{`3.1 Parse Markdown into an Abstract Syntax Tree (AST)`}</h3>\n    <p>{`Parsing involves analyzing a Markdown text as a string and converting it into a data structure called an `}<strong parentName=\"p\">{`Abstract Syntax Tree (AST)`}</strong>{`. An AST is a tree representation, where each node denotes a construct occurring in the text.`}</p>\n    <p>{`For example, the Markdown `}<inlineCode parentName=\"p\">{`## Hello`}</inlineCode>{` would be parsed into a `}<inlineCode parentName=\"p\">{`heading`}</inlineCode>{` node with a `}<inlineCode parentName=\"p\">{`depth`}</inlineCode>{` of 2, containing a `}<inlineCode parentName=\"p\">{`text`}</inlineCode>{` node with the value \"Hello\".`}</p>\n    <p>{`We will use two popular libraries for this task:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.npmjs.com/package/unified\"\n        }}><inlineCode parentName=\"a\">{`unified`}</inlineCode></a>{`: A powerful engine for processing content as structured data (ASTs) with plugins.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.npmjs.com/package/remark-parse\"\n        }}><inlineCode parentName=\"a\">{`remark-parse`}</inlineCode></a>{`: A `}<inlineCode parentName=\"li\">{`unified`}</inlineCode>{` plugin plugin that defines how to take markdown as input and turn it into a syntax tree.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.npmjs.com/package/remark-stringify\"\n        }}><inlineCode parentName=\"a\">{`remark-stringify`}</inlineCode></a>{`: A `}<inlineCode parentName=\"li\">{`unified`}</inlineCode>{` plugin that defines how to take a syntax tree as input and turn it into serialized markdown.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.npmjs.com/package/mdast-util-to-string\"\n        }}><inlineCode parentName=\"a\">{`mdast-util-to-string`}</inlineCode></a>{`: A tiny utility that gets the textual content of a node.`}</li>\n    </ul>\n    <p>{`Let's install them:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install unified \\\\\n            remark-parse \\\\\n            remark-stringify \\\\\n            mdast-util-to-string\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"32-implement-the-parser\"\n    }}>{`3.2 Implement the Parser`}</h3>\n    <p>{`Now, let's create the `}<inlineCode parentName=\"p\">{`ui/markdown-parser.js`}</inlineCode>{` file. This module will be responsible for taking Markdown text and returning an AST.`}</p>\n    <p>{`Here's what our parser module does:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Parses Markdown into a Data Structure`}</strong>{`: At its core, the module takes the raw Markdown text from the uploaded file and uses the `}<inlineCode parentName=\"li\">{`unified`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`remark-parse`}</inlineCode>{` libraries to transform it into an Abstract Syntax Tree (AST). An AST is an organized, tree-like representation of the document's structure (headings, lists, bold text, etc.).`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Creates a Specially Formatted Text String`}</strong>{`: It then traverses the AST to generate a single, continuous string of text. This isn't just plain text; the `}<inlineCode parentName=\"li\">{`getFormattedText`}</inlineCode>{` function strategically inserts double newlines (`}<inlineCode parentName=\"li\">{`\\\\n\\\\n`}</inlineCode>{`) between major elements like paragraphs and headings.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Prepares Text for Styling`}</strong>{`: This special formatting is key to our strategy. The single string with calculated newlines serves as the canvas upon which we'll apply styles. The newlines ensure that when the text is placed in Adobe Express, paragraphs are correctly separated. We will later use this string to calculate the exact character positions for applying styles like bold, italics, or heading sizes.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Exports Key Information`}</strong>{`: The main function, `}<inlineCode parentName=\"li\">{`processMarkdown`}</inlineCode>{`, bundles up the AST and the formatted text string, making them available to the other parts of our add-on.`}</li>\n    </ul>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"JavaScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"uimarkdown-parserjs\"\n    }}>{`ui/markdown-parser.js`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { unified } from \"unified\";\nimport remarkParse from \"remark-parse\";\nimport remarkStringify from \"remark-stringify\";\nimport { toString } from \"mdast-util-to-string\";\n\n// Parse markdown content into an abstract syntax tree (AST)\nexport async function parseMarkdown(markdownContent) {\n  try {\n    // Create a unified processor with remark-parse\n    const processor = unified().use(remarkParse);\n    // Parse the markdown content into an AST\n    const ast = processor.parse(markdownContent);\n    // Run any transformations needed\n    const result = await processor.run(ast);\n    return result;\n  } catch (e) {\n    console.error(\"Error parsing markdown in markdown-parser.js:\", e);\n    throw e;\n  }\n}\n\n// Replace multiple consecutive spaces, tabs,\n// and newlines with a single space\nfunction cleanText(text) { return text.replace(/\\\\s+/g, \" \").trim() }\n\n// Get properly formatted text from the AST\nexport function getFormattedText(ast) {\n  let text = \"\";\n\n  // Process nodes to create proper paragraph breaks\n  const processNode = (node) => {\n    if (!node) return \"\";\n    if (node.type === \"root\") {\n      // Process each child node\n      node.children.forEach((child, index) => {\n        const childText = processNode(child);\n        text += childText;\n        // Add paragraph breaks between block elements\n        if (\n          index < node.children.length - 1 &&\n          [\"paragraph\", \"heading\", \"list\"].includes(child.type)\n        ) {  text += \"\\\\n\\\\n\" }\n      });\n      return text;\n    }\n\n    // Handle specific node types\n    switch (node.type) {\n      case \"paragraph\": return cleanText(toString(node));\n      case \"heading\":   return cleanText(toString(node));\n      case \"list\":\n        let listText = \"\";\n        node.children.forEach((item, index) => {\n          // const marker = node.ordered ? \\`\\${index + 1}. \\` : \"• \";\n          const itemText = cleanText(toString(item));\n          // listText += marker + itemText;\n          listText += itemText;\n          if (index < node.children.length - 1) { listText += \"\\\\n\" }\n        });\n        return listText;\n      default:\n        // For other node types, just return the text\n        return cleanText(toString(node));\n    }\n  };\n  return processNode(ast);\n}\n\n// Convert AST back to markdown string (for testing/debugging)\nexport async function astToMarkdown(ast) {\n  try {\n    const processor = unified().use(remarkStringify);\n    const result = processor.stringify(ast);\n    return result;\n  } catch (e) {\n    console.error(\"Error converting AST to markdown:\", e);\n    throw e;\n  }\n}\n\n// Extract plain text from the AST\nexport function extractTextFromAst(ast) { return toString(ast) }\n\n// Process markdown by parsing to AST + transforming for Adobe Express\nexport async function processMarkdown(markdownContent) {\n\n  const ast = await parseMarkdown(markdownContent);\n  // Extract all headings for potential TOC\n  const headings = [];\n  const processNode = (node) => {\n    if (node.type === \"heading\") {\n      headings.push({\n        depth: node.depth, text: toString(node),\n        children: node.children\n      });\n    }\n    if (node.children) { node.children.forEach(processNode) }\n  }\n  processNode(ast);\n\n  // Get both formatted text (with proper paragraphs) and raw text\n  const formattedText = getFormattedText(ast);\n\n  return { ast, headings, plainText: formattedText, formattedText }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"33-connect-the-parser\"\n    }}>{`3.3 Connect the Parser`}</h3>\n    <p>{`Now that we have a module capable of turning Markdown text into an Abstract Syntax Tree (AST), let's connect it to our UI. This will serve as a great checkpoint to verify that our file reading and parsing logic are working correctly before we move on to styling.`}</p>\n    <p>{`First, import the `}<inlineCode parentName=\"p\">{`parseMarkdown`}</inlineCode>{` function at the top of `}<inlineCode parentName=\"p\">{`src/ui/file-handler.js`}</inlineCode>{`; next, update the placeholder `}<inlineCode parentName=\"p\">{`parseMarkdownAndInsert`}</inlineCode>{` function with a new logic to call the parser and log the result to the console.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"JavaScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"uifile-handlerjs-1\"\n    }}>{`ui/file-handler.js`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { parseMarkdown } from \"./markdown-parser.js\";     // 👈\n\nexport default function setupFileHandler(sandboxProxy) {\n  customElements.whenDefined(\"sp-dropzone\").then(() => {\n\n    // 👆 (keep the rest of the file the same) 👆\n\n    const parseMarkdownAndInsert = async () => {\n      if (!markdownContent) {\n        console.error(\"No markdown content to parse\");\n        return;\n      }\n      try {\n        progressCircle.style.display = \"block\";\n        message.heading = \"Processing markdown...\";\n        parseButton.disabled = true;\n\n        // 1. Parse the markdown to get the AST           // 👈\n        const ast = await parseMarkdown(markdownContent); // 👈\n        console.log(\"Parsed Markdown AST:\", ast);         // 👈\n\n        message.heading = \"AST logged to console!\";\n      } catch (error) {\n        console.error(\"Error during parsing:\", error);\n        message.heading = \"Error parsing markdown\";\n      } finally {\n        progressCircle.style.display = \"none\";\n        parseButton.disabled = false;\n      }\n    };\n\n    // 👇 (keep the rest of the file the same) 👇\n\n  });\n}\n`}</code></pre>\n    <p>{`Now, when you run the add-on, upload a Markdown file, and click \"Parse Markdown\", you should see the structured AST object in your browser's developer console. This confirms that the core parsing mechanism is working perfectly.`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"40.3125%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/express-add-ons-docs/static/d8ca23aa19c0273c081cc73aee57f79b/5530d/markdown--ast.webp 320w\", \"/express-add-ons-docs/static/d8ca23aa19c0273c081cc73aee57f79b/0c8fb/markdown--ast.webp 640w\", \"/express-add-ons-docs/static/d8ca23aa19c0273c081cc73aee57f79b/94b1e/markdown--ast.webp 1280w\", \"/express-add-ons-docs/static/d8ca23aa19c0273c081cc73aee57f79b/0b34d/markdown--ast.webp 1920w\", \"/express-add-ons-docs/static/d8ca23aa19c0273c081cc73aee57f79b/f3963/markdown--ast.webp 2500w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/express-add-ons-docs/static/d8ca23aa19c0273c081cc73aee57f79b/dd4a7/markdown--ast.png 320w\", \"/express-add-ons-docs/static/d8ca23aa19c0273c081cc73aee57f79b/0f09e/markdown--ast.png 640w\", \"/express-add-ons-docs/static/d8ca23aa19c0273c081cc73aee57f79b/bbbf7/markdown--ast.png 1280w\", \"/express-add-ons-docs/static/d8ca23aa19c0273c081cc73aee57f79b/ac7a9/markdown--ast.png 1920w\", \"/express-add-ons-docs/static/d8ca23aa19c0273c081cc73aee57f79b/6482f/markdown--ast.png 2500w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/express-add-ons-docs/static/d8ca23aa19c0273c081cc73aee57f79b/bbbf7/markdown--ast.png\",\n            \"alt\": \"Markdown Parser with console AST output\",\n            \"title\": \"Markdown Parser with console AST output\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <h2 {...{\n      \"id\": \"4-integrate-with-the-adobe-express-text-api\"\n    }}>{`4. Integrate with the Adobe Express Text API`}</h2>\n    <p>{`With our Markdown parsed into an AST, the final and most exciting part is to render it as styled text in the Adobe Express document.`}</p>\n    <h3 {...{\n      \"id\": \"41-convert-the-ast-into-styled-text-for-adobe-express\"\n    }}>{`4.1 Convert the AST into Styled Text for Adobe Express`}</h3>\n    <p>{`Our overall strategy is as follows:`}</p>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Extract Plain Text`}</strong>{`: First, we'll convert the entire AST into a single string of plain text, using our `}<inlineCode parentName=\"li\">{`getFormattedText`}</inlineCode>{` function.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Generate Style Ranges`}</strong>{`: We'll traverse the AST again. For each node that requires styling (like a `}<inlineCode parentName=\"li\">{`heading`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`strong`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`emphasis`}</inlineCode>{` node), we'll record its `}<inlineCode parentName=\"li\">{`type`}</inlineCode>{` of style and its `}<inlineCode parentName=\"li\">{`start`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`end`}</inlineCode>{` position in the plain text string.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Communicate with Sandbox`}</strong>{`: We'll send the plain text and the array of style ranges to our document sandbox.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Apply Styles in Sandbox`}</strong>{`: The sandbox code will create a single `}<inlineCode parentName=\"li\">{`TextNode`}</inlineCode>{` with the plain text. Then, it will iterate through the style ranges and apply the corresponding character or paragraph styles using the Text API.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"42-the-formatter-generating-style-ranges\"\n    }}>{`4.2 The Formatter: Generating Style Ranges`}</h3>\n    <p>{`The new `}<inlineCode parentName=\"p\">{`ui/adobe-express-formatter.js`}</inlineCode>{` module is responsible for the second step: traversing the AST and generating style ranges.`}</p>\n    <p>{`This formatter's goal is to `}<strong parentName=\"p\">{`map the AST structure to a list of styling instructions`}</strong>{` that Adobe Express can understand.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`createExpressStylingFromAST()`}</inlineCode>{` function first generates the final, formatted plain text string.`}</li>\n      <li parentName=\"ul\">{`It then uses a recursive `}<inlineCode parentName=\"li\">{`traverse`}</inlineCode>{` function to walk through every node in the AST.`}</li>\n      <li parentName=\"ul\">{`The key to this process is the `}<inlineCode parentName=\"li\">{`offset`}</inlineCode>{` variable, which acts as a cursor, tracking our position within the plain text string.`}</li>\n      <li parentName=\"ul\">{`For each styleable node (e.g., `}<inlineCode parentName=\"li\">{`heading`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`strong`}</inlineCode>{`), we record the `}<inlineCode parentName=\"li\">{`offset`}</inlineCode>{` before and after processing its children. This gives us the precise `}<inlineCode parentName=\"li\">{`start`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`end`}</inlineCode>{` indices for the style range.`}</li>\n      <li parentName=\"ul\">{`A crucial detail is handling whitespace. The traversal logic must account for the double line breaks (`}<inlineCode parentName=\"li\">{`\\\\n\\\\n`}</inlineCode>{`) we added between block elements to keep the `}<inlineCode parentName=\"li\">{`offset`}</inlineCode>{` accurate. This is why the `}<inlineCode parentName=\"li\">{`root`}</inlineCode>{` node traversal manually increments the offset.`}</li>\n    </ul>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"JavaScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"uiadobe-express-formatterjs\"\n    }}>{`ui/adobe-express-formatter.js`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { getFormattedText, extractTextFromAst } from \"./markdown-parser.js\";\n\n// Creates a mapping of text ranges and their styling commands for Adobe Express\nfunction processNodeForStyling(ast, styleRanges) {\n  let offset = 0;\n\n  const traverse = (node) => {\n    if (!node) return;\n\n    const startOffset = offset;\n    // Helper function to process styled nodes with common pattern\n    const processStyledNode = (node, styleType, styleProps = {}) => {\n      const rangeStart = offset;\n      node.children.forEach(traverse);\n      const rangeEnd = offset;\n\n      styleRanges.push({\n        start: rangeStart,  end: rangeEnd,\n        style: { type: styleType, ...styleProps },\n      });\n    };\n\n    switch (node.type) {\n      case \"root\":\n        node.children.forEach((child, index) => {\n          traverse(child);\n          if (\n            index < node.children.length - 1 &&\n            [\"paragraph\", \"heading\", \"list\"].includes(child.type)\n          ) {\n            offset += 2; // \\\\n\\\\n between blocks\n          }\n        });\n        break;\n\n      case \"paragraph\":\n        node.children.forEach(traverse);\n        break;\n      case \"heading\":\n        processStyledNode(node, \"heading\", { level: node.depth });\n        break;\n      case \"text\":\n        offset += node.value.length;\n        break;\n      case \"emphasis\":\n        processStyledNode(node, \"emphasis\", { italic: true });\n        break;\n      case \"strong\":\n        processStyledNode(node, \"strong\", { bold: true });\n        break;\n\n      // example AST traversal logic for lists:\n      case \"list\":\n        const listStart = offset;\n        node.children.forEach((item, index) => {\n          item.children.forEach(traverse);\n          // newline between items\n          if (index < node.children.length - 1) offset += 1;\n        });\n        styleRanges.push({\n          start: listStart, end: offset,\n          style: { type: \"list\", ordered: node.ordered },\n        });\n        break;\n      case \"inlineCode\":\n        offset += node.value.length;\n        styleRanges.push({\n          start: startOffset, end: offset,\n          style: { type: \"code\", isInline: true },\n        });\n        break;\n      default:\n        if (node.children) node.children.forEach(traverse);\n        break;\n    }\n  };\n  traverse(ast);\n}\n\n// Create Adobe Express text styling instructions from a markdown AST\nexport function createExpressStylingFromAST(ast) {\n  // Extract the full text from the AST\n  const plainText = getFormattedText(ast);\n  const styleRanges = [];\n  // Process the AST to generate style ranges\n  processNodeForStyling(ast, styleRanges, plainText);\n  return { plainText, styleRanges }\n}\n\n// Helper function to print out style ranges for debugging\nexport function debugStyleRanges(text, styleRanges) {\n  console.log(\"---- Style Ranges Debug ----\");\n  styleRanges.forEach((range, index) => {\n    const snippet = text.substring(range.start, range.end);\n    console.log(\n      \\`Range \\${index}: \\${range.start}-\\${range.end} (\\${range.style.type})\\`\n    );\n    console.log(\\`Text: \"\\${snippet}\"\\`);\n    console.log(\"Style:\", range.style);\n    console.log(\"-----\");\n  });\n}\n\n// Helper function to apply Adobe Express text styling\nexport async function applyExpressTextStyling(sandboxProxy, text, styleRanges) {\n  try {\n    // First create a text node with the plain text\n    const textNode = await sandboxProxy.createTextNode(text);\n\n    // Then apply styling to the text node\n    for (const range of styleRanges) {\n      switch (range.style.type) {\n        case \"heading\":\n          await sandboxProxy.applyHeadingStyle(\n            textNode, range.start, range.end, range.style.level\n          );\n          break;\n        case \"emphasis\":\n          await sandboxProxy.applyTextStyle(\n            textNode, range.start, range.end, { italic: true }\n          );\n          break;\n        case \"strong\":\n          await sandboxProxy.applyTextStyle(\n            textNode, range.start, range.end, { bold: true }\n          );\n          break;\n        case \"link\":\n          await sandboxProxy.applyLinkStyle(\n            textNode, range.start, range.end, range.style.url\n          );\n          break;\n        // You can add cases for other styles here...\n      }\n    }\n    return textNode;\n  } catch (error) {\n    console.error(\"Error applying Express text styling:\", error);\n    throw error;\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"43-the-sandbox-apply-the-styles\"\n    }}>{`4.3 The Sandbox: Apply the Styles`}</h3>\n    <p>{`Now, let's implement the final piece in `}<inlineCode parentName=\"p\">{`sandbox/code.js`}</inlineCode>{`. This script will receive the text and style ranges and use the Text API to perform the magic. We'll also define our styling rules in `}<inlineCode parentName=\"p\">{`sandbox/constants.js`}</inlineCode>{` which allows to easily change the visual output (fonts, sizes, spacing) of the parsed Markdown without having to search through the application logic.`}</p>\n    <p>{`This `}<inlineCode parentName=\"p\">{`sandbox/code.js`}</inlineCode>{` is where the visual transformation happens. Here are the key points:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`createStyledTextFromMarkdown`}</inlineCode>{` function receives the plain text and style ranges from the UI.`}</li>\n      <li parentName=\"ul\">{`It first creates a single `}<inlineCode parentName=\"li\">{`TextNode`}</inlineCode>{` with the entire plain text content and adds it to the document.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Performance Tip: Font Caching.`}</strong>{` The `}<inlineCode parentName=\"li\">{`preloadFonts`}</inlineCode>{` function and `}<inlineCode parentName=\"li\">{`fontCache`}</inlineCode>{` map are used to load all necessary fonts at once and store them. This avoids making multiple, slow requests for the same font.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Safe Asynchronous Edits.`}</strong>{` `}<a parentName=\"li\" {...{\n          \"href\": \"../../../../references/document-sandbox/document-apis/classes/Editor.md#queueasyncedit\"\n        }}><inlineCode parentName=\"a\">{`editor.queueAsyncEdit()`}</inlineCode></a>{` is essential for making changes to the document `}<em parentName=\"li\">{`after`}</em>{` an asynchronous operation (like `}<inlineCode parentName=\"li\">{`preloadFonts`}</inlineCode>{`). The Add-on SDK requires that any edits following a pause for an `}<inlineCode parentName=\"li\">{`await`}</inlineCode>{` be wrapped in `}<inlineCode parentName=\"li\">{`queueAsyncEdit()`}</inlineCode>{`. This ensures that all changes are correctly tracked for the application's save and undo history. While this also has the benefit of batching multiple edits into a single, efficient operation, its primary role here is to guarantee document stability.`}</li>\n      <li parentName=\"ul\">{`Inside the queue, a base style is applied to the entire text block first. Then, the code iterates through the `}<inlineCode parentName=\"li\">{`styleRanges`}</inlineCode>{` array, applying each specific character or paragraph style to the correct portion of the text.`}</li>\n    </ul>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sandboxconstantsjs\"\n    }}>{`sandbox/constants.js`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`export const MD_CONSTANTS = {\n  FONTS: {\n    HEADING: \"SourceSans3-Bold\",\n    EMPHASIS: \"SourceSans3-It\",\n    STRONG: \"SourceSans3-Bold\",\n    CODE: \"AnonymousPro\",\n    REGULAR: \"SourceSans3-Regular\",\n  },\n  HEADING_SIZES: {\n    1: 24, 2: 22, 3: 20, 4: 18, 5: 16, 6: 16, DEFAULT: 16\n  },\n  LAYOUT: {\n    MARGIN: 20,\n    DEFAULT_FONT_SIZE: 16,\n    LINE_SPACING: 1.5,\n    PARAGRAPH_SPACE_AFTER: 8,\n  },\n  DEBUG: false,\n};\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sandboxcodejs-1\"\n    }}>{`sandbox/code.js`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import addOnSandboxSdk from \"add-on-sdk-document-sandbox\";\nimport { editor, fonts, constants } from \"express-document-sdk\";\nimport { MD_CONSTANTS } from \"./constants.js\";\n\nconst { runtime } = addOnSandboxSdk.instance;\nconst DEBUG_STYLES = MD_CONSTANTS.DEBUG;\n\n// Returns the font size for a specific markdown heading level\nfunction getFontSizeForHeadingLevel(level) {\n  return (\n    MD_CONSTANTS.HEADING_SIZES[level] ||\n    MD_CONSTANTS.HEADING_SIZES.DEFAULT\n  );\n}\n\n// Initializes the document sandbox functionality\nfunction start() {\n  // Cache loaded fonts to avoid reloading them\n  const fontCache = new Map();\n\n  // Preloads and caches fonts by their postscript names\n  async function preloadFonts(postscriptNames) {\n    await Promise.all(\n      postscriptNames.map(async (psName) => {\n        const font = await fonts.fromPostscriptName(psName);\n        if (font) { fontCache.set(psName, font) }\n        else { console.warn(\\`Font \\${psName} couldn't be loaded.\\`) }\n      })\n    );\n  }\n\n  // APIs to be exposed to the UI runtime\n  const docApi = {\n    // Creates a text node in the current document\n    createTextNode: (text) => {\n      try {\n        // Find the current page\n        let currentNode = editor.context.insertionParent;\n        let page = null;\n        while (currentNode) {\n          if (currentNode.type === \"Page\") {\n            page = currentNode; break;\n          }\n          currentNode = currentNode.parent;\n        }\n\n        // Create a new text node\n        const textNode = editor.createText(text);\n        console.log(\"textNode created\", text);\n\n        // Set the text content\n        textNode.textAlignment = constants.TextAlignment.left;\n        const artboard = page.artboards.first;\n        textNode.layout = {\n          type: constants.TextLayout.autoHeight,\n          width: artboard.width - MD_CONSTANTS.LAYOUT.MARGIN_WIDTH,\n        };\n        console.log(\"textNode layout\", textNode.layout);\n\n        // Position the text at the top-left corner and fill the page width\n        textNode.setPositionInParent(\n          { x: MD_CONSTANTS.LAYOUT.MARGIN, y: MD_CONSTANTS.LAYOUT.MARGIN },\n          { x: 0, y: 0 }\n        );\n\n        console.log(\"textNode setPositionInParent\");\n\n        // Apply default character styles\n        textNode.fullContent.applyCharacterStyles({\n          fontSize: MD_CONSTANTS.LAYOUT.DEFAULT_FONT_SIZE,\n        });\n        console.log(\"textNode applyCharacterStyles\");\n\n        // Add to document\n        artboard.children.append(textNode);\n        console.log(\"textNode added to the artboard\", textNode);\n        return textNode;\n\n      } catch (error) {\n        console.error(\"Error creating text node:\", error);\n        throw error;\n      }\n    },\n\n    // Creates a styled text node from markdown content\n    createStyledTextFromMarkdown: async (markdownText, styleRanges) => {\n      try {\n        // Create text node first (this is allowed synchronously)\n        const textNode = docApi.createTextNode(markdownText);\n\n        // Preload fonts we'll need for styling\n        await preloadFonts([\n          MD_STYLES.FONTS.HEADING, MD_STYLES.FONTS.EMPHASIS,\n          MD_STYLES.FONTS.REGULAR, MD_STYLES.FONTS.CODE,\n        ]);\n\n        // Get cached fonts\n        const headingFont = fontCache.get(MD_STYLES.FONTS.HEADING);\n        const italicFont = fontCache.get(MD_STYLES.FONTS.EMPHASIS);\n        const boldFont = fontCache.get(MD_STYLES.FONTS.STRONG);\n        const monospaceFont = fontCache.get(MD_STYLES.FONTS.CODE);\n\n        // Now queue all style edits together for better performance\n        await editor.queueAsyncEdit(async () => {\n          for (const range of styleRanges) {\n            if (DEBUG_STYLES) {\n              console.log(\\`Applying \\${range.style.type} style:\\`, range);\n            }\n            // Apply different styles based on the type\n            if (range.style.type === \"list\") {\n              docApi.applyListStyle(\n                textNode, range.start, range.end, range.style.ordered\n              );\n            } else if (range.style.type === \"heading\") {\n              if (DEBUG_STYLES) {\n                console.log(\n                  \"Applying heading style for level:\", range.style.level\n                );\n              }\n              // Apply heading styles\n              textNode.fullContent.applyCharacterStyles(\n                {\n                  font: headingFont,\n                  fontSize: getFontSizeForHeadingLevel(range.style.level),\n                },\n                { start: range.start, length: range.end - range.start }\n              );\n              if (DEBUG_STYLES) {\n                console.log(\"Applied heading style:\", range.style.level);\n              }\n            } else if (range.style.type === \"emphasis\") {\n              if (DEBUG_STYLES) {\n                console.log(\"Applying emphasis style\");\n              }\n              // Apply italic style\n              textNode.fullContent.applyCharacterStyles(\n                { font: italicFont },\n                { start: range.start, length: range.end - range.start }\n              );\n              if (DEBUG_STYLES) {\n                console.log(\"Applied emphasis style\");\n              }\n            } else if (range.style.type === \"strong\") {\n              if (DEBUG_STYLES) {\n                console.log(\"Applying strong style\");\n              }\n              // Apply bold style\n              textNode.fullContent.applyCharacterStyles(\n                { font: boldFont },\n                { start: range.start, length: range.end - range.start }\n              );\n              if (DEBUG_STYLES) {\n                console.log(\"Applied strong style\");\n              }\n            } else if (range.style.type === \"code\") {\n              if (DEBUG_STYLES) {\n                console.log(\"Applying code style\");\n              }\n              // Apply monospace font for code\n              textNode.fullContent.applyCharacterStyles(\n                { font: monospaceFont },\n                { start: range.start, length: range.end - range.start }\n              );\n              if (DEBUG_STYLES) {\n                console.log(\"Applied code style\");\n              }\n            }\n            // Add any additional styles here...\n          }\n          console.log(\"All styles applied\");\n        });\n      } catch (error) {\n        console.error(\"Error creating styled text from markdown:\", error);\n        throw error;\n      }\n    },\n\n    // Applies ordered or unordered list styles to a text range\n    applyListStyle: (textNode, start, end, ordered) => {\n      try {\n        const listType = ordered\n          ? constants.ParagraphListType.ordered\n          : constants.ParagraphListType.unordered;\n\n        textNode.fullContent.applyParagraphStyles(\n          {\n            list: {\n              type: listType,\n              numbering: ordered\n                ? constants.OrderedListNumbering.numeric\n                : undefined,\n              prefix: ordered\n                ? MD_STYLES.LIST.ORDERED_PREFIX\n                : MD_STYLES.LIST.UNORDERED_PREFIX,\n              postfix: ordered\n                ? MD_STYLES.LIST.ORDERED_POSTFIX\n                : MD_STYLES.LIST.UNORDERED_POSTFIX,\n              indentLevel: MD_STYLES.LIST.DEFAULT_INDENT,\n            },\n            spaceBefore: MD_STYLES.LAYOUT.PARAGRAPH_SPACE_BEFORE,\n            spaceAfter: MD_STYLES.LAYOUT.PARAGRAPH_SPACE_AFTER,\n            lineSpacing: MD_STYLES.LAYOUT.LINE_SPACING,\n          },\n          { start, length: end - start }\n        );\n      } catch (error) {\n        console.error(\"Error applying list style:\", error);\n        throw error;\n      }\n    },\n  };\n  runtime.exposeApi(docApi);\n}\nstart();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"44-put-it-all-together\"\n    }}>{`4.4 Put it all together`}</h3>\n    <p>{`We have all the pieces in place: the file handler, the parser, the formatter, and the sandbox styler. Now let's connect them all.`}</p>\n    <p>{`First, add the necessary imports to the top of `}<inlineCode parentName=\"p\">{`src/ui/file-handler.js`}</inlineCode>{`. Then, update the `}<inlineCode parentName=\"p\">{`parseMarkdownAndInsert`}</inlineCode>{` function for the final time. This version will no longer just log the AST, but will call the formatter and the sandbox to render the styled text in the document.`}</p>\n    <p>{`This final change `}<strong parentName=\"p\">{`connects all the pieces`}</strong>{` of our application:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`parseMarkdownAndInsert`}</inlineCode>{` function now implements our complete workflow:`}\n        <ol parentName=\"li\">\n          <li parentName=\"ol\">{`It calls the `}<inlineCode parentName=\"li\">{`parseMarkdown()`}</inlineCode>{` function to get the AST.`}</li>\n          <li parentName=\"ol\">{`It passes the AST to `}<inlineCode parentName=\"li\">{`createExpressStylingFromAST()`}</inlineCode>{` to get the plain text and the list of style ranges.`}</li>\n          <li parentName=\"ol\">{`It sends this data to the document sandbox using `}<inlineCode parentName=\"li\">{`sandboxProxy.createStyledTextFromMarkdown()`}</inlineCode>{`.`}</li>\n        </ol>\n      </li>\n      <li parentName=\"ul\">{`The use of a `}<inlineCode parentName=\"li\">{`DEBUG`}</inlineCode>{` flag from our constants file is a convenient way to toggle console logging for the intermediate `}<inlineCode parentName=\"li\">{`plainText`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`styleRanges`}</inlineCode>{`, which is very helpful during development.`}</li>\n    </ul>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"JavaScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"uifile-handlerjs-2\"\n    }}>{`ui/file-handler.js`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { parseMarkdown } from \"./markdown-parser.js\";\nimport {                                                  // 👈\n  createExpressStylingFromAST                             // 👈\n} from \"./adobe-express-formatter.js\";                    // 👈\n\nexport default function setupFileHandler(sandboxProxy) {\n  customElements.whenDefined(\"sp-dropzone\").then(() => {\n\n    // 👆 (keep the rest of the file the same) 👆\n\n    const parseMarkdownAndInsert = async () => {\n      if (!markdownContent) {\n        console.error(\"No markdown content to parse\");\n        return;\n      }\n\n      try {\n        progressCircle.style.display = \"block\";\n        message.heading = \"Processing markdown...\";\n        parseButton.disabled = true;\n\n        // 1. Parse the markdown to get the AST\n        const ast = await parseMarkdown(markdownContent);\n\n        // 2. Create styling instructions from the AST     // 👈\n        const { plainText, styleRanges } =                 // 👈\n          createExpressStylingFromAST(ast);                // 👈\n\n        // 3. Send the text and styles to the sandbox      // 👈\n        message.heading = \"Adding text to document...\";    // 👈\n        await sandboxProxy.createStyledTextFromMarkdown(   // 👈\n          plainText, styleRanges                           // 👈\n        );                                                 // 👈\n\n        message.heading = \"Markdown successfully added!\";\n      } catch (error) {\n        console.error(\"Error during parsing and styling:\", error);\n        message.heading = \"An error occurred\";\n      } finally {\n        progressCircle.style.display = \"none\";\n        parseButton.disabled = false;\n      }\n    };\n\n    // 👇 (keep the rest of the file the same) 👇\n\n  });\n}\n`}</code></pre>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"57.50000000000001%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/express-add-ons-docs/static/f52e8ae7d976c568e717d13a89ef5793/5530d/markdown--text-api.webp 320w\", \"/express-add-ons-docs/static/f52e8ae7d976c568e717d13a89ef5793/0c8fb/markdown--text-api.webp 640w\", \"/express-add-ons-docs/static/f52e8ae7d976c568e717d13a89ef5793/94b1e/markdown--text-api.webp 1280w\", \"/express-add-ons-docs/static/f52e8ae7d976c568e717d13a89ef5793/0b34d/markdown--text-api.webp 1920w\", \"/express-add-ons-docs/static/f52e8ae7d976c568e717d13a89ef5793/f3963/markdown--text-api.webp 2500w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/express-add-ons-docs/static/f52e8ae7d976c568e717d13a89ef5793/dd4a7/markdown--text-api.png 320w\", \"/express-add-ons-docs/static/f52e8ae7d976c568e717d13a89ef5793/0f09e/markdown--text-api.png 640w\", \"/express-add-ons-docs/static/f52e8ae7d976c568e717d13a89ef5793/bbbf7/markdown--text-api.png 1280w\", \"/express-add-ons-docs/static/f52e8ae7d976c568e717d13a89ef5793/ac7a9/markdown--text-api.png 1920w\", \"/express-add-ons-docs/static/f52e8ae7d976c568e717d13a89ef5793/6482f/markdown--text-api.png 2500w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/express-add-ons-docs/static/f52e8ae7d976c568e717d13a89ef5793/bbbf7/markdown--text-api.png\",\n            \"alt\": \"Markdown Parser with Text API\",\n            \"title\": \"Markdown Parser with Text API\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <h2 {...{\n      \"id\": \"5-conclusion\"\n    }}>{`5. Conclusion`}</h2>\n    <p>{`Congratulations! You have successfully built a functional Markdown Parser add-on for Adobe Express. You've learned how to:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Structure a complex add-on project.`}</li>\n      <li parentName=\"ul\">{`Build a user-friendly UI with Spectrum Web Components for file handling.`}</li>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`unified`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`remark`}</inlineCode>{` to parse Markdown into an Abstract Syntax Tree.`}</li>\n      <li parentName=\"ul\">{`Develop a strategy to translate an AST into styling information.`}</li>\n      <li parentName=\"ul\">{`Leverage the powerful Adobe Express Text API to apply character and paragraph styles, manage fonts, and create rich text content programmatically.`}</li>\n    </ul>\n    <p>{`This project serves as a strong foundation. You can extend it by supporting more Markdown features like tables, blockquotes, or even custom styling options for your users. Happy coding!`}</p>\n    <h3 {...{\n      \"id\": \"51-final-code\"\n    }}>{`5.1 Final code`}</h3>\n    <p>{`You can find the final code for this tutorial in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/express-add-on-samples/tree/main/document-sandbox-samples/express-markdown-parser-addon/\"\n      }}>{`GitHub add-on samples repository`}</a>{`; there are two folders:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`markdown-parser-add-on-start`}</inlineCode>{` is the starting point for the tutorial as described `}<a parentName=\"li\" {...{\n          \"href\": \"#12-initial-code\"\n        }}>{`here`}</a>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`markdown-parser-add-on-end`}</inlineCode>{` is the final code for the add-on.`}</li>\n    </ul>\n    <CodeBlock slots=\"heading, code\" repeat=\"8\" languages=\"index.html, styles.css, index.js, file-handler.js, markdown-parser.js, adobe-express-formatter.js, code.js, constants.js\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"iframe\"\n    }}>{`iframe`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!-- index.html -->\n\n <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>Markdown Parser add-on</title>\n  <link rel=\"stylesheet\" href=\"styles.css\"/>\n</head>\n\n<body>\n  <sp-theme scale=\"medium\" color=\"light\" system=\"express\">\n    <h2>Markdown Parser</h2>\n    <div class=\"row\">\n      <sp-dropzone tabindex=\"0\" id=\"dropzone\" drop-effect=\"copy\">\n        <sp-illustrated-message id=\"message\"\n          style=\"--mod-illustrated-message-display: flex;\"\n          heading=\"Drag and drop your file\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 150 103\"\n               width=\"150\" height=\"103\">\n            <path\n              d=\"M133.7,8.5h-118c-1.9,0-3.5,1.6-3.5,3.5v27c0,0.8,0.7,1.5,1.5,1.5s1.5-0.7,1.5-1.5V23.5h119V92c0,0.3-0.2,0.5-0.5,0.5h-118c-0.3,0-0.5-0.2-0.5-0.5V69c0-0.8-0.7-1.5-1.5-1.5s-1.5,0.7-1.5,1.5v23c0,1.9,1.6,3.5,3.5,3.5h118c1.9,0,3.5-1.6,3.5-3.5V12C137.2,10.1,135.6,8.5,133.7,8.5z M15.2,21.5V12c0-0.3,0.2-0.5,0.5-0.5h118c0.3,0,0.5,0.2,0.5,0.5v9.5H15.2z M32.6,16.5c0,0.6-0.4,1-1,1h-10c-0.6,0-1-0.4-1-1s0.4-1,1-1h10C32.2,15.5,32.6,15.9,32.6,16.5z M13.6,56.1l-8.6,8.5C4.8,65,4.4,65.1,4,65.1c-0.4,0-0.8-0.1-1.1-0.4c-0.6-0.6-0.6-1.5,0-2.1l8.6-8.5l-8.6-8.5c-0.6-0.6-0.6-1.5,0-2.1c0.6-0.6,1.5-0.6,2.1,0l8.6,8.5l8.6-8.5c0.6-0.6,1.5-0.6,2.1,0c0.6,0.6,0.6,1.5,0,2.1L15.8,54l8.6,8.5c0.6,0.6,0.6,1.5,0,2.1c-0.3,0.3-0.7,0.4-1.1,0.4c-0.4,0-0.8-0.1-1.1-0.4L13.6,56.1z\">\n            </path>\n          </svg>\n        </sp-illustrated-message>\n        <div>\n          <label for=\"file-input\">\n            <sp-link href=\"#\"\n              onclick=\"document.getElementById('file-input').click()\">\n              Select a Markdown File\n            </sp-link>\n            from your computer\n          </label>\n          <input type=\"file\" id=\"file-input\" style=\"display: none\" />\n        </div>\n      </sp-dropzone>\n    </div>\n\n    <div class=\"row button-row\">\n      <sp-button id=\"parseButton\" variant=\"accent\" disabled>\n        Parse Markdown\n      </sp-button>\n      <sp-progress-circle size=\"s\" indeterminate id=\"progress-circle\">\n      </sp-progress-circle>\n    </div>\n\n    <div class=\"row info-text\">\n      <p>\n        Parses Markdown and creates styled text in your Adobe Express\n        document. Supported formats: Headings, Bold, Italic, and Lists.\n      </p>\n    </div>\n  </sp-theme>\n</body>\n</html>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"iframe-1\"\n    }}>{`iframe`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`/* styles.css */\nbody { margin: 0; padding: 0; overflow-x: hidden; }\n\nsp-theme {\n  margin: 0 var(--spectrum-global-dimension-static-size-300);\n  display: grid;\n}\n\nh2 { font-weight: var(--spectrum-global-font-weight-black); }\n\nsp-button { flex: 1; }\n\nsp-dropzone { max-width: 272px; }\n\nsp-progress-circle { margin-left: 10px; }\n\n.row {\n  display: flex; flex-direction: row; justify-content: space-between;\n  width: 100%; align-items: flex-end;\n}\n\n.button-row {\n  margin-top: 20px; display: flex; align-items: center;\n  justify-content: center;\n}\n\n.gap-20 { gap: var(--spectrum-global-dimension-static-size-250); }\n\n.gutter-row {\n  display: flex; flex-direction: row; justify-content: flex-end;\n  align-items: flex-start; border: 1px solid black; width: 100%;\n  margin-bottom: var(--spectrum-global-dimension-static-size-150);\n}\n\n.info-text { margin-top: 10px; font-size: 12px; color: #6e6e6e; }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"iframe-2\"\n    }}>{`iframe`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// ui/index.js\n\nimport \"@spectrum-web-components/styles/typography.css\";\n\nimport \"@spectrum-web-components/theme/src/themes.js\";\nimport \"@spectrum-web-components/theme/theme-light.js\";\nimport \"@spectrum-web-components/theme/express/theme-light.js\";\nimport \"@spectrum-web-components/theme/express/scale-medium.js\";\nimport \"@spectrum-web-components/theme/sp-theme.js\";\n\nimport \"@spectrum-web-components/button/sp-button.js\";\nimport \"@spectrum-web-components/link/sp-link.js\";\nimport \"@spectrum-web-components/illustrated-message/sp-illustrated-message.js\";\nimport \"@spectrum-web-components/dropzone/sp-dropzone.js\";\nimport \"@spectrum-web-components/progress-circle/sp-progress-circle.js\";\n\nimport addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\nimport setupFileHandler from \"./file-handler.js\";\n\naddOnUISdk.ready.then(async () => {\n  console.log(\"addOnUISdk is ready for use.\");\n\n  // Get the Authoring Sandbox\n  const { runtime } = addOnUISdk.instance;\n  const sandboxProxy = await runtime.apiProxy(\"documentSandbox\");\n  setupFileHandler(sandboxProxy);\n});\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"iframe-3\"\n    }}>{`iframe`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// ui/file-handler.js\n\nimport { parseMarkdown } from \"./markdown-parser.js\"; // Already there\nimport { createExpressStylingFromAST } from \"./adobe-express-formatter.js\";\n\nexport default function setupFileHandler(sandboxProxy) {\n  customElements.whenDefined(\"sp-dropzone\").then(() => {\n    const dropzone = document.getElementById(\"dropzone\");\n    const parseButton = document.getElementById(\"parseButton\");\n    const message = document.getElementById(\"message\");\n    const fileInput = document.getElementById(\"file-input\");\n    const progressCircle = document.getElementById(\"progress-circle\");\n    let input;\n    let beingDraggedOver = false;\n    let markdownContent = null;\n\n    // Hide progress initially\n    if (progressCircle) { progressCircle.style.display = \"none\" }\n\n    const isMarkdownFile = (file) => {\n      return (\n        file.name.toLowerCase().endsWith(\".md\") ||\n        file.type === \"text/markdown\"\n      );\n    };\n\n    const updateMessage = () => {\n      message.heading =\n        input !== undefined\n          ? beingDraggedOver\n            ? \"Drop here to replace!\"\n            : \"Got it!\"\n          : \"Drag and drop your file\";\n    };\n\n    const handleDropOrChange = (event) => {\n      let file;\n\n      // Handle different event sources\n      if (event.type === \"drop\") {\n        file = event.dataTransfer.files[0];\n      } else if (event.type === \"change\") {\n        file = event.target.files[0];\n      } else if (event.detail && event.detail.dropEvent) {\n        // Handle sp-dropzone-drop event\n        file = event.detail.dropEvent.dataTransfer.files[0];\n      }\n      if (!file) {\n        console.error(\"No file found in the event\"); return;\n      }\n      if (!isMarkdownFile(file)) {\n        message.heading = \"Please drop a markdown (.md) file\"; return;\n      }\n\n      // Set input to a temporary value to show \"Got it!\" immediately\n      input = \"loading\";\n      dropzone.setAttribute(\"filled\", true);\n      beingDraggedOver = false;\n      updateMessage();\n\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const content = e.target.result;\n        input = content;\n        markdownContent = content;\n        console.log(\"Markdown content:\", content);\n        // Enable parse button now that we have content\n        parseButton.disabled = false;\n        // Ensure message is updated after content is loaded\n        updateMessage();\n      };\n      reader.readAsText(file);\n    };\n\n    const parseMarkdownAndInsert = async () => {\n      if (!markdownContent) {\n        console.error(\"No markdown content to parse\");\n        return;\n      }\n\n      try {\n        progressCircle.style.display = \"block\";\n        message.heading = \"Processing markdown...\";\n        parseButton.disabled = true;\n\n        // 1. Parse the markdown to get the AST\n        const ast = await parseMarkdown(markdownContent);\n\n        // 2. Create styling instructions from the AST\n        const {\n          plainText, styleRanges\n        } = createExpressStylingFromAST(ast);\n        // 3. Send the text and styles to the sandbox\n        message.heading = \"Adding text to document...\";\n        await sandboxProxy.createStyledTextFromMarkdown(\n          plainText, styleRanges\n        );\n\n        message.heading = \"Markdown successfully added!\";\n      } catch (error) {\n        console.error(\"Error during parsing and styling:\", error);\n        message.heading = \"An error occurred\";\n      } finally {\n        progressCircle.style.display = \"none\";\n        parseButton.disabled = false;\n      }\n    };\n\n    // Event listeners\n    dropzone.addEventListener(\"dragover\", (event) => {\n      event.preventDefault();\n      beingDraggedOver = true;\n      updateMessage();\n    });\n    dropzone.addEventListener(\"dragleave\", () => {\n      beingDraggedOver = false;\n      updateMessage();\n    });\n    dropzone.addEventListener(\"drop\", (event) => {\n      event.preventDefault();\n      handleDropOrChange(event);\n    });\n    // Also listen for the Spectrum Web Component's native event\n    dropzone.addEventListener(\"sp-dropzone-drop\", (event) => {\n      event.preventDefault();\n      handleDropOrChange(event);\n    });\n    fileInput.addEventListener(\"change\", (event) => {\n      handleDropOrChange(event);\n    });\n\n    // Parse button click handler\n    parseButton.addEventListener(\"click\", parseMarkdownAndInsert);\n    // Initially disable parse button until we have content\n    parseButton.disabled = true;\n  });\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"iframe-4\"\n    }}>{`iframe`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// ui/markdown-parser.js\n\nimport { unified } from \"unified\";\nimport remarkParse from \"remark-parse\";\nimport remarkStringify from \"remark-stringify\";\nimport { toString } from \"mdast-util-to-string\";\n\n// Parse markdown content into an abstract syntax tree (AST)\nexport async function parseMarkdown(markdownContent) {\n  try {\n    // Create a unified processor with remark-parse\n    const processor = unified().use(remarkParse);\n    // Parse the markdown content into an AST\n    const ast = processor.parse(markdownContent);\n    // Run any transformations needed\n    const result = await processor.run(ast);\n    return result;\n  } catch (e) {\n    console.error(\"Error parsing markdown in markdown-parser.js:\", e);\n    throw e;\n  }\n}\n\n// Replace multiple consecutive spaces, tabs,\n// and newlines with a single space\nfunction cleanText(text) { return text.replace(/\\\\s+/g, \" \").trim() }\n\n// Get properly formatted text from the AST\nexport function getFormattedText(ast) {\n  let text = \"\";\n\n  // Process nodes to create proper paragraph breaks\n  const processNode = (node) => {\n    if (!node) return \"\";\n    if (node.type === \"root\") {\n      // Process each child node\n      node.children.forEach((child, index) => {\n        const childText = processNode(child);\n        text += childText;\n        // Add paragraph breaks between block elements\n        if (\n          index < node.children.length - 1 &&\n          [\"paragraph\", \"heading\", \"list\"].includes(child.type)\n        ) {  text += \"\\\\n\\\\n\" }\n      });\n      return text;\n    }\n\n    // Handle specific node types\n    switch (node.type) {\n      case \"paragraph\": return cleanText(toString(node));\n      case \"heading\":   return cleanText(toString(node));\n      case \"list\":\n        let listText = \"\";\n        node.children.forEach((item, index) => {\n          // const marker = node.ordered ? \\`\\${index + 1}. \\` : \"• \";\n          const itemText = cleanText(toString(item));\n          // listText += marker + itemText;\n          listText += itemText;\n          if (index < node.children.length - 1) { listText += \"\\\\n\" }\n        });\n        return listText;\n      default:\n        // For other node types, just return the text\n        return cleanText(toString(node));\n    }\n  };\n  return processNode(ast);\n}\n\n// Convert AST back to markdown string (for testing/debugging)\nexport async function astToMarkdown(ast) {\n  try {\n    const processor = unified().use(remarkStringify);\n    const result = processor.stringify(ast);\n    return result;\n  } catch (e) {\n    console.error(\"Error converting AST to markdown:\", e);\n    throw e;\n  }\n}\n\n// Extract plain text from the AST\nexport function extractTextFromAst(ast) { return toString(ast) }\n\n// Process markdown by parsing to AST + transforming for Adobe Express\nexport async function processMarkdown(markdownContent) {\n\n  const ast = await parseMarkdown(markdownContent);\n  // Extract all headings for potential TOC\n  const headings = [];\n  const processNode = (node) => {\n    if (node.type === \"heading\") {\n      headings.push({\n        depth: node.depth, text: toString(node),\n        children: node.children\n      });\n    }\n    if (node.children) { node.children.forEach(processNode) }\n  }\n  processNode(ast);\n\n  // Get both formatted text (with proper paragraphs) and raw text\n  const formattedText = getFormattedText(ast);\n\n  return { ast, headings, plainText: formattedText, formattedText }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"iframe-5\"\n    }}>{`iframe`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// ui/adobe-express-formatter.js\n\nimport { getFormattedText, extractTextFromAst } from \"./markdown-parser.js\";\n\n// Creates a mapping of text ranges and their styling commands for Adobe Express\nfunction processNodeForStyling(ast, styleRanges) {\n  let offset = 0;\n\n  const traverse = (node) => {\n    if (!node) return;\n\n    const startOffset = offset;\n    // Helper function to process styled nodes with common pattern\n    const processStyledNode = (node, styleType, styleProps = {}) => {\n      const rangeStart = offset;\n      node.children.forEach(traverse);\n      const rangeEnd = offset;\n\n      styleRanges.push({\n        start: rangeStart,\n        end: rangeEnd,\n        style: { type: styleType, ...styleProps },\n      });\n    };\n\n    switch (node.type) {\n      case \"root\":\n        node.children.forEach((child, index) => {\n          traverse(child);\n          if (\n            index < node.children.length - 1 &&\n            [\"paragraph\", \"heading\", \"list\"].includes(child.type)\n          ) {\n            offset += 2; // \\\\n\\\\n between blocks\n          }\n        });\n        break;\n\n      case \"paragraph\":\n        node.children.forEach(traverse);\n        break;\n\n      case \"heading\":\n        processStyledNode(node, \"heading\", { level: node.depth });\n        break;\n\n      case \"text\":\n        offset += node.value.length;\n        break;\n\n      case \"emphasis\":\n        processStyledNode(node, \"emphasis\", { italic: true });\n        break;\n\n      case \"strong\":\n        processStyledNode(node, \"strong\", { bold: true });\n        break;\n\n      // example AST traversal logic for lists:\n      case \"list\":\n        const listStart = offset;\n        node.children.forEach((item, index) => {\n          item.children.forEach(traverse);\n          if (index < node.children.length - 1) offset += 1; // newline between items\n        });\n\n        styleRanges.push({\n          start: listStart,\n          end: offset,\n          style: { type: \"list\", ordered: node.ordered },\n        });\n        break;\n\n      case \"inlineCode\":\n        offset += node.value.length;\n        styleRanges.push({\n          start: startOffset,\n          end: offset,\n          style: { type: \"code\", isInline: true },\n        });\n        break;\n\n      default:\n        if (node.children) node.children.forEach(traverse);\n        break;\n    }\n  };\n  traverse(ast);\n}\n\n// Create Adobe Express text styling instructions from a markdown AST\nexport function createExpressStylingFromAST(ast) {\n  // Extract the full text from the AST\n  const plainText = getFormattedText(ast);\n  const styleRanges = [];\n\n  // Process the AST to generate style ranges\n  processNodeForStyling(ast, styleRanges, plainText);\n\n  return { plainText, styleRanges };\n}\n\n// Helper function to print out style ranges for debugging\nexport function debugStyleRanges(text, styleRanges) {\n  console.log(\"---- Style Ranges Debug ----\");\n  styleRanges.forEach((range, index) => {\n    const snippet = text.substring(range.start, range.end);\n    console.log(\n      \\`Range \\${index}: \\${range.start}-\\${range.end} (\\${range.style.type})\\`\n    );\n    console.log(\\`Text: \"\\${snippet}\"\\`);\n    console.log(\"Style:\", range.style);\n    console.log(\"-----\");\n  });\n}\n\n// Helper function to apply Adobe Express text styling\nexport async function applyExpressTextStyling(sandboxProxy, text, styleRanges) {\n  try {\n    // First create a text node with the plain text\n    const textNode = await sandboxProxy.createTextNode(text);\n\n    // Then apply styling to the text node\n    for (const range of styleRanges) {\n      switch (range.style.type) {\n        case \"heading\":\n          await sandboxProxy.applyHeadingStyle(\n            textNode,\n            range.start,\n            range.end,\n            range.style.level\n          );\n          break;\n\n        case \"emphasis\":\n          await sandboxProxy.applyTextStyle(textNode, range.start, range.end, {\n            italic: true,\n          });\n          break;\n\n        case \"strong\":\n          await sandboxProxy.applyTextStyle(textNode, range.start, range.end, {\n            bold: true,\n          });\n          break;\n\n        case \"link\":\n          await sandboxProxy.applyLinkStyle(\n            textNode,\n            range.start,\n            range.end,\n            range.style.url\n          );\n          break;\n\n        // You can add cases for other styles here...\n      }\n    }\n    return textNode;\n  } catch (error) {\n    console.error(\"Error applying Express text styling:\", error);\n    throw error;\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"document-api\"\n    }}>{`Document API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// sandbox/code.js\n\nimport addOnSandboxSdk from \"add-on-sdk-document-sandbox\";\nimport { editor, fonts, constants } from \"express-document-sdk\";\nimport { MD_CONSTANTS } from \"./constants.js\";\n\nconst { runtime } = addOnSandboxSdk.instance;\nconst DEBUG_STYLES = MD_CONSTANTS.DEBUG;\n\n// Returns the font size for a specific markdown heading level\nfunction getFontSizeForHeadingLevel(level) {\n  return (\n    MD_CONSTANTS.HEADING_SIZES[level] || MD_CONSTANTS.HEADING_SIZES.DEFAULT\n  );\n}\n\n// Initializes the document sandbox functionality\nfunction start() {\n  // Cache loaded fonts to avoid reloading them\n  const fontCache = new Map();\n\n  // Preloads and caches fonts by their postscript names\n  async function preloadFonts(postscriptNames) {\n    await Promise.all(\n      postscriptNames.map(async (psName) => {\n        const font = await fonts.fromPostscriptName(psName);\n        if (font) {\n          fontCache.set(psName, font);\n        } else {\n          console.warn(\\`Font \\${psName} couldn't be loaded.\\`);\n        }\n      })\n    );\n  }\n\n  // APIs to be exposed to the UI runtime\n  const docApi = {\n    // Creates a text node in the current document\n    createTextNode: (text) => {\n      try {\n        // Find the current page\n        let currentNode = editor.context.insertionParent;\n        let page = null;\n        while (currentNode) {\n          if (currentNode.type === \"Page\") {\n            page = currentNode;\n            break;\n          }\n          currentNode = currentNode.parent;\n        }\n\n        // Create a new text node\n        const textNode = editor.createText(text);\n        console.log(\"textNode created\", text);\n\n        // Set the text content\n        textNode.textAlignment = constants.TextAlignment.left;\n        const artboard = page.artboards.first;\n        console.log(\n          \"constants.TextLayout.autoHeight\",\n          constants.TextLayout.autoHeight\n        );\n        textNode.layout = {\n          type: constants.TextLayout.autoHeight,\n          width: artboard.width - MD_CONSTANTS.LAYOUT.MARGIN_WIDTH,\n        };\n        console.log(\"textNode layout\", textNode.layout);\n\n        // Position the text at the top-left corner and fill the page width\n        textNode.setPositionInParent(\n          { x: MD_CONSTANTS.LAYOUT.MARGIN, y: MD_CONSTANTS.LAYOUT.MARGIN },\n          { x: 0, y: 0 }\n        );\n\n        console.log(\"textNode setPositionInParent\");\n\n        // Apply default character styles\n        textNode.fullContent.applyCharacterStyles({\n          fontSize: MD_CONSTANTS.LAYOUT.DEFAULT_FONT_SIZE,\n        });\n        console.log(\"textNode applyCharacterStyles\");\n\n        // Add to document\n        artboard.children.append(textNode);\n        console.log(\"textNode added to the artboard\", textNode);\n        return textNode;\n      } catch (error) {\n        console.error(\"Error creating text node:\", error);\n        throw error;\n      }\n    },\n\n    // Creates a styled text node from markdown content\n    createStyledTextFromMarkdown: async (markdownText, styleRanges) => {\n      try {\n        // Create text node first (this is allowed synchronously)\n        const textNode = docApi.createTextNode(markdownText);\n\n        // Preload fonts we'll need for styling\n        await preloadFonts([\n          MD_CONSTANTS.FONTS.HEADING,\n          MD_CONSTANTS.FONTS.EMPHASIS,\n          MD_CONSTANTS.FONTS.REGULAR,\n          MD_CONSTANTS.FONTS.CODE,\n        ]);\n\n        // Get cached fonts\n        const headingFont = fontCache.get(MD_CONSTANTS.FONTS.HEADING);\n        const italicFont = fontCache.get(MD_CONSTANTS.FONTS.EMPHASIS);\n        const boldFont = fontCache.get(MD_CONSTANTS.FONTS.STRONG);\n        const monospaceFont = fontCache.get(MD_CONSTANTS.FONTS.CODE);\n\n        // Now queue all style edits together for better performance\n        await editor.queueAsyncEdit(async () => {\n          for (const range of styleRanges) {\n            if (DEBUG_STYLES) {\n              console.log(\\`Applying \\${range.style.type} style:\\`, range);\n            }\n            // Apply different styles based on the type\n            if (range.style.type === \"list\") {\n              docApi.applyListStyle(\n                textNode,\n                range.start,\n                range.end,\n                range.style.ordered\n              );\n            } else if (range.style.type === \"heading\") {\n              if (DEBUG_STYLES) {\n                console.log(\n                  \"Applying heading style for level:\",\n                  range.style.level\n                );\n              }\n              // Apply heading styles\n              textNode.fullContent.applyCharacterStyles(\n                {\n                  font: headingFont,\n                  fontSize: getFontSizeForHeadingLevel(range.style.level),\n                },\n                { start: range.start, length: range.end - range.start }\n              );\n              if (DEBUG_STYLES) {\n                console.log(\"Applied heading style:\", range.style.level);\n              }\n            } else if (range.style.type === \"emphasis\") {\n              if (DEBUG_STYLES) {\n                console.log(\"Applying emphasis style\");\n              }\n              // Apply italic style\n              textNode.fullContent.applyCharacterStyles(\n                { font: italicFont },\n                { start: range.start, length: range.end - range.start }\n              );\n              if (DEBUG_STYLES) {\n                console.log(\"Applied emphasis style\");\n              }\n            } else if (range.style.type === \"strong\") {\n              if (DEBUG_STYLES) {\n                console.log(\"Applying strong style\");\n              }\n              // Apply bold style\n              textNode.fullContent.applyCharacterStyles(\n                { font: boldFont },\n                { start: range.start, length: range.end - range.start }\n              );\n              if (DEBUG_STYLES) {\n                console.log(\"Applied strong style\");\n              }\n            } else if (range.style.type === \"code\") {\n              if (DEBUG_STYLES) {\n                console.log(\"Applying code style\");\n              }\n              // Apply monospace font for code\n              textNode.fullContent.applyCharacterStyles(\n                { font: monospaceFont },\n                { start: range.start, length: range.end - range.start }\n              );\n              if (DEBUG_STYLES) {\n                console.log(\"Applied code style\");\n              }\n            }\n            // Add any additional styles here...\n          }\n          console.log(\"All styles applied\");\n        });\n      } catch (error) {\n        console.error(\"Error creating styled text from markdown:\", error);\n        throw error;\n      }\n    },\n\n    // Applies ordered or unordered list styles to a text range\n    applyListStyle: (textNode, start, end, ordered) => {\n      try {\n        const listType = ordered\n          ? constants.ParagraphListType.ordered\n          : constants.ParagraphListType.unordered;\n\n        textNode.fullContent.applyParagraphStyles(\n          {\n            list: {\n              type: listType,\n              numbering: ordered\n                ? constants.OrderedListNumbering.numeric\n                : undefined,\n              prefix: ordered\n                ? MD_CONSTANTS.LIST.ORDERED_PREFIX\n                : MD_CONSTANTS.LIST.UNORDERED_PREFIX,\n              postfix: ordered\n                ? MD_CONSTANTS.LIST.ORDERED_POSTFIX\n                : MD_CONSTANTS.LIST.UNORDERED_POSTFIX,\n              indentLevel: MD_CONSTANTS.LIST.DEFAULT_INDENT,\n            },\n            spaceBefore: MD_CONSTANTS.LAYOUT.PARAGRAPH_SPACE_BEFORE,\n            spaceAfter: MD_CONSTANTS.LAYOUT.PARAGRAPH_SPACE_AFTER,\n            lineSpacing: MD_CONSTANTS.LAYOUT.LINE_SPACING,\n          },\n          { start, length: end - start }\n        );\n      } catch (error) {\n        console.error(\"Error applying list style:\", error);\n        throw error;\n      }\n    },\n  };\n  runtime.exposeApi(docApi);\n}\nstart();\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"document-api-1\"\n    }}>{`Document API`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// sandbox/constants.js\n\nexport const MD_CONSTANTS = {\n  // Font settings\n  FONTS: {\n    HEADING: \"SourceSans3-Bold\",\n    EMPHASIS: \"SourceSans3-It\",\n    STRONG: \"SourceSans3-Bold\",\n    CODE: \"AnonymousPro\",\n    REGULAR: \"SourceSans3-Regular\",\n  },\n\n  // Font sizes for different heading levels\n  HEADING_SIZES: {\n    1: 24,\n    2: 22,\n    3: 20,\n    4: 18,\n    5: 16,\n    6: 16,\n    DEFAULT: 16,\n  },\n\n  // Text layout settings\n  LAYOUT: {\n    MARGIN: 20,\n    DEFAULT_FONT_SIZE: 16,\n    LINE_SPACING: 1.5,\n    PARAGRAPH_SPACE_BEFORE: 8,\n    PARAGRAPH_SPACE_AFTER: 4,\n    MARGIN_WIDTH: 40,\n  },\n\n  // List styling\n  LIST: {\n    UNORDERED_PREFIX: \"•\",\n    ORDERED_PREFIX: \"\",\n    ORDERED_POSTFIX: \".\",\n    UNORDERED_POSTFIX: \"\",\n    DEFAULT_INDENT: 0,\n  },\n\n  // Debug mode\n  DEBUG: false,\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"52-next-steps\"\n    }}>{`5.2 Next steps`}</h3>\n    <p>{`If you want to learn more about Text API you can check the `}<a parentName=\"p\" {...{\n        \"href\": \"../use_text.md\"\n      }}>{`Text How-to`}</a>{`, which contains several examples on how to apply Character and Paragraph styles, as well as using fonts and colors.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","variant","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}