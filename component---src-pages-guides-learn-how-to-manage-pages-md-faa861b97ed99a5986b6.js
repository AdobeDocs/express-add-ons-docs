"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[6163],{47171:function(e,a,t){t.r(a),t.d(a,{_frontmatter:function(){return i},default:function(){return h}});var n=t(58168),o=t(80045),d=(t(88763),t(15680)),r=t(83407);const s=["components"],i={},m=e=>function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,d.mdx)("div",a)},p=m("CodeBlock"),g=m("InlineAlert"),l={_frontmatter:i},c=r.A;function h(e){let{components:a}=e,t=(0,o.A)(e,s);return(0,d.mdx)(c,(0,n.A)({},l,t,{components:a,mdxType:"MDXLayout"}),(0,d.mdx)("h1",{id:"manage-pages"},"Manage Pages"),(0,d.mdx)("p",null,"Learn how to programmatically create, access, and manage pages in Adobe Express documents using the Document API."),(0,d.mdx)("h2",{id:"understanding-pages-in-adobe-express"},"Understanding Pages in Adobe Express"),(0,d.mdx)("p",null,"In Adobe Express, documents are organized hierarchically:"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},"Document")," (root)",(0,d.mdx)("ul",{parentName:"li"},(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},"Pages")," (timeline sequence)",(0,d.mdx)("ul",{parentName:"li"},(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},"Artboards")," (scenes within a page)",(0,d.mdx)("ul",{parentName:"li"},(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},"Content")," (text, shapes, media, etc.)")))))))),(0,d.mdx)("p",null,"Every page contains at least one artboard, and all artboards within a page share the same dimensions."),(0,d.mdx)("h2",{id:"add-a-page"},"Add a Page"),(0,d.mdx)("p",null,"Use the ",(0,d.mdx)("a",{parentName:"p",href:"../../../references/document-sandbox/document-apis/classes/PageList.md#addpage"},(0,d.mdx)("inlineCode",{parentName:"a"},"editor.documentRoot.pages.addPage()"))," method to create a new page with specified dimensions."),(0,d.mdx)("h3",{id:"example-add-a-standard-page"},"Example: Add a Standard Page"),(0,d.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,d.mdx)("h4",{id:"javascript"},"JavaScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor } from "express-document-sdk";\n\n// Define page dimensions (width x height in pixels)\nconst pageGeometry = {\n  width: 1080,\n  height: 1080\n};\n\n// Add a new page with the specified dimensions\nconst newPage = editor.documentRoot.pages.addPage(pageGeometry);\n\nconsole.log("New page created:", newPage);\nconsole.log("Page dimensions:", newPage.width, "x", newPage.height);\n')),(0,d.mdx)("h4",{id:"typescript"},"TypeScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-ts"},'// sandbox/code.ts\nimport { editor, PageNode, RectangleGeometry } from "express-document-sdk";\n\n// Define page dimensions (width x height in pixels)\nconst pageGeometry: RectangleGeometry = {\n  width: 1080,\n  height: 1080\n};\n\n// Add a new page with the specified dimensions\nconst newPage: PageNode = editor.documentRoot.pages.addPage(pageGeometry);\n\nconsole.log("New page created:", newPage);\nconsole.log("Page dimensions:", newPage.width, "x", newPage.height);\n')),(0,d.mdx)(g,{slots:"text",variant:"info",mdxType:"InlineAlert"}),(0,d.mdx)("p",null,"When you call ",(0,d.mdx)("inlineCode",{parentName:"p"},"editor.documentRoot.pages.addPage()"),", the new page automatically becomes the active page and the default insertion point for new content. The viewport also switches to display the new page's artboard."),(0,d.mdx)("h3",{id:"example-add-pages-with-different-dimensions"},"Example: Add Pages with Different Dimensions"),(0,d.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,d.mdx)("h4",{id:"javascript-1"},"JavaScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor } from "express-document-sdk";\n\n// Add an Instagram post page (square)\nconst instagramPage = editor.documentRoot.pages.addPage({\n  width: 1080,\n  height: 1080\n});\n\n// Add a story page (vertical)\nconst storyPage = editor.documentRoot.pages.addPage({\n  width: 1080,\n  height: 1920\n});\n\n// Add a landscape page\nconst landscapePage = editor.documentRoot.pages.addPage({\n  width: 1920,\n  height: 1080\n});\n\nconsole.log("Created 3 pages with different dimensions");\n')),(0,d.mdx)("h4",{id:"typescript-1"},"TypeScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-ts"},'// sandbox/code.ts\nimport { editor, PageNode, RectangleGeometry } from "express-document-sdk";\n\n// Add an Instagram post page (square)\nconst instagramPage: PageNode = editor.documentRoot.pages.addPage({\n  width: 1080,\n  height: 1080\n} as RectangleGeometry);\n\n// Add a story page (vertical)\nconst storyPage: PageNode = editor.documentRoot.pages.addPage({\n  width: 1080,\n  height: 1920\n} as RectangleGeometry);\n\n// Add a landscape page\nconst landscapePage: PageNode = editor.documentRoot.pages.addPage({\n  width: 1920,\n  height: 1080\n} as RectangleGeometry);\n\nconsole.log("Created 3 pages with different dimensions");\n')),(0,d.mdx)("h2",{id:"access-pages"},"Access Pages"),(0,d.mdx)("h3",{id:"get-the-current-page"},"Get the Current Page"),(0,d.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,d.mdx)("h4",{id:"javascript-2"},"JavaScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor } from "express-document-sdk";\n\n// Get the currently active page\nconst currentPage = editor.context.currentPage;\n\nconsole.log("Current page dimensions:", currentPage.width, "x", currentPage.height);\nconsole.log("Number of artboards:", currentPage.artboards.length);\n')),(0,d.mdx)("h4",{id:"typescript-2"},"TypeScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-ts"},'// sandbox/code.js\nimport { editor, PageNode } from "express-document-sdk";\n\n// Get the currently active page\nconst currentPage: PageNode = editor.context.currentPage;\n\nconsole.log("Current page dimensions:", currentPage.width, "x", currentPage.height);\nconsole.log("Number of artboards:", currentPage.artboards.length);\n')),(0,d.mdx)("h3",{id:"access-all-pages"},"Access All Pages"),(0,d.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,d.mdx)("h4",{id:"javascript-3"},"JavaScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor } from "express-document-sdk";\n\n// Get all pages in the document\nconst allPages = editor.documentRoot.pages;\n\nconsole.log("Total pages in document:", allPages.length);\n\n// Iterate through all pages\nfor (const page of allPages) {\n  console.log(`Page dimensions: ${page.width} x ${page.height}`);\n  console.log(`Artboards in this page: ${page.artboards.length}`);\n}\n\n// Access specific pages by index\nconst firstPage = allPages[0];\nconst lastPage = allPages[allPages.length - 1];\n')),(0,d.mdx)("h4",{id:"typescript-3"},"TypeScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-ts"},'// sandbox/code.ts\nimport { editor, PageList, PageNode } from "express-document-sdk";\n\n// Get all pages in the document\nconst allPages: PageList = editor.documentRoot.pages;\n\nconsole.log("Total pages in document:", allPages.length);\n\n// Iterate through all pages\nfor (const page of allPages) {\n  console.log(`Page dimensions: ${page.width} x ${page.height}`);\n  console.log(`Artboards in this page: ${page.artboards.length}`);\n}\n\n// Access specific pages by index\nconst firstPage: PageNode = allPages[0];\nconst lastPage: PageNode = allPages[allPages.length - 1];\n')),(0,d.mdx)("h2",{id:"working-with-page-content"},"Working with Page Content"),(0,d.mdx)("h3",{id:"add-content-to-a-specific-page"},"Add Content to a Specific Page"),(0,d.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,d.mdx)("h4",{id:"javascript-4"},"JavaScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor } from "express-document-sdk";\n\n// Create a new page\nconst newPage = editor.documentRoot.pages.addPage({\n  width: 1080,\n  height: 1080\n});\n\n// The new page is automatically active, so content will be added to it\nconst textNode = editor.createText("Content on the new page!");\ntextNode.translation = { x: 100, y: 100 };\n\n// Add to the current insertion parent (the new page\'s artboard)\neditor.context.insertionParent.children.append(textNode);\n\nconsole.log("Added text to the new page");\n')),(0,d.mdx)("h4",{id:"typescript-4"},"TypeScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-ts"},'// sandbox/code.ts\nimport { editor, PageNode, StandaloneTextNode, ContainerNode } from "express-document-sdk";\n\n// Create a new page\nconst newPage: PageNode = editor.documentRoot.pages.addPage({\n  width: 1080,\n  height: 1080\n});\n\n// The new page is automatically active, so content will be added to it\nconst textNode: StandaloneTextNode = editor.createText("Content on the new page!");\ntextNode.translation = { x: 100, y: 100 };\n\n// Add to the current insertion parent (the new page\'s artboard)\nconst insertionParent: ContainerNode = editor.context.insertionParent;\ninsertionParent.children.append(textNode);\n\nconsole.log("Added text to the new page");\n')),(0,d.mdx)("h3",{id:"work-with-page-artboards"},"Work with Page Artboards"),(0,d.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,d.mdx)("h4",{id:"javascript-5"},"JavaScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor } from "express-document-sdk";\n\n// Get the current page\nconst currentPage = editor.context.currentPage;\n\n// Access the page\'s artboards\nconst artboards = currentPage.artboards;\nconsole.log("Number of artboards:", artboards.length);\n\n// Get the first (and typically only) artboard\nconst firstArtboard = artboards.first;\nconsole.log("First artboard dimensions:", firstArtboard.width, "x", firstArtboard.height);\n\n// Add content directly to a specific artboard\nconst rect = editor.createRectangle();\nrect.width = 200;\nrect.height = 200;\nrect.translation = { x: 50, y: 50 };\n\nfirstArtboard.children.append(rect);\n')),(0,d.mdx)("h4",{id:"typescript-5"},"TypeScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-ts"},'// sandbox/code.ts\nimport { editor, PageNode, ArtboardList, ArtboardNode, RectangleNode } from "express-document-sdk";\n\n// Get the current page\nconst currentPage: PageNode = editor.context.currentPage;\n\n// Access the page\'s artboards\nconst artboards: ArtboardList = currentPage.artboards;\nconsole.log("Number of artboards:", artboards.length);\n\n// Get the first (and typically only) artboard\nconst firstArtboard: ArtboardNode = artboards.first!;\nconsole.log("First artboard dimensions:", firstArtboard.width, "x", firstArtboard.height);\n\n// Add content directly to a specific artboard\nconst rect: RectangleNode = editor.createRectangle();\nrect.width = 200;\nrect.height = 200;\nrect.translation = { x: 50, y: 50 };\n\nfirstArtboard.children.append(rect);\n')),(0,d.mdx)("h2",{id:"common-patterns-and-best-practices"},"Common Patterns and Best Practices"),(0,d.mdx)("h3",{id:"page-creation-workflow"},"Page Creation Workflow"),(0,d.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,d.mdx)("h4",{id:"javascript-6"},"JavaScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor } from "express-document-sdk";\n\nfunction createTemplatePages() {\n  // Define common page sizes\n  const pageSizes = {\n    instagram: { width: 1080, height: 1080 },\n    story: { width: 1080, height: 1920 },\n    landscape: { width: 1920, height: 1080 },\n    a4: { width: 595, height: 842 }\n  };\n\n  // Create pages for each template\n  const pages = {};\n  \n  for (const [name, dimensions] of Object.entries(pageSizes)) {\n    const page = editor.documentRoot.pages.addPage(dimensions);\n    pages[name] = page;\n    \n    // Add a title to each page\n    const title = editor.createText(`${name.toUpperCase()} Template`);\n    title.translation = { x: 50, y: 50 };\n    editor.context.insertionParent.children.append(title);\n    \n    console.log(`Created ${name} page: ${dimensions.width}x${dimensions.height}`);\n  }\n\n  return pages;\n}\n\n// Create template pages\nconst templatePages = createTemplatePages();\n')),(0,d.mdx)("h4",{id:"typescript-6"},"TypeScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-ts"},'// sandbox/code.ts\nimport { editor, PageNode, RectangleGeometry, StandaloneTextNode } from "express-document-sdk";\n\ninterface PageSizes {\n  [key: string]: RectangleGeometry;\n}\n\nfunction createTemplatePages(): { [key: string]: PageNode } {\n  // Define common page sizes\n  const pageSizes: PageSizes = {\n    instagram: { width: 1080, height: 1080 },\n    story: { width: 1080, height: 1920 },\n    landscape: { width: 1920, height: 1080 },\n    a4: { width: 595, height: 842 }\n  };\n\n  // Create pages for each template\n  const pages: { [key: string]: PageNode } = {};\n  \n  for (const [name, dimensions] of Object.entries(pageSizes)) {\n    const page: PageNode = editor.documentRoot.pages.addPage(dimensions);\n    pages[name] = page;\n    \n    // Add a title to each page\n    const title: StandaloneTextNode = editor.createText(`${name.toUpperCase()} Template`);\n    title.translation = { x: 50, y: 50 };\n    editor.context.insertionParent.children.append(title);\n    \n    console.log(`Created ${name} page: ${dimensions.width}x${dimensions.height}`);\n  }\n\n  return pages;\n}\n\n// Create template pages\nconst templatePages = createTemplatePages();\n')),(0,d.mdx)("h3",{id:"check-page-properties"},"Check Page Properties"),(0,d.mdx)("p",null,"For detailed page information including content analysis and print readiness, see the ",(0,d.mdx)("a",{parentName:"p",href:"page_metadata.md"},"Page Metadata Ho-to Guide"),"."),(0,d.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,d.mdx)("h4",{id:"javascript-7"},"JavaScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor } from "express-document-sdk";\n\nfunction analyzeDocument() {\n  const pages = editor.documentRoot.pages;\n  \n  console.log("=== Document Analysis ===");\n  console.log(`Total pages: ${pages.length}`);\n  \n  for (let i = 0; i < pages.length; i++) {\n    const page = pages[i];\n    console.log(`\\nPage ${i + 1}:`);\n    console.log(`  Dimensions: ${page.width} x ${page.height}`);\n    console.log(`  Artboards: ${page.artboards.length}`);\n    \n    // Count content in each artboard\n    for (let j = 0; j < page.artboards.length; j++) {\n      const artboard = page.artboards[j];\n      console.log(`  Artboard ${j + 1}: ${artboard.children.length} items`);\n    }\n  }\n}\n\n// Analyze the current document\nanalyzeDocument();\n')),(0,d.mdx)("h4",{id:"typescript-7"},"TypeScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-ts"},'// sandbox/code.ts\nimport { editor, PageList, PageNode, ArtboardNode } from "express-document-sdk";\n\nfunction analyzeDocument(): void {\n  const pages: PageList = editor.documentRoot.pages;\n  \n  console.log("=== Document Analysis ===");\n  console.log(`Total pages: ${pages.length}`);\n  \n  for (let i = 0; i < pages.length; i++) {\n    const page: PageNode = pages[i];\n    console.log(`\\nPage ${i + 1}:`);\n    console.log(`  Dimensions: ${page.width} x ${page.height}`);\n    console.log(`  Artboards: ${page.artboards.length}`);\n    \n    // Count content in each artboard\n    for (let j = 0; j < page.artboards.length; j++) {\n      const artboard: ArtboardNode = page.artboards[j];\n      console.log(`  Artboard ${j + 1}: ${artboard.children.length} items`);\n    }\n  }\n}\n\n// Analyze the current document\nanalyzeDocument();\n')),(0,d.mdx)("h2",{id:"key-concepts"},"Key Concepts"),(0,d.mdx)("h3",{id:"pages-vs-artboards"},"Pages vs Artboards"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},"Pages"),": Top-level containers in the document timeline"),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},"Artboards"),': "Scenes" within a page containing the actual content'),(0,d.mdx)("li",{parentName:"ul"},"All artboards within a page share the same dimensions"),(0,d.mdx)("li",{parentName:"ul"},"When you add a page, it automatically gets one default artboard")),(0,d.mdx)("h3",{id:"insertion-context"},"Insertion Context"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"Adding a page automatically makes it the active page"),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("inlineCode",{parentName:"li"},"editor.context.insertionParent")," points to the active artboard"),(0,d.mdx)("li",{parentName:"ul"},"New content is added to the current insertion parent"),(0,d.mdx)("li",{parentName:"ul"},"The viewport switches to display the new page")),(0,d.mdx)("h3",{id:"common-pitfalls"},"Common Pitfalls"),(0,d.mdx)("p",null,"When working with pages, avoid these common mistakes:"),(0,d.mdx)(g,{slots:"header, text1, text2",variant:"warning",mdxType:"InlineAlert"}),(0,d.mdx)("p",null,"Critical: Use the correct method path"),(0,d.mdx)("p",null,"The Adobe Express Document API requires the full method path to create pages:"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"❌ ",(0,d.mdx)("inlineCode",{parentName:"li"},"editor.addPage()")," (doesn't exist)  "),(0,d.mdx)("li",{parentName:"ul"},"❌ ",(0,d.mdx)("inlineCode",{parentName:"li"},"editor.createPage()")," (doesn't exist)"),(0,d.mdx)("li",{parentName:"ul"},"✅ ",(0,d.mdx)("inlineCode",{parentName:"li"},"editor.documentRoot.pages.addPage()")," (correct)")),(0,d.mdx)("ol",null,(0,d.mdx)("li",{parentName:"ol"},(0,d.mdx)("strong",{parentName:"li"},"Don't assume API consistency")," - Unlike other creation methods (like ",(0,d.mdx)("inlineCode",{parentName:"li"},"editor.createRectangle()"),"), pages require the full path through the document structure."),(0,d.mdx)("li",{parentName:"ol"},(0,d.mdx)("strong",{parentName:"li"},"Provide page dimensions")," - The ",(0,d.mdx)("inlineCode",{parentName:"li"},"addPage()")," method requires a geometry parameter with width and height."),(0,d.mdx)("li",{parentName:"ol"},(0,d.mdx)("strong",{parentName:"li"},"Expect automatic navigation")," - Adding a page automatically switches to it and updates the viewport."),(0,d.mdx)("li",{parentName:"ol"},(0,d.mdx)("strong",{parentName:"li"},"Remember shared dimensions")," - All artboards within a page must have the same dimensions.")),(0,d.mdx)("h2",{id:"integration-with-other-apis"},"Integration with Other APIs"),(0,d.mdx)("h3",{id:"using-with-metadata-apis"},"Using with Metadata APIs"),(0,d.mdx)("p",null,"Pages created with ",(0,d.mdx)("inlineCode",{parentName:"p"},"editor.documentRoot.pages.addPage()")," can be used with other Document APIs, particularly for retrieving metadata. See the ",(0,d.mdx)("a",{parentName:"p",href:"page_metadata.md"},"Page Metadata How-to Guide")," for complete examples."),(0,d.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript, TypeScript",mdxType:"CodeBlock"}),(0,d.mdx)("h4",{id:"javascript-8"},"JavaScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js\nimport { editor } from "express-document-sdk";\n\n// Add a page and get its metadata\nconst newPage = editor.documentRoot.pages.addPage({ width: 1080, height: 1080 });\n\n// Get the page ID for use with Add-on UI SDK metadata APIs\nconsole.log("New page ID:", newPage.id);\n\n// You can use this ID with the Add-on UI SDK to get detailed metadata\n// See the Page Metadata guide for complete examples:\n// const pageMetadata = await addOnUISdk.app.document.getPagesMetadata({\n//   pageIds: [newPage.id]\n// });\n')),(0,d.mdx)("h4",{id:"typescript-8"},"TypeScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-ts"},'// sandbox/code.ts\nimport { editor, PageNode } from "express-document-sdk";\n\n// Add a page and get its metadata\nconst newPage: PageNode = editor.documentRoot.pages.addPage({ width: 1080, height: 1080 });\n\n// Get the page ID for use with Add-on UI SDK metadata APIs\nconsole.log("New page ID:", newPage.id);\n\n// You can use this ID with the Add-on UI SDK to get detailed metadata\n// See the Page Metadata guide for complete examples:\n// const pageMetadata = await addOnUISdk.app.document.getPagesMetadata({\n//   pageIds: [newPage.id]\n// });\n')),(0,d.mdx)("h2",{id:"faqs"},"FAQs"),(0,d.mdx)("h4",{id:"q-how-do-i-add-a-page-programmatically"},"Q: How do I add a page programmatically?"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,d.mdx)("inlineCode",{parentName:"p"},"editor.documentRoot.pages.addPage(dimensions)")," with page dimensions. There is no ",(0,d.mdx)("inlineCode",{parentName:"p"},"createPage()")," method."),(0,d.mdx)("h4",{id:"q-why-doesnt-createpage-work"},"Q: Why doesn't createPage() work?"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"A:")," The Document API uses ",(0,d.mdx)("inlineCode",{parentName:"p"},"editor.documentRoot.pages.addPage()")," for pages, not ",(0,d.mdx)("inlineCode",{parentName:"p"},"createPage()"),". Use ",(0,d.mdx)("inlineCode",{parentName:"p"},"editor.documentRoot.pages.addPage(dimensions)")," instead."),(0,d.mdx)("h4",{id:"q-how-do-i-get-the-current-page"},"Q: How do I get the current page?"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,d.mdx)("inlineCode",{parentName:"p"},"editor.context.currentPage")," to access the currently active page."),(0,d.mdx)("h4",{id:"q-how-do-i-navigate-between-pages"},"Q: How do I navigate between pages?"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"A:")," Adding a page automatically switches to it. You can also access pages via ",(0,d.mdx)("inlineCode",{parentName:"p"},"editor.documentRoot.pages"),"."),(0,d.mdx)("h4",{id:"q-what-happens-when-i-add-a-page"},"Q: What happens when I add a page?"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"A:")," A new page with a default artboard is created and automatically becomes the active page and insertion parent."),(0,d.mdx)("h4",{id:"q-can-i-remove-pages"},"Q: Can I remove pages?"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"A:")," Currently, the Document API doesn't provide a direct method to remove pages programmatically."),(0,d.mdx)("h4",{id:"q-how-do-i-access-all-pages-in-a-document"},"Q: How do I access all pages in a document?"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,d.mdx)("inlineCode",{parentName:"p"},"editor.documentRoot.pages")," to access the PageList containing all pages."),(0,d.mdx)("h4",{id:"q-what-are-the-minimum-requirements-for-a-page"},"Q: What are the minimum requirements for a page?"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"A:")," Every page must have at least one artboard. The ",(0,d.mdx)("inlineCode",{parentName:"p"},"editor.documentRoot.pages.addPage()")," method automatically creates a default artboard."),(0,d.mdx)("h2",{id:"related-topics"},"Related Topics"),(0,d.mdx)("h3",{id:"page-information-and-metadata"},"Page Information and Metadata"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},(0,d.mdx)("a",{parentName:"strong",href:"page_metadata.md"},"Page Metadata"))," - Get detailed information about pages, including dimensions, content types, and selected page IDs"),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},(0,d.mdx)("a",{parentName:"strong",href:"document_metadata.md"},"Document Metadata"))," - Access document-level information and listen for document events"),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},(0,d.mdx)("a",{parentName:"strong",href:"../../../references/addonsdk/app-document.md#getselectedpageids"},"getSelectedPageIds() API"))," - Retrieve IDs of currently selected pages (experimental)")),(0,d.mdx)("h3",{id:"working-with-page-content-1"},"Working with Page Content"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},(0,d.mdx)("a",{parentName:"strong",href:"position_elements.md"},"Position Elements"))," - Position and arrange content within pages and artboards"),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},(0,d.mdx)("a",{parentName:"strong",href:"group_elements.md"},"Group Elements"))," - Organize page content using groups"),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},(0,d.mdx)("a",{parentName:"strong",href:"use_geometry.md"},"Use Geometry"))," - Create shapes and geometric elements for your pages"),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},(0,d.mdx)("a",{parentName:"strong",href:"use_text.md"},"Use Text"))," - Add and style text content on pages"),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},(0,d.mdx)("a",{parentName:"strong",href:"use_images.md"},"Use Images"))," - Import and work with images on pages")),(0,d.mdx)("h3",{id:"document-structure-and-context"},"Document Structure and Context"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},(0,d.mdx)("a",{parentName:"strong",href:"../platform_concepts/document-api.md"},"Document API Concepts"))," - Understanding the Adobe Express Document Object Model"),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},(0,d.mdx)("a",{parentName:"strong",href:"../../../references/document-sandbox/document-apis/classes/Context.md"},"Context API Reference"))," - Current page, selection, and insertion context"),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},(0,d.mdx)("a",{parentName:"strong",href:"../../../references/document-sandbox/document-apis/classes/PageNode.md"},"PageNode API Reference"))," - Detailed page node documentation"),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},(0,d.mdx)("a",{parentName:"strong",href:"../../../references/document-sandbox/document-apis/classes/PageList.md"},"PageList API Reference"))," - Page list management methods")),(0,d.mdx)("h3",{id:"advanced-topics"},"Advanced Topics"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},(0,d.mdx)("a",{parentName:"strong",href:"create_renditions.md"},"Create Renditions"))," - Export specific pages or entire documents as images, PDFs, or videos"),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("strong",{parentName:"li"},(0,d.mdx)("a",{parentName:"strong",href:"page_metadata.md"},"Page Metadata"))," - Retrieve detailed page information including dimensions, content analysis, and print readiness")))}h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-learn-how-to-manage-pages-md-faa861b97ed99a5986b6.js.map