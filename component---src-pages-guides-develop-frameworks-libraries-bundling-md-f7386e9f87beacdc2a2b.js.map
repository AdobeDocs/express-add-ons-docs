{"version":3,"file":"component---src-pages-guides-develop-frameworks-libraries-bundling-md-f7386e9f87beacdc2a2b.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,sCAAoC,uCAE5CA,EAAAA,EAAAA,KAAA,MACE,GAAM,gCAA8B,kCAEtCA,EAAAA,EAAAA,KAAA,wNAAkNA,EAAAA,EAAAA,KAAA,UAAQG,WAAW,KAAG,SAAmB,cAAcH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,YAA0B,6DAA6DH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA4B,mBAAmBH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,wBAAsC,sEAAsEH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,SAAuB,sBAAsBH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,WAAyB,2CAA2CH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,WAAyB,qBAAqBH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,gBAA8B,uEAC92BH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,OAAK,sLAM3BH,EAAAA,EAAAA,KAAA,iNAA2MA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,qBAAmC,qDACxQH,EAAAA,EAAAA,KAAA,+CAAyCA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,OAAqB,sBAAsBH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,OAAqB,kEAAkEH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,iBAA+B,+FACxRH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,OAAK,kIAK3BH,EAAAA,EAAAA,KAAA,yDAC8BA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,OAAqB,4DAA4DH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,KAAG,OAAa,0HACxKH,EAAAA,EAAAA,KAAA,MACE,GAAM,SAAO,UAEfA,EAAAA,EAAAA,KAAA,wEAAkEA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC5E,KAAQ,0BAAwB,gBACX,MACzBH,EAAAA,EAAAA,KAAA,MACE,GAAM,sCAAoC,uCAE5CA,EAAAA,EAAAA,KAAA,gIAGJ,CAEAN,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/develop/frameworks-libraries-bundling.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/express-add-ons-docs/express-add-ons-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"using-web-frameworks-and-libraries\"\n    }}>{`Using Web Frameworks and Libraries`}</h1>\n    <h3 {...{\n      \"id\": \"webpack--javascript-bundlers\"\n    }}>{`Webpack & JavaScript bundlers`}</h3>\n    <p>{`When using Node libraries or other frameworks, you'll often find yourself needing to use a JavaScript bundler of some sort. For the React and TypeScript template apps, the bundler being used is webpack. `}<strong parentName=\"p\">{`Note:`}</strong>{` the only `}<inlineCode parentName=\"p\">{`template`}</inlineCode>{` that currently is not set up to use webpack is the base `}<inlineCode parentName=\"p\">{`javascript`}</inlineCode>{` template. The `}<inlineCode parentName=\"p\">{`ccweb-add-on-scripts`}</inlineCode>{` utility which builds and hosts the add-on app, accepts an option `}<inlineCode parentName=\"p\">{`--use`}</inlineCode>{`, which is set to `}<inlineCode parentName=\"p\">{`webpack`}</inlineCode>{` for those templates. Here is what the `}<inlineCode parentName=\"p\">{`scripts`}</inlineCode>{` property in the `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` of the pre-configured webpack templates looks like for reference:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\"scripts\": {\n    \"clean\": \"ccweb-add-on-scripts clean\",\n    \"build\": \"ccweb-add-on-scripts build --use webpack\",\n    \"start\": \"ccweb-add-on-scripts start --use webpack\"\n}\n`}</code></pre>\n    <p>{`However, if you want to use any other transpiler or bundler of your choice, you may do so, provided you have the correct configurations and packages installed (similar to how these templates have `}<inlineCode parentName=\"p\">{`webpack.config.js`}</inlineCode>{` defined and its plugins and loaders installed).`}</p>\n    <p>{`For example, when you want to use `}<inlineCode parentName=\"p\">{`tsc`}</inlineCode>{` to transpile the `}<inlineCode parentName=\"p\">{`.ts`}</inlineCode>{` files, you'll need to install the typescript package and add `}<inlineCode parentName=\"p\">{`tsconfig.json`}</inlineCode>{` to your project, then configure the following to make the transpilation and hosting work:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\"scripts\": {\n    \"build\": \"ccweb-add-on-scripts build --use tsc\",\n    \"start\": \"ccweb-add-on-scripts start --use tsc\"\n}\n`}</code></pre>\n    <p>{`IMPORTANT:\nNote that the source directory, `}<inlineCode parentName=\"p\">{`src`}</inlineCode>{`, should contain all of your files, i.e. the code files `}<em parentName=\"p\">{`and`}</em>{` the static assets since it is this directory that is being watched for changes to trigger the add-on to be reloaded.`}</p>\n    <h3 {...{\n      \"id\": \"react\"\n    }}>{`React`}</h3>\n    <p>{`We have included React templates and sample add-ons in the `}<a parentName=\"p\" {...{\n        \"href\": \"guides/develop/samples\"\n      }}>{`code samples`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"other-javascript-and-css-libraries\"\n    }}>{`Other JavaScript and CSS libraries`}</h3>\n    <p>{`You should be able to include JavaScript and CSS libraries like Bootstrap or JQuery in your code without any issue.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}