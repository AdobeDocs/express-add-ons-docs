"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[5680],{4268:function(e,n,r){r.r(n),r.d(n,{_frontmatter:function(){return o},default:function(){return s}});var a=r(58168),l=r(80045),d=(r(88763),r(15680)),t=r(83407);const m=["components"],o={},i=(p="InlineAlert",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,d.mdx)("div",e)});var p;const u={_frontmatter:o},x=t.A;function s(e){let{components:n}=e,r=(0,l.A)(e,m);return(0,d.mdx)(x,(0,a.A)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,d.mdx)("p",null,(0,d.mdx)("a",{parentName:"p",href:"../overview.md"},"@express-document-sdk")," / ArrowHeadType"),(0,d.mdx)("h1",{id:"enumeration-arrowheadtype"},"Enumeration: ArrowHeadType"),(0,d.mdx)(i,{slots:"text",variant:"warning",mdxType:"InlineAlert"}),(0,d.mdx)("p",null,(0,d.mdx)("em",{parentName:"p"},"Do not depend on the literal numeric values of these constants"),", as they may change. Always reference the enum identifiers in your code."),(0,d.mdx)(i,{slots:"text",variant:"warning",mdxType:"InlineAlert"}),(0,d.mdx)("p",null,(0,d.mdx)("em",{parentName:"p"},"Additional arrowhead types may be added in the future.")," If your code has different branches or cases depending on arrow type,\nalways have a default/fallback case to handle any unknown values you may encounter."),(0,d.mdx)("h2",{id:"enumeration-members"},"Enumeration Members"),(0,d.mdx)("h3",{id:"circlefilled"},"circleFilled"),(0,d.mdx)("p",null,"• ",(0,d.mdx)("strong",{parentName:"p"},"circleFilled"),": ",(0,d.mdx)("inlineCode",{parentName:"p"},"21")),(0,d.mdx)("hr",null),(0,d.mdx)("h3",{id:"circlehollow"},"circleHollow"),(0,d.mdx)("p",null,"• ",(0,d.mdx)("strong",{parentName:"p"},"circleHollow"),": ",(0,d.mdx)("inlineCode",{parentName:"p"},"24")),(0,d.mdx)("hr",null),(0,d.mdx)("h3",{id:"none"},"none"),(0,d.mdx)("p",null,"• ",(0,d.mdx)("strong",{parentName:"p"},"none"),": ",(0,d.mdx)("inlineCode",{parentName:"p"},"0")),(0,d.mdx)("hr",null),(0,d.mdx)("h3",{id:"opentriangular"},"openTriangular"),(0,d.mdx)("p",null,"• ",(0,d.mdx)("strong",{parentName:"p"},"openTriangular"),": ",(0,d.mdx)("inlineCode",{parentName:"p"},"11")),(0,d.mdx)("hr",null),(0,d.mdx)("h3",{id:"squarefilled"},"squareFilled"),(0,d.mdx)("p",null,"• ",(0,d.mdx)("strong",{parentName:"p"},"squareFilled"),": ",(0,d.mdx)("inlineCode",{parentName:"p"},"22")),(0,d.mdx)("hr",null),(0,d.mdx)("h3",{id:"squarehollow"},"squareHollow"),(0,d.mdx)("p",null,"• ",(0,d.mdx)("strong",{parentName:"p"},"squareHollow"),": ",(0,d.mdx)("inlineCode",{parentName:"p"},"25")),(0,d.mdx)("hr",null),(0,d.mdx)("h3",{id:"triangularfilled"},"triangularFilled"),(0,d.mdx)("p",null,"• ",(0,d.mdx)("strong",{parentName:"p"},"triangularFilled"),": ",(0,d.mdx)("inlineCode",{parentName:"p"},"7")),(0,d.mdx)("hr",null),(0,d.mdx)("h3",{id:"verticalline"},"verticalLine"),(0,d.mdx)("p",null,"• ",(0,d.mdx)("strong",{parentName:"p"},"verticalLine"),": ",(0,d.mdx)("inlineCode",{parentName:"p"},"27")))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-references-document-sandbox-document-apis-enumerations-arrow-head-type-md-6e253f28e9471c73711d.js.map