"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[1719],{37986:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return d},default:function(){return c}});var o=t(87462),i=t(63366),a=(t(15007),t(64983)),r=t(91515),m=["components"],d={},s={_frontmatter:d},p=r.Z;function c(e){var n=e.components,t=(0,i.Z)(e,m);return(0,a.mdx)(p,(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"communication-apis"},"Communication APIs"),(0,a.mdx)("p",null,"The communication APIs allow you to communicate between the script runtime and the iframe where your add-on is running. "),(0,a.mdx)("h2",{id:"overview"},"Overview"),(0,a.mdx)("p",null,"The script runtime and iframe runtime are two different runtime execution environments which are present on different threads in the browser. The communication APIs are based on the ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/GoogleChromeLabs/comlink"},"Comlink library")," and provide a mechanism to allow the JavaScript code executing in each to interact, so developers can call apis exposed in one environment (ie: script runtime) from another environment (ie: iframe where their add-on is running) bidirectionally."),(0,a.mdx)("h3",{id:"example-code-snippets"},"Example Code Snippets"),(0,a.mdx)("p",null,"The AddOnSdk ",(0,a.mdx)("inlineCode",{parentName:"p"},"runtime")," object provides the methods to allow you to communicate between the two execution environments via ",(0,a.mdx)("inlineCode",{parentName:"p"},"exposeApi()")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"apiProxy()"),". The examples below show the methods in use from both the ",(0,a.mdx)("inlineCode",{parentName:"p"},"index.html")," where the iframe is running with your add-on code, and the script runtime environment running the contents of ",(0,a.mdx)("inlineCode",{parentName:"p"},"code.js"),"."),(0,a.mdx)("h3",{id:"example-1-expose-apis-from-script-code"},"Example 1: Expose APIs from script code"),(0,a.mdx)("h4",{id:"codejs"},(0,a.mdx)("inlineCode",{parentName:"h4"},"code.js")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-js"},"\nconst scriptApis = {\n    performWorkOnDocument: function (data, someFlag) {\n        // call content authoring APIs\n    },\n\n    getDataFromDocument: function() {\n        // get some data from document\n    }\n}\n// expose these apis to be directly consumed in the UI (ie: `index.html` file).\nruntime.exposeApi(scriptApis);\n")),(0,a.mdx)("h4",{id:"indexhtml"},"index.html"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-js"},'import AddOnSdk from "https://localhost.adobe.com:8081/sdk.js";\n\nAddOnSdk.ready.then(async () => {\n    const { runtime } = AddOnSdk.instance;\n\n    // Wait for the promise to resolve (the script runtime may not have initialized yet)\n    const scriptApis = await runtime.apiProxy("script");\n\n    await scriptApis.performWorkOnDocument({\n        pageNumber: 1,\n        op: "change_background_color",\n        data: {\n            toColor: "blue"\n        }\n    }, true);\n\n    console.log(await scriptApis.getDataFromDocument());\n\n});\n')))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-references-scriptruntime-communication-index-md-873252cb5b4a9faba106.js.map