"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[9296],{21830:function(n,e,t){t.r(e),t.d(e,{_frontmatter:function(){return s},default:function(){return f}});var a=t(87462),o=t(63366),i=(t(15007),t(64983)),r=t(91515),l=["components"],s={},d=function(n){return function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",e)}},p=d("CodeBlock"),c=d("InlineAlert"),m={_frontmatter:s},u=r.Z;function f(n){var e=n.components,t=(0,o.Z)(n,l);return(0,i.mdx)(u,(0,a.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"simple-modal-dialogs"},"Simple Modal Dialogs"),(0,i.mdx)("p",null,"Allows you to pop-up a modal with different variations depending on needs."),(0,i.mdx)("p",null,"You can also check the ",(0,i.mdx)("a",{parentName:"p",href:"../references/manifest.md"},"manifest documentation")," and the ",(0,i.mdx)("a",{parentName:"p",href:"guides/develop/samples"},"dialog-add-on")," code sample for more details on this flag and see how it's used. Also, please report any issues or feedback you may have for this API to the ",(0,i.mdx)("strong",{parentName:"p"},"#express-addons-support")," slack channel."),(0,i.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"interface"},"Interface"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'interface Application {\n  /**\n   * Show modal dialog\n   */\n  showModalDialog(dialogOptions: DialogOptions): Promise<DialogResult>;\n}\n \ninterface DialogOptions {\n  /**\n   * Variant\n   */\n  variant: Variant;\n \n  /**\n   * Title\n   */\n  title: LocalizedString;\n \n  /**\n   * Description\n   */\n  description: LocalizedString;\n \n  /**\n   * Buttons\n   */\n  buttonLabels?: ButtonLabels;\n}\n \ninterface InputDialogOptions extends DialogOptions {\n  /**\n   * Variant\n   */\n  variant: Variant.input;\n \n  /**\n   * Input field\n   */\n  field: Field;\n}\n \nenum Variant {\n  export enum Variant {\n    /**\n     * Ask a user to confirm an action\n     */\n    confirmation = "confirmation",\n\n    /**\n     * Share information for user to acknowledge\n     */\n    information = "information",\n\n    /**\n     * Share information that a user needs to consider before proceeding\n     */\n    warning = "warning",\n\n    /**\n     * Tell a user that if they proceed with an action, it may impact their data in a negative way\n     */\n    destructive = "destructive",\n\n    /**\n     * Communicate critical issue that a user needs to resolve before proceeding\n     */\n    error = "error",\n\n    /**\n     * Ask a user to provide some inputs\n     */\n    input = "input"\n}\n \ninterface ButtonLabels {\n  /**\n   * Primary action label\n   * Default label is "OK".\n   */\n  primary?: LocalizedString;\n \n  /**\n   * Secondary action label\n   */\n  secondary?: LocalizedString;\n \n  /**\n   * Cancel action label\n   */\n  cancel?: LocalizedString;\n}\n \ninterface Field {\n  /**\n   * Label\n   */\n  label: LocalizedString;\n \n  /**\n   * Specifies a short hint that describes the expected value of the field\n   */\n  placeholder: LocalizedString;\n \n  /**\n   * Type of the field\n   */\n  fieldType: FieldType;\n}\n \nenum FieldType {\n  /**\n   * One-line text input field\n   */\n  text = "text"\n}\n \n/**\n * Placeholder for future localization support\n */\ntype LocalizedString = string;\n \ninterface DialogResult {\n  /**\n   * Clicked button\n   */\n  buttonType: ButtonType\n}\n \ninterface InputDialogResult extends DialogResult {\n  /**\n   * Field value\n   */\n  fieldValue: string;\n}\n\n/**\n * Button types for Simple Dialog\n */\nexport enum ButtonType {\n    /**\n     * Primary button pressed\n     */\n    primary = "primary",\n\n    /**\n     * Secondary button pressed\n     */\n    secondary = "secondary",\n\n    /**\n     * Cancel button pressed\n     */\n    cancel = "cancel",\n\n    /**\n     * Dialog closed via ESC or close(X) button\n     */\n    close = "close"\n}\n')),(0,i.mdx)("h3",{id:"example"},"Example"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import AddOnSdk from "https://new.express.adobe.com/static/add-on-sdk/sdk.js";\n \n// Wait for the SDK to be ready\nawait AddOnSdk.ready;\n  \n// Get confirmation from the user to enable a feature\nasync function EnableSmartFilters() {\n  try {\n    const dialogResult = await AddOnSdk.app.showModalDialog({\n        variant: Variant.confirmation,\n        title: "Enable smart Filters",\n        description: "Smart filters are nondestructive and will preserve your original images.",\n        buttonLabels: { primary: "Enable", cancel: "Cancel" },\n      });\n \n    if (dialogResult.buttonType === ButtonType.primary) {\n      // Enable smart filters\n    }\n  } catch (error) {\n    console.log("Error showing modal dialog:", error);\n  }\n}\n')),(0,i.mdx)(c,{slots:"text",variant:"success",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"We have provided a sample that can be used as a reference for implementing the Dialog APIs. Please see the ",(0,i.mdx)("strong",{parentName:"p"},"dialog-add-on")," sample provided in the ",(0,i.mdx)("a",{parentName:"p",href:"guides/develop/samples"},"code samples")," for specific details."))}f.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-references-apis-dialogs-md-1b31cb3ccc8d6a97bef2.js.map