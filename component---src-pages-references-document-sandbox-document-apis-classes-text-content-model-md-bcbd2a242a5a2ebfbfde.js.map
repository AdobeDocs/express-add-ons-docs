{"version":3,"file":"component---src-pages-references-document-sandbox-document-apis-classes-text-content-model-md-bcbd2a242a5a2ebfbfde.js","mappings":"yTAMaA,EAAe,CAAC,EAKvBC,GAJgBC,EAIY,cAJJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,GAHsBD,MAKtB,MAAMK,EAAc,CAClBP,gBAEIQ,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIR,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,KAACE,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBJ,EAAK,CAAES,WAAYA,EAAYI,QAAQ,eAG5EV,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IACb,KAAQ,kBACN,yBAA6B,wBACnCX,EAAAA,EAAAA,KAAA,MACE,GAAM,mCACJ,WAAUA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,MAAM,YAAyB,sBACpEX,EAAAA,EAAAA,KAAA,SAAI,mLAEJA,EAAAA,EAAAA,KAAA,MACE,GAAM,eACJ,gBACJA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIW,WAAW,OAAKX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,KAC9B,KAAQ,4BACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,4BAEnCX,EAAAA,EAAAA,KAAA,MACE,GAAM,aACJ,cACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,wBACJ,yBACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,OAAoB,KAAIX,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,wBAAiC,iBAAgBX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAChJ,KAAQ,0CACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,yBAAyC,OAC1EX,EAAAA,EAAAA,KAAA,SAAI,0LAEJA,EAAAA,EAAAA,KAAA,SAAI,SAAQA,EAAAA,EAAAA,KAAA,MAAIW,WAAW,KAAK,WAAgB,4GAClDX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IACR,KAAQ,4CACN,wBAA4B,0MAE/BX,EAAAA,EAAAA,KAAA,MAAIW,WAAW,KAAK,WAAgB,6CACvCX,EAAAA,EAAAA,KAACL,EAAW,CAACiB,MAAM,OAAOC,QAAQ,UAAUH,QAAQ,iBACpDV,EAAAA,EAAAA,KAAA,SAAI,qJACuBA,EAAAA,EAAAA,KAAA,MAAIW,WAAW,KAAK,UAAe,+EAC9DX,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,OAAoB,KAAIX,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,wBAAiC,KAAIX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAAuB,OAAMX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAC/MX,EAAAA,EAAAA,KAAA,MACE,GAAM,cACJ,eACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,UAAmB,eAAcX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC5E,KAAQ,+CACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,8BAA8C,OAC/EX,EAAAA,EAAAA,KAAA,MACE,GAAM,WACJ,YACJA,EAAAA,EAAAA,KAAA,SAAI,aAAYA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC1B,KAAQ,0CACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,yBAAyC,OAC1EX,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,MACJ,OACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,OAAoB,KAAIX,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,MAAe,QAAOX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,YACvIX,EAAAA,EAAAA,KAACL,EAAW,CAACiB,MAAM,OAAOC,QAAQ,UAAUH,QAAQ,iBACpDV,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,cAAuB,uBAAsBX,EAAAA,EAAAA,KAAA,UAAQW,WAAW,MAAIX,EAAAA,EAAAA,KAAA,MAAIW,WAAW,UAAU,sBAAmC,iJAAgJX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,oBAAiC,aAAYX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,QAAqB,YAAWX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC1b,KAAQ,4CACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,iBAAiC,oBAAmBX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,iBAA8B,MAC/IX,EAAAA,EAAAA,KAAA,SAAI,4JAEJA,EAAAA,EAAAA,KAAA,SAAI,kJAEqBA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,OAAoB,uBACzEX,EAAAA,EAAAA,KAAA,MACE,GAAM,aACJ,YACJA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,YAC/BX,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,wBACJ,yBACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,OAAoB,KAAIX,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,wBAAiC,iBAAgBX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAChJ,KAAQ,0CACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,yBAAyC,OAC1EX,EAAAA,EAAAA,KAAA,SAAI,qEACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,OAAoB,KAAIX,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,wBAAiC,KAAIX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAAuB,OAAMX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAC/MX,EAAAA,EAAAA,KAAA,SAAI,6IACDA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,WAAoB,iDAC/CX,EAAAA,EAAAA,KAAA,SAAI,oDAAmDA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,OAAoB,4LAGvGX,EAAAA,EAAAA,KAAA,MACE,GAAM,UACJ,WACJA,EAAAA,EAAAA,KAAA,SAAI,6GACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,gBACJ,eACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,UAAmB,eAAcX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC5E,KAAQ,+CACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,8BAA8C,OAC/EX,EAAAA,EAAAA,KAAA,MACE,GAAM,aACJ,YACJA,EAAAA,EAAAA,KAAA,SAAI,aAAYA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC1B,KAAQ,0CACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,yBAAyC,OAC1EX,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,QACJ,SACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,OAAoB,KAAIX,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,QAAiB,QAAOX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,YACzIX,EAAAA,EAAAA,KAAA,SAAI,sDAAqDA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IACnE,KAAQ,uBACN,oBAAwB,iCAC9BX,EAAAA,EAAAA,KAAA,MACE,GAAM,YACJ,WACJA,EAAAA,EAAAA,KAAA,SAAI,gGACFA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IACZ,KAAQ,2CACN,uBAA2B,MACjCX,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,OAAoB,KAAIX,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,QAAiB,KAAIX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,eAA4B,OAAMX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UACpMX,EAAAA,EAAAA,KAAA,MACE,GAAM,gBACJ,eACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,eAAwB,MAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,YAC1FX,EAAAA,EAAAA,KAAA,MACE,GAAM,aACJ,YACJA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,YAC/BX,EAAAA,EAAAA,KAAA,MACE,GAAM,WACJ,YACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,cACJ,iBACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,cAAuB,KAAIX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,WAAwB,OAAMX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAClJX,EAAAA,EAAAA,KAACL,EAAW,CAACiB,MAAM,OAAOC,QAAQ,UAAUH,QAAQ,iBACpDV,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,cAAuB,uBAAsBX,EAAAA,EAAAA,KAAA,UAAQW,WAAW,MAAIX,EAAAA,EAAAA,KAAA,MAAIW,WAAW,UAAU,sBAAmC,iJAAgJX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,oBAAiC,aAAYX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,QAAqB,YAAWX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC1b,KAAQ,4CACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,iBAAiC,oBAAmBX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,iBAA8B,MAC/IX,EAAAA,EAAAA,KAAA,SAAI,8DACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,gBACJ,eACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,WAAoB,MAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,YACtFX,EAAAA,EAAAA,KAAA,SAAI,wBACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,aACJ,YACJA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAC/BX,EAAAA,EAAAA,KAAA,MACE,GAAM,YACJ,WACJA,EAAAA,EAAAA,KAAA,SAAI,6EAA4EA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC1F,KAAQ,2CACN,uBAA2B,MACjCX,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,wBACJ,2BACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,wBAAiC,KAAIX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAAuB,MAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,SAAsB,QAAOX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UACnNX,EAAAA,EAAAA,KAAA,SAAI,+MACgFA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC9F,KAAQ,4CACN,wBAA4B,6IAGlCX,EAAAA,EAAAA,KAAA,SAAI,0BAAyBA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,YAAyB,qEAAoEX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,QAAqB,4EAEvMX,EAAAA,EAAAA,KAAA,MACE,GAAM,gBACJ,eACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,UAAmB,MAAKX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IACnE,KAAQ,0CACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,2BACjCX,EAAAA,EAAAA,KAAA,SAAI,yBACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,UAAmB,MAAKX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IACnE,KAAQ,+BACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,gBACjCX,EAAAA,EAAAA,KAAA,SAAI,6KAEJA,EAAAA,EAAAA,KAAA,MACE,GAAM,aACJ,YACJA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAC/BX,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,wBACJ,2BACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,wBAAiC,KAAIX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAAuB,MAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,SAAsB,QAAOX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UACnNX,EAAAA,EAAAA,KAAA,SAAI,+MACgFA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC9F,KAAQ,4CACN,wBAA4B,6IAGlCX,EAAAA,EAAAA,KAAA,MACE,GAAM,gBACJ,eACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,UAAmB,MAAKX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IACnE,KAAQ,0CACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,2BACjCX,EAAAA,EAAAA,KAAA,SAAI,yBACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,UAAmB,MAAKX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IACnE,KAAQ,+BACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,gBACjCX,EAAAA,EAAAA,KAAA,SAAI,sPAGJA,EAAAA,EAAAA,KAAA,MACE,GAAM,aACJ,YACJA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAC/BX,EAAAA,EAAAA,KAAA,MACE,GAAM,YACJ,WACJA,EAAAA,EAAAA,KAAA,SAAI,6GACJA,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,cACJ,iBACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,cAAuB,KAAIX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,SAAsB,OAAMX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAChJX,EAAAA,EAAAA,KAACL,EAAW,CAACiB,MAAM,OAAOC,QAAQ,UAAUH,QAAQ,iBACpDV,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,cAAuB,uBAAsBX,EAAAA,EAAAA,KAAA,UAAQW,WAAW,MAAIX,EAAAA,EAAAA,KAAA,MAAIW,WAAW,UAAU,sBAAmC,iJAAgJX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,oBAAiC,aAAYX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,QAAqB,YAAWX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC1b,KAAQ,4CACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,iBAAiC,oBAAmBX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,iBAA8B,MAC/IX,EAAAA,EAAAA,KAAA,SAAI,8CACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,gBACJ,eACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,SAAkB,MAAKX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAClE,KAAQ,+BACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,gBACjCX,EAAAA,EAAAA,KAAA,SAAI,iCACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,aACJ,YACJA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAC/BX,EAAAA,EAAAA,KAAA,MACE,GAAM,YACJ,WACJA,EAAAA,EAAAA,KAAA,SAAI,6EAA4EA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC1F,KAAQ,2CACN,uBAA2B,MACjCX,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,uBACJ,0BACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,uBAAgC,QAAOX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,aACpGX,EAAAA,EAAAA,KAACL,EAAW,CAACiB,MAAM,OAAOC,QAAQ,UAAUH,QAAQ,iBACpDV,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,cAAuB,uBAAsBX,EAAAA,EAAAA,KAAA,UAAQW,WAAW,MAAIX,EAAAA,EAAAA,KAAA,MAAIW,WAAW,UAAU,sBAAmC,iJAAgJX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,oBAAiC,aAAYX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,QAAqB,YAAWX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC1b,KAAQ,4CACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,iBAAiC,oBAAmBX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,iBAA8B,MAC/IX,EAAAA,EAAAA,KAAA,SAAI,0TAIJA,EAAAA,EAAAA,KAAA,MACE,GAAM,aACJ,YACJA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,aAC/BX,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,cACJ,iBACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,cAAuB,KAAIX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,WAAwB,MAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,SAAsB,MAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,SAAsB,QAAOX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UACjQX,EAAAA,EAAAA,KAACL,EAAW,CAACiB,MAAM,OAAOC,QAAQ,UAAUH,QAAQ,iBACpDV,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,cAAuB,uBAAsBX,EAAAA,EAAAA,KAAA,UAAQW,WAAW,MAAIX,EAAAA,EAAAA,KAAA,MAAIW,WAAW,UAAU,sBAAmC,iJAAgJX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,oBAAiC,aAAYX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,QAAqB,YAAWX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC1b,KAAQ,4CACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,iBAAiC,oBAAmBX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,iBAA8B,MAC/IX,EAAAA,EAAAA,KAAA,SAAI,4EACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,gBACJ,eACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,WAAoB,MAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,YACtFX,EAAAA,EAAAA,KAAA,SAAI,wBACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,SAAkB,MAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,YACpFX,EAAAA,EAAAA,KAAA,SAAI,+CACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,UAAmB,MAAKX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IACnE,KAAQ,0CACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,yBAAyC,IAAK,IAAK,KAAIX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAClG,KAAQ,iFACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,yBAAyC,IAAK,IAAK,KAAIX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAClG,KAAQ,gFACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,0BACjCX,EAAAA,EAAAA,KAAA,SAAI,8IACwCA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,wBAAqC,MAC7GX,EAAAA,EAAAA,KAAA,MACE,GAAM,aACJ,YACJA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAC/BX,EAAAA,EAAAA,KAAA,MACE,GAAM,YACJ,WACJA,EAAAA,EAAAA,KAAA,SAAI,6EAA4EA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC1F,KAAQ,2CACN,uBAA2B,MACjCX,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,eACJ,kBACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,eAAwB,KAAIX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,WAAwB,MAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,gBAA6B,MAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,SAAsB,QAAOX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UACzQX,EAAAA,EAAAA,KAACL,EAAW,CAACiB,MAAM,OAAOC,QAAQ,UAAUH,QAAQ,iBACpDV,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,cAAuB,uBAAsBX,EAAAA,EAAAA,KAAA,UAAQW,WAAW,MAAIX,EAAAA,EAAAA,KAAA,MAAIW,WAAW,UAAU,sBAAmC,iJAAgJX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,oBAAiC,aAAYX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,QAAqB,YAAWX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC1b,KAAQ,4CACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,iBAAiC,oBAAmBX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,iBAA8B,MAC/IX,EAAAA,EAAAA,KAAA,SAAI,qDACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,gBACJ,eACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,WAAoB,MAAKX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,YACtFX,EAAAA,EAAAA,KAAA,SAAI,wCACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,gBAAyB,MAAKX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IACzE,KAAQ,+BACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,gBACjCX,EAAAA,EAAAA,KAAA,SAAI,kCACJA,EAAAA,EAAAA,KAAA,SAAI,MAAKA,EAAAA,EAAAA,KAAA,UAAQW,WAAW,KAAK,UAAmB,MAAKX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IACnE,KAAQ,0CACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,yBAAyC,IAAK,IAAK,KAAIX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAClG,KAAQ,iFACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,yBAAyC,IAAK,IAAK,KAAIX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAClG,KAAQ,gFACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,wBAAwC,IAAK,IAAK,KAAIX,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IACjG,KAAQ,mFACPX,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,6BACjCX,EAAAA,EAAAA,KAAA,SAAI,8IACwCA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,0BAAuC,MAC/GX,EAAAA,EAAAA,KAAA,MACE,GAAM,cACJ,YACJA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,UAC/BX,EAAAA,EAAAA,KAAA,MACE,GAAM,YACJ,WACJA,EAAAA,EAAAA,KAAA,SAAI,6EAA4EA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC1F,KAAQ,2CACN,uBAA2B,KAGrC,CAEAP,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/references/document-sandbox/document-apis/classes/TextContentModel.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><a parentName=\"p\" {...{\n        \"href\": \"../overview.md\"\n      }}>{`@express-document-sdk`}</a>{` / TextContentModel`}</p>\n    <h1 {...{\n      \"id\": \"class-abstract-textcontentmodel\"\n    }}>{`Class: `}<inlineCode parentName=\"h1\">{`abstract`}</inlineCode>{` TextContentModel`}</h1>\n    <p>{`TextContentModel is an abstract base class representing a complete piece of text content.\nUse this model to get or modify the text string and the style ranges applied to it.`}</p>\n    <h2 {...{\n      \"id\": \"extended-by\"\n    }}>{`Extended by`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"TextNodeContentModel.md\"\n        }}><inlineCode parentName=\"a\">{`TextNodeContentModel`}</inlineCode></a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"accessors\"\n    }}>{`Accessors`}</h2>\n    <h3 {...{\n      \"id\": \"characterstyleranges\"\n    }}>{`characterStyleRanges`}</h3>\n    <p>{`• `}<inlineCode parentName=\"p\">{`get`}</inlineCode>{` `}<strong parentName=\"p\">{`characterStyleRanges`}</strong>{`(): readonly `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/CharacterStylesRange.md\"\n      }}><inlineCode parentName=\"a\">{`CharacterStylesRange`}</inlineCode></a>{`[]`}</p>\n    <p>{`The character styles that are applied to different ranges of this text content. Each range starts immediately after\nthe previous one: they are always contiguous, and never overlap.`}</p>\n    <p>{`When `}<em parentName=\"p\">{`setting`}</em>{` character styles, any style properties that are not provided are reset to their defaults (contrast to\n`}<a parentName=\"p\" {...{\n        \"href\": \"TextContentModel.md#applycharacterstyles\"\n      }}>{`applyCharacterStyles`}</a>{` which preserves the text's existing styles for any fields not specified). If the ranges\ndo not cover the full length of the text, the last range is extended to cover all the remaining text.\nWhen `}<em parentName=\"p\">{`getting`}</em>{` styles, all fields are always provided.`}</p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`Note: existing fonts used in the document, returned by this getter, are not guaranteed to be ones the current user\nhas rights to edit with. The `}<em parentName=\"p\">{`setter`}</em>{` only accepts the AvailableFont type which has been verified to be usable.`}</p>\n    <p>{`• `}<inlineCode parentName=\"p\">{`set`}</inlineCode>{` `}<strong parentName=\"p\">{`characterStyleRanges`}</strong>{`(`}<inlineCode parentName=\"p\">{`styles`}</inlineCode>{`): `}<inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <h4 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h4>\n    <p>{`• `}<strong parentName=\"p\">{`styles`}</strong>{`: readonly `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/CharacterStylesRangeInput.md\"\n      }}><inlineCode parentName=\"a\">{`CharacterStylesRangeInput`}</inlineCode></a>{`[]`}</p>\n    <h4 {...{\n      \"id\": \"returns\"\n    }}>{`Returns`}</h4>\n    <p>{`readonly `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/CharacterStylesRange.md\"\n      }}><inlineCode parentName=\"a\">{`CharacterStylesRange`}</inlineCode></a>{`[]`}</p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"id\"\n    }}>{`id`}</h3>\n    <p>{`• `}<inlineCode parentName=\"p\">{`get`}</inlineCode>{` `}<strong parentName=\"p\">{`id`}</strong>{`(): `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` This is currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until it has been declared stable. To use it, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <p>{`A unique identifier for this node that stays the same when the file is closed & reopened, or if the node is\nmoved to a different part of the document.`}</p>\n    <p>{`To determine if two TextNodes are connected to the same TextContentModel,\ncheck if both models have the same id.\nComparing two models using `}<inlineCode parentName=\"p\">{`===`}</inlineCode>{` will always fail.`}</p>\n    <h4 {...{\n      \"id\": \"returns-1\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"paragraphstyleranges\"\n    }}>{`paragraphStyleRanges`}</h3>\n    <p>{`• `}<inlineCode parentName=\"p\">{`get`}</inlineCode>{` `}<strong parentName=\"p\">{`paragraphStyleRanges`}</strong>{`(): readonly `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/ParagraphStylesRange.md\"\n      }}><inlineCode parentName=\"a\">{`ParagraphStylesRange`}</inlineCode></a>{`[]`}</p>\n    <p>{`The styles applied to different paragraphs of this text content.`}</p>\n    <p>{`• `}<inlineCode parentName=\"p\">{`set`}</inlineCode>{` `}<strong parentName=\"p\">{`paragraphStyleRanges`}</strong>{`(`}<inlineCode parentName=\"p\">{`styles`}</inlineCode>{`): `}<inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <p>{`Apply styles to different paragraphs of this text content. Any style properties that are not provided are reset to their defaults.\nWhen `}<strong parentName=\"p\">{`getting`}</strong>{` styles, all properties are always provided.`}</p>\n    <p>{`Paragraphs are separated by newline characters (`}<inlineCode parentName=\"p\">{`\\\\n`}</inlineCode>{`). The ranges specified here should align with\nthose boundaries. If multiple ranges provided overlap a single paragraph, the first one to overlap is applied to the\nentire paragraph.`}</p>\n    <h4 {...{\n      \"id\": \"throws\"\n    }}>{`Throws`}</h4>\n    <p>{`If applying an ordered-list style when the text contains fonts that are unavailable to the current user.`}</p>\n    <h4 {...{\n      \"id\": \"parameters-1\"\n    }}>{`Parameters`}</h4>\n    <p>{`• `}<strong parentName=\"p\">{`styles`}</strong>{`: readonly `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/ParagraphStylesRangeInput.md\"\n      }}><inlineCode parentName=\"a\">{`ParagraphStylesRangeInput`}</inlineCode></a>{`[]`}</p>\n    <h4 {...{\n      \"id\": \"returns-2\"\n    }}>{`Returns`}</h4>\n    <p>{`readonly `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/ParagraphStylesRange.md\"\n      }}><inlineCode parentName=\"a\">{`ParagraphStylesRange`}</inlineCode></a>{`[]`}</p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"text\"\n    }}>{`text`}</h3>\n    <p>{`• `}<inlineCode parentName=\"p\">{`get`}</inlineCode>{` `}<strong parentName=\"p\">{`text`}</strong>{`(): `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <p>{`The complete text string, which may span multiple `}<a parentName=\"p\" {...{\n        \"href\": \"ThreadedTextNode.md\"\n      }}>{`ThreadedTextNode`}</a>{` \"frames\" in the scenegraph.`}</p>\n    <h4 {...{\n      \"id\": \"throws-1\"\n    }}>{`Throws`}</h4>\n    <p>{`The setter throws if the existing text contains fonts unavailable to the current user.\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"TextContentModel.md#hasunavailablefonts\"\n      }}>{`hasUnavailableFonts`}</a>{`.`}</p>\n    <p>{`• `}<inlineCode parentName=\"p\">{`set`}</inlineCode>{` `}<strong parentName=\"p\">{`text`}</strong>{`(`}<inlineCode parentName=\"p\">{`textContent`}</inlineCode>{`): `}<inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <h4 {...{\n      \"id\": \"parameters-2\"\n    }}>{`Parameters`}</h4>\n    <p>{`• `}<strong parentName=\"p\">{`textContent`}</strong>{`: `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <h4 {...{\n      \"id\": \"returns-3\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h2>\n    <h3 {...{\n      \"id\": \"appendtext\"\n    }}>{`appendText()`}</h3>\n    <p>{`• `}<strong parentName=\"p\">{`appendText`}</strong>{`(`}<inlineCode parentName=\"p\">{`newText`}</inlineCode>{`): `}<inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` This is currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until it has been declared stable. To use it, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <p>{`Appends a new text string to the end of the text content.`}</p>\n    <h4 {...{\n      \"id\": \"parameters-3\"\n    }}>{`Parameters`}</h4>\n    <p>{`• `}<strong parentName=\"p\">{`newText`}</strong>{`: `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <p>{`The text to append.`}</p>\n    <h4 {...{\n      \"id\": \"returns-4\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <h4 {...{\n      \"id\": \"throws-2\"\n    }}>{`Throws`}</h4>\n    <p>{`if the existing text contains fonts unavailable to the current user. See `}<a parentName=\"p\" {...{\n        \"href\": \"TextContentModel.md#hasunavailablefonts\"\n      }}>{`hasUnavailableFonts`}</a>{`.`}</p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"applycharacterstyles\"\n    }}>{`applyCharacterStyles()`}</h3>\n    <p>{`• `}<strong parentName=\"p\">{`applyCharacterStyles`}</strong>{`(`}<inlineCode parentName=\"p\">{`styles`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`range`}</inlineCode>{`?): `}<inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <p>{`Apply one or more styles to the characters in the given range, leaving any style properties that were not specified\nunchanged. Does not modify any styles in the text outside this range. Contrast to the `}<a parentName=\"p\" {...{\n        \"href\": \"TextContentModel.md#characterstyleranges\"\n      }}>{`characterStyleRanges`}</a>{`\nsetter, which specifies new style range(s) for the entire text at once, and resets any unspecified properties back to\ndefault styles.`}</p>\n    <p>{`Explicitly specifying `}<inlineCode parentName=\"p\">{`link: \"\"`}</inlineCode>{` will remove any hyperlinks present in the existing text. If the `}<inlineCode parentName=\"p\">{`link`}</inlineCode>{` style\nproperty is not specified at all, existing links are preserved.`}</p>\n    <h4 {...{\n      \"id\": \"parameters-4\"\n    }}>{`Parameters`}</h4>\n    <p>{`• `}<strong parentName=\"p\">{`styles`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/CharacterStylesInput.md\"\n      }}><inlineCode parentName=\"a\">{`CharacterStylesInput`}</inlineCode></a></p>\n    <p>{`The styles to apply.`}</p>\n    <p>{`• `}<strong parentName=\"p\">{`range?`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/TextRange.md\"\n      }}><inlineCode parentName=\"a\">{`TextRange`}</inlineCode></a></p>\n    <p>{`The start and length of the character sequence to which the styles should be applied.\nIf no range is specified, styles will be applied to the entire text content flow.`}</p>\n    <h4 {...{\n      \"id\": \"returns-5\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"applyparagraphstyles\"\n    }}>{`applyParagraphStyles()`}</h3>\n    <p>{`• `}<strong parentName=\"p\">{`applyParagraphStyles`}</strong>{`(`}<inlineCode parentName=\"p\">{`styles`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`range`}</inlineCode>{`?): `}<inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <p>{`Apply one or more styles to the paragraphs in the given range, leaving any style properties that were not specified\nunchanged. Does not modify any styles in the text outside this range. Contrast to the `}<a parentName=\"p\" {...{\n        \"href\": \"TextContentModel.md#paragraphstyleranges\"\n      }}>{`paragraphStyleRanges`}</a>{`\nsetter, which specifies new style range(s) for the entire text at once, and resets any unspecified properties back to\ndefault styles.`}</p>\n    <h4 {...{\n      \"id\": \"parameters-5\"\n    }}>{`Parameters`}</h4>\n    <p>{`• `}<strong parentName=\"p\">{`styles`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/ParagraphStylesInput.md\"\n      }}><inlineCode parentName=\"a\">{`ParagraphStylesInput`}</inlineCode></a></p>\n    <p>{`The styles to apply.`}</p>\n    <p>{`• `}<strong parentName=\"p\">{`range?`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/TextRange.md\"\n      }}><inlineCode parentName=\"a\">{`TextRange`}</inlineCode></a></p>\n    <p>{`The start and length of character sequence to which the styles should be applied. Styles apply to any\nparagraphs that even partially overlap this range.\nIf range is not specified, the styles will be applied to the entire text content flow.`}</p>\n    <h4 {...{\n      \"id\": \"returns-6\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <h4 {...{\n      \"id\": \"throws-3\"\n    }}>{`Throws`}</h4>\n    <p>{`If applying an ordered-list style when the text contains fonts that are unavailable to the current user.`}</p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"deletetext\"\n    }}>{`deleteText()`}</h3>\n    <p>{`• `}<strong parentName=\"p\">{`deleteText`}</strong>{`(`}<inlineCode parentName=\"p\">{`range`}</inlineCode>{`): `}<inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` This is currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until it has been declared stable. To use it, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <p>{`Deletes a range of text from the content.`}</p>\n    <h4 {...{\n      \"id\": \"parameters-6\"\n    }}>{`Parameters`}</h4>\n    <p>{`• `}<strong parentName=\"p\">{`range`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/TextRange.md\"\n      }}><inlineCode parentName=\"a\">{`TextRange`}</inlineCode></a></p>\n    <p>{`The range of text to delete.`}</p>\n    <h4 {...{\n      \"id\": \"returns-7\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <h4 {...{\n      \"id\": \"throws-4\"\n    }}>{`Throws`}</h4>\n    <p>{`if the existing text contains fonts unavailable to the current user. See `}<a parentName=\"p\" {...{\n        \"href\": \"TextContentModel.md#hasunavailablefonts\"\n      }}>{`hasUnavailableFonts`}</a>{`.`}</p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"hasunavailablefonts\"\n    }}>{`hasUnavailableFonts()`}</h3>\n    <p>{`• `}<strong parentName=\"p\">{`hasUnavailableFonts`}</strong>{`(): `}<inlineCode parentName=\"p\">{`boolean`}</inlineCode></p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` This is currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until it has been declared stable. To use it, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <p>{`Returns true if this text contains any fonts unavailable to the current user.\nCurrently, if any unavailable fonts are present, the text content cannot be modified and\ncertain styling changes are limited as well. To remove these restrictions, you must modify\nthe character styles to use only AvailableFonts.`}</p>\n    <h4 {...{\n      \"id\": \"returns-8\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`boolean`}</inlineCode></p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"inserttext\"\n    }}>{`insertText()`}</h3>\n    <p>{`• `}<strong parentName=\"p\">{`insertText`}</strong>{`(`}<inlineCode parentName=\"p\">{`newText`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`index`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{`?): `}<inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` This is currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until it has been declared stable. To use it, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <p>{`Inserts a new text string into the text content at the specified index.`}</p>\n    <h4 {...{\n      \"id\": \"parameters-7\"\n    }}>{`Parameters`}</h4>\n    <p>{`• `}<strong parentName=\"p\">{`newText`}</strong>{`: `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <p>{`The text to insert.`}</p>\n    <p>{`• `}<strong parentName=\"p\">{`index`}</strong>{`: `}<inlineCode parentName=\"p\">{`number`}</inlineCode></p>\n    <p>{`The index at which to insert the new text.`}</p>\n    <p>{`• `}<strong parentName=\"p\">{`style?`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/CharacterStylesInput.md\"\n      }}><inlineCode parentName=\"a\">{`CharacterStylesInput`}</inlineCode></a>{` `}{`|`}{` `}<a parentName=\"p\" {...{\n        \"href\": \"../namespaces/Constants/enumerations/TextStyleSource.md#beforeinsertionpoint\"\n      }}><inlineCode parentName=\"a\">{`beforeInsertionPoint`}</inlineCode></a>{` `}{`|`}{` `}<a parentName=\"p\" {...{\n        \"href\": \"../namespaces/Constants/enumerations/TextStyleSource.md#afterinsertionpoint\"\n      }}><inlineCode parentName=\"a\">{`afterInsertionPoint`}</inlineCode></a></p>\n    <p>{`Style to use for the new text: either directly provides a style to use, or indicates which\nexisting text to match the style of. Default: `}<inlineCode parentName=\"p\">{`beforeInsertionPoint`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"returns-9\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <h4 {...{\n      \"id\": \"throws-5\"\n    }}>{`Throws`}</h4>\n    <p>{`if the existing text contains fonts unavailable to the current user. See `}<a parentName=\"p\" {...{\n        \"href\": \"TextContentModel.md#hasunavailablefonts\"\n      }}>{`hasUnavailableFonts`}</a>{`.`}</p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"replacetext\"\n    }}>{`replaceText()`}</h3>\n    <p>{`• `}<strong parentName=\"p\">{`replaceText`}</strong>{`(`}<inlineCode parentName=\"p\">{`newText`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`replaceRange`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{`?): `}<inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` This is currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until it has been declared stable. To use it, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <p>{`Replaces a range of text with a new text string.`}</p>\n    <h4 {...{\n      \"id\": \"parameters-8\"\n    }}>{`Parameters`}</h4>\n    <p>{`• `}<strong parentName=\"p\">{`newText`}</strong>{`: `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <p>{`The text to replace the range with.`}</p>\n    <p>{`• `}<strong parentName=\"p\">{`replaceRange`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/TextRange.md\"\n      }}><inlineCode parentName=\"a\">{`TextRange`}</inlineCode></a></p>\n    <p>{`The range of text to replace.`}</p>\n    <p>{`• `}<strong parentName=\"p\">{`style?`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/CharacterStylesInput.md\"\n      }}><inlineCode parentName=\"a\">{`CharacterStylesInput`}</inlineCode></a>{` `}{`|`}{` `}<a parentName=\"p\" {...{\n        \"href\": \"../namespaces/Constants/enumerations/TextStyleSource.md#beforeinsertionpoint\"\n      }}><inlineCode parentName=\"a\">{`beforeInsertionPoint`}</inlineCode></a>{` `}{`|`}{` `}<a parentName=\"p\" {...{\n        \"href\": \"../namespaces/Constants/enumerations/TextStyleSource.md#afterinsertionpoint\"\n      }}><inlineCode parentName=\"a\">{`afterInsertionPoint`}</inlineCode></a>{` `}{`|`}{` `}<a parentName=\"p\" {...{\n        \"href\": \"../namespaces/Constants/enumerations/TextStyleSource.md#firstreplacedcharacter\"\n      }}><inlineCode parentName=\"a\">{`firstReplacedCharacter`}</inlineCode></a></p>\n    <p>{`Style to use for the new text: either directly provides a style to use, or indicates which\nexisting text to match the style of. Default: `}<inlineCode parentName=\"p\">{`firstReplacedCharacter`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"returns-10\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <h4 {...{\n      \"id\": \"throws-6\"\n    }}>{`Throws`}</h4>\n    <p>{`if the existing text contains fonts unavailable to the current user. See `}<a parentName=\"p\" {...{\n        \"href\": \"TextContentModel.md#hasunavailablefonts\"\n      }}>{`hasUnavailableFonts`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","isMDXComponent"],"sourceRoot":""}