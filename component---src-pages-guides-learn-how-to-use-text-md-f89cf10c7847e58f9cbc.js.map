{"version":3,"file":"component---src-pages-guides-learn-how-to-use-text-md-f89cf10c7847e58f9cbc.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/learn/how_to/use_text.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"use-text\"\n    }}>{`Use Text`}</h1>\n    <p>{`Text is an essential part of any design. Let's explore how to use all the available APIs to create and style it.`}</p>\n    <h2 {...{\n      \"id\": \"create-text\"\n    }}>{`Create Text`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`editor.createText()`}</inlineCode>{` method accepts a string as a parameter, and returns a brand new `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/StandaloneTextNode.md\"\n      }}><inlineCode parentName=\"a\">{`StandaloneTextNode`}</inlineCode></a>{`. The actual textual content is found in its `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#text\"\n      }}><inlineCode parentName=\"a\">{`fullContent.text`}</inlineCode></a>{` property.`}</p>\n    <h3 {...{\n      \"id\": \"example-create-basic-text\"\n    }}>{`Example: Create basic Text`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Create a new TextNode\nconst textNode = editor.createText(\"Hello,\\\\nWorld!\");\n\n// Center the text on the page\nconst insertionParent = editor.context.insertionParent;\ntextNode.setPositionInParent(\n  { x: insertionParent.width / 2, y: insertionParent.height / 2 },\n  { x: 0, y: 0 }\n);\n\n// Add the TextNode to the document\ninsertionParent.children.append(textNode);\n\n// Get the text content\nconsole.log(\"Text: \", textNode.fullContent.text);\n`}</code></pre>\n    <p>{`The text is created with the default styles (Source Sans 3, 100pt, black). Use `}<inlineCode parentName=\"p\">{`\\\\n`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`\\\\r`}</inlineCode>{` to add a line break.`}</p>\n    <InlineAlert slots=\"header, text1, text2, text3\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`Text Classes`}</p>\n    <p>{`Adobe Express supports two types of text nodes, both extending the Abstract `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextNode.md\"\n      }}><inlineCode parentName=\"a\">{`TextNode`}</inlineCode></a>{` class:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../../references/document-sandbox/document-apis/classes/StandaloneTextNode.md\"\n        }}><inlineCode parentName=\"a\">{`StandaloneTextNode`}</inlineCode></a>{`: A self-contained text node.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../../references/document-sandbox/document-apis/classes/ThreadedTextNode.md\"\n        }}><inlineCode parentName=\"a\">{`ThreadedTextNode`}</inlineCode></a>{`: A text node that is part of a text flow, whose content may span multiple frames.`}</li>\n    </ul>\n    <p>{`The `}<inlineCode parentName=\"p\">{`editor.createText()`}</inlineCode>{` method returns a `}<inlineCode parentName=\"p\">{`StandaloneTextNode`}</inlineCode>{` by default; for the time being, it's not possible to create a `}<inlineCode parentName=\"p\">{`ThreadedTextNode`}</inlineCode>{` using this method.`}</p>\n    <h2 {...{\n      \"id\": \"replace-text-apis\"\n    }}>{`Replace Text APIs`}</h2>\n    <p>{`To replace the text content of a `}<inlineCode parentName=\"p\">{`TextNode`}</inlineCode>{`, you can use the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextNodeContentModel.md#replaceText\"\n      }}>{`Text Replacement APIs`}</a>{`: `}<inlineCode parentName=\"p\">{`replaceText()`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`appendText()`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`insertText()`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`deleteText()`}</inlineCode>{`. These methods provide fine-grained control over text manipulation while preserving or controlling the styling of the modified text.`}</p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` These text replacement APIs are currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until they have been declared stable. To use them, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"examples-replace\"\n    }}>{`Examples: Replace`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`replaceText()`}</inlineCode>{` method replaces a specific range of text with new content. You can optionally specify the styling for the replacement text. It accepts a `}<inlineCode parentName=\"p\">{`newText`}</inlineCode>{` string, a `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/interfaces/TextRange.md\"\n      }}><inlineCode parentName=\"a\">{`replaceRange`}</inlineCode></a>{`, and an optional `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` parameter.`}</p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`Although possible, it's not recommended to replace the text content of a `}<inlineCode parentName=\"p\">{`TextNode`}</inlineCode>{` by setting the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#text\"\n      }}><inlineCode parentName=\"a\">{`fullContent.text`}</inlineCode></a>{` property, as it applies the style from the first range to the whole text. Use the Text Replacement APIs instead to preserve styling.`}</p>\n    <h4 {...{\n      \"id\": \"example-basic-text-replacement\"\n    }}>{`Example: Basic Text Replacement`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Create a new TextNode\nconst textNode = editor.createText(\"1234567890\");\nconst contentModel = textNode.fullContent;\n\n// Center the text on the page\nconst insertionParent = editor.context.insertionParent;\ntextNode.setPositionInParent(\n  { x: insertionParent.width / 2, y: insertionParent.height / 2 },\n  { x: 0, y: 0 }\n);\n\n// Add the TextNode to the document\ninsertionParent.children.append(textNode);\n\n// Replace characters 5-10 with new text\ncontentModel.replaceText(\n  \"abcde\",\n  { start: 2, length: 5 } // Replace 5 characters starting at index 2\n);\n\n// Original text: 1234567890\n// Indices      : 0123456789\n// Range        :   ^^^^^\n// Replaced text: 01abcde890\n`}</code></pre>\n    <p>{`This API will delete the specified amount of characters in the `}<inlineCode parentName=\"p\">{`length`}</inlineCode>{` property of the `}<inlineCode parentName=\"p\">{`replaceRange`}</inlineCode>{` parameter, then insert the new text—`}<strong parentName=\"p\">{`regardless of the length of the new text`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const textNode = editor.createText(\"1234567890\");\nconst contentModel = textNode.fullContent;\n// ...\ncontentModel.replaceText(\n  \"This is a string longer than five characters\",\n  { start: 2, length: 5 } // Replace 5 characters starting at index 2\n);\n\n// Original text: 1234567890\n// Indices      : 0123456789\n// Range        :   ^^^^^\n// Replaced text: 01This is a string longer than five characters890\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"example-replace-text-with-custom-styling\"\n    }}>{`Example: Replace Text with Custom Styling`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, constants } from \"express-document-sdk\";\n\n// Create a new TextNode\nconst textNode = editor.createText(\"1234567890\");\nconst contentModel = textNode.fullContent;\n\n// Center the text on the page\nconst insertionParent = editor.context.insertionParent;\ntextNode.setPositionInParent(\n  { x: insertionParent.width / 2, y: insertionParent.height / 2 },\n  { x: 0, y: 0 }\n);\n\n// Add the TextNode to the document\ninsertionParent.children.append(textNode);\n\n// Replace text with custom character styles\ncontentModel.replaceText(\n  \"DDD\",\n  { start: 0, length: 7 }, // Replace first 7 characters\n  {\n    color: { red: 1, green: 0, blue: 0, alpha: 1 }, // Red color\n  }\n);\n\n// Original text: 1234567890\n// Indices      : 0123456789\n// Range        : ^^^^^^^\n// Replaced text: DDD890\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"example-replace-text-using-style-sources\"\n    }}>{`Example: Replace Text Using Style Sources`}</h4>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`TextStyleSource`}</inlineCode>{` constants to inherit the style of the first replaced character (default option, when not provided), the style before the insertion point, or the style after the insertion point.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, constants } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame with multiple style ranges\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\n// Replace text using the style of the first replaced character (default)\ncontentModel.replaceText(\n  \"replacement\",\n  { start: 10, length: 8 },\n  constants.TextStyleSource.firstReplacedCharacter\n);\n\n// Replace text using the style before the insertion point\ncontentModel.replaceText(\n  \"before style\",\n  { start: 20, length: 6 },\n  constants.TextStyleSource.beforeInsertionPoint\n);\n\n// Replace text using the style after the insertion point\ncontentModel.replaceText(\n  \"after style\",\n  { start: 30, length: 5 },\n  constants.TextStyleSource.afterInsertionPoint\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"examples-insert\"\n    }}>{`Examples: Insert`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`insertText()`}</inlineCode>{` method inserts new text at a specific position within the existing content. It accepts a `}<inlineCode parentName=\"p\">{`newText`}</inlineCode>{` string, an `}<inlineCode parentName=\"p\">{`index`}</inlineCode>{` number, and an optional `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` parameter. Think about it as a Replace API (able to insert text at a specific position) but without any deletion.`}</p>\n    <h4 {...{\n      \"id\": \"example-basic-text-insertion\"\n    }}>{`Example: Basic Text Insertion`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Create a new TextNode\nconst textNode = editor.createText(\"Adobe add-ons\");\nconst contentModel = textNode.fullContent;\n\n// Center the text on the page\nconst insertionParent = editor.context.insertionParent;\ntextNode.setPositionInParent(\n  { x: insertionParent.width / 2, y: insertionParent.height / 2 },\n  { x: 0, y: 0 }\n);\n\n// Add the TextNode to the document\ninsertionParent.children.append(textNode);\n\n// Insert text at position 10\ncontentModel.insertText(\n  \"Express \",\n  6,\n  {\n    color: { red: 0.3, green: 0.3, blue: 0.9, alpha: 1 } // Accent color\n  }\n);\n\n// Original text  : Adobe add-ons\n// Indices        : 0123456789\n// Insertion point:       ^\n// Resulting text : Adobe Express add-ons\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"example-insert-text-with-custom-styling\"\n    }}>{`Example: Insert Text with Custom Styling`}</h4>\n    <p>{`Custom styling is optional, and follows the same rules as the Replace API.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, constants } from \"express-document-sdk\";\n\n// Create a new TextNode\nconst textNode = editor.createText(\"Adobe add-ons\");\nconst contentModel = textNode.fullContent;\n\n// Center the text on the page\nconst insertionParent = editor.context.insertionParent;\ntextNode.setPositionInParent(\n  { x: insertionParent.width / 2, y: insertionParent.height / 2 },\n  { x: 0, y: 0 }\n);\n\n// Add the TextNode to the document\ninsertionParent.children.append(textNode);\n\n// Insert text at position 10\ncontentModel.insertText(\n  \"Express \",\n  6,\n  {\n    color: { red: 0.3, green: 0.3, blue: 0.9, alpha: 1 } // Accent color\n  }\n);\n\n// Or, you can use the style sources to inherit the style of the surrounding text\ncontentModel.insertText(\n  \"Express \",\n  6,\n  constants.TextStyleSource.beforeInsertionPoint\n  // constants.TextStyleSource.afterInsertionPoint\n  // constants.TextStyleSource.firstReplacedCharacter\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"examples-append\"\n    }}>{`Examples: Append`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`appendText()`}</inlineCode>{` method adds new text to the end of the existing content. It accepts just one parameter, a `}<inlineCode parentName=\"p\">{`newText`}</inlineCode>{` string.`}</p>\n    <h4 {...{\n      \"id\": \"example-append-text\"\n    }}>{`Example: Append Text`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Create a new TextNode\nconst textNode = editor.createText(\"Adobe\");\nconst contentModel = textNode.fullContent;\n\n// Center the text on the page\nconst insertionParent = editor.context.insertionParent;\ntextNode.setPositionInParent(\n  { x: insertionParent.width / 2, y: insertionParent.height / 2 },\n  { x: 0, y: 0 }\n);\n\n// Add the TextNode to the document\ninsertionParent.children.append(textNode);\n\n// Append text to the end\ncontentModel.appendText(\"\\\\nExpress\");\n\n// You can append multiple times!\ncontentModel.appendText(\"\\\\nDeveloper\");\n\n// Adobe\n// Express\n// Developer\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"examples-delete\"\n    }}>{`Examples: Delete`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`deleteText()`}</inlineCode>{` method removes a specific range of text from the content. It accepts a `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/interfaces/TextRange.md\"\n      }}><inlineCode parentName=\"a\">{`deleteRange`}</inlineCode></a>{` parameter.`}</p>\n    <h4 {...{\n      \"id\": \"example-delete-text-range\"\n    }}>{`Example: Delete Text Range`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, constants } from \"express-document-sdk\";\n\n// Create a new TextNode\nconst textNode = editor.createText(\"It's Friday, don't deploy to Production!\");\nconst contentModel = textNode.fullContent;\n\n// Center the text on the page\nconst insertionParent = editor.context.insertionParent;\ntextNode.setPositionInParent(\n  { x: insertionParent.width / 2, y: insertionParent.height / 2 },\n  { x: 0, y: 0 }\n);\n\n// Add the TextNode to the document\ninsertionParent.children.append(textNode);\n\n// Delete 13 characters starting at position 6\ncontentModel.deleteText({ start: 13, length: 6 });\n\n// It's Friday, don't deploy to Production!\n// 01234567890123\n//              ^^^^^^\n// It's Friday, deploy to Production!\n\n// You can delete multiple ranges calling the method as many times as needed\n\ncontentModel.deleteText({ start: 12, length: 22 });\n\n// It's Friday!\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"style-handling\"\n    }}>{`Style Handling`}</h3>\n    <p>{`As demonstrated in the examples above, when using the text replacement APIs, you have several options for controlling how styles are applied to the new text:`}</p>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Custom Styles`}</strong>{`: Provide a `}<a parentName=\"li\" {...{\n          \"href\": \"../../../references/document-sandbox/document-apis/interfaces/CharacterStylesInput.md\"\n        }}><inlineCode parentName=\"a\">{`CharacterStylesInput`}</inlineCode></a>{` object to specify exact styling.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Style Sources`}</strong>{`: Use `}<a parentName=\"li\" {...{\n          \"href\": \"../../../references/document-sandbox/document-apis/namespaces/Constants/enumerations/TextStyleSource.md\"\n        }}><inlineCode parentName=\"a\">{`TextStyleSource`}</inlineCode></a>{` constants to inherit styles from existing text.`}</li>\n    </ol>\n    <h4 {...{\n      \"id\": \"example-comprehensive-style-handling\"\n    }}>{`Example: Comprehensive Style Handling`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, constants } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame with styled text\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\n// Method 1: Custom styling\ncontentModel.replaceText(\n  \"Custom styled\",\n  { start: 0, length: 5 },\n  {\n    fontSize: 28,\n    color: { red: 0.8, green: 0.2, blue: 0.8, alpha: 1 },\n    letterSpacing: 1.5\n  }\n);\n\n// Method 2: Inherit style from before insertion point\ncontentModel.insertText(\n  \" (inherits previous style) \",\n  15,\n  constants.TextStyleSource.beforeInsertionPoint\n);\n\n// Method 3: Inherit style from after insertion point\ncontentModel.insertText(\n  \" (inherits next style) \",\n  45,\n  constants.TextStyleSource.afterInsertionPoint\n);\n\n// Method 4: For replacement, inherit from first replaced character\n// (default option, when not provided)\ncontentModel.replaceText(\n  \"replaced with original style\",\n  { start: 70, length: 10 },\n  constants.TextStyleSource.firstReplacedCharacter\n);\n`}</code></pre>\n    <InlineAlert slots=\"text, text1\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`Currently, when passing a `}<inlineCode parentName=\"p\">{`TextStyleSource`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` parameter, any unspecified properties are reset to their default values rather than preserving the existing style. This will be fixed in a future release.`}</p>\n    <p>{`As a workaround, you can call `}<inlineCode parentName=\"p\">{`replaceText()`}</inlineCode>{` with only the first two arguments, then run `}<inlineCode parentName=\"p\">{`applyCharacterStyles()`}</inlineCode>{` on the same range afterward.`}</p>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`Please look at the `}<a parentName=\"p\" {...{\n        \"href\": \"#error-handling-with-unavailable-fonts\"\n      }}>{`Fonts Error Handling`}</a>{` section to learn how to handle fonts that may be unavailable when using the Text Replacement APIs with custom styling.`}</p>\n    <h2 {...{\n      \"id\": \"apply-character-styles\"\n    }}>{`Apply Character Styles`}</h2>\n    <p>{`Text styles can be applied to a `}<inlineCode parentName=\"p\">{`TextNode`}</inlineCode>{` using the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#applycharacterstyles\"\n      }}><inlineCode parentName=\"a\">{`fullContent.applyCharacterStyles()`}</inlineCode></a>{` method, which applies one or more styles to the characters in the given range, leaving any style properties that were not specified unchanged.`}</p>\n    <p>{`The styles are defined by the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/interfaces/CharacterStylesInput.md\"\n      }}><inlineCode parentName=\"a\">{`CharacterStylesInput`}</inlineCode></a>{` interface; the properties that can be set are:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`color`}</li>\n      <li parentName=\"ul\">{`font (please see the `}<a parentName=\"li\" {...{\n          \"href\": \"#use-fonts\"\n        }}>{`Use Fonts`}</a>{` section)`}</li>\n      <li parentName=\"ul\">{`fontSize`}</li>\n      <li parentName=\"ul\">{`letterSpacing`}</li>\n      <li parentName=\"ul\">{`underline`}</li>\n      <li parentName=\"ul\">{`baselineShift (Super/SubScript)`}</li>\n      <li parentName=\"ul\">{`link (Hyperlink)`}</li>\n    </ul>\n    <p>{`The range is an object with the `}<inlineCode parentName=\"p\">{`start`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`length`}</inlineCode>{` properties.`}</p>\n    <InlineAlert slots=\"header, text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`Style Ranges and Text edits`}</p>\n    <p>{`Replacing the `}<inlineCode parentName=\"p\">{`fullContent.text`}</inlineCode>{` will result in applying the style from the first range to the whole text. To avoid this, use the `}<a parentName=\"p\" {...{\n        \"href\": \"#replace-text-apis\"\n      }}>{`Text Replacement APIs`}</a>{` instead.`}</p>\n    <p>{`Please note that `}<inlineCode parentName=\"p\">{`applyCharacterStyles()`}</inlineCode>{` is only one way to set styles; you can also use the `}<inlineCode parentName=\"p\">{`characterStyleRanges`}</inlineCode>{` property, which supports both getting and setting styles, as described `}<a parentName=\"p\" {...{\n        \"href\": \"#example-set-all-styles\"\n      }}>{`here`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-set-styles-in-a-range\"\n    }}>{`Example: Set Styles in a range`}</h3>\n    <p>{`Let's change the styles for the first three characters of a TextNode.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, constants } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\n\n// Apply character styles to the first three letters\ntextNode.fullContent.applyCharacterStyles(\n  {\n    color: { red: 0, green: 0.4, blue: 0.8, alpha: 1 },\n    fontSize: 240,\n    letterSpacing: 10,\n    underline: false, // default is true when link is set\n    link: \"https://developer.adobe.com/\"\n    // baselineShift: constants.TextScriptStyle.superscript,\n  },\n  {\n    start: 0,\n    length: 3,\n  }\n);\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`To remove the hyperlink`}</strong>{`, set the `}<inlineCode parentName=\"p\">{`link`}</inlineCode>{` property to an empty string.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`applyCharacterStyles()`}</inlineCode>{` method is not the only one that allows you to set styles; you can also use the `}<inlineCode parentName=\"p\">{`characterStyleRanges`}</inlineCode>{` property, which supports both getting and setting styles.`}</p>\n    <h3 {...{\n      \"id\": \"example-get-all-styles\"\n    }}>{`Example: Get all Styles`}</h3>\n    <p>{`To get the complete list of text character styles, you can use the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#characterstyleranges\"\n      }}><inlineCode parentName=\"a\">{`fullContent.characterStyleRanges`}</inlineCode></a>{` property, which returns an array of `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/interfaces/CharacterStylesRange.md\"\n      }}><inlineCode parentName=\"a\">{`CharacterStylesRange`}</inlineCode></a>{` elements.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\n// Get the array of character styles\nconst existingStyles = contentModel.characterStyleRanges;\n\n// Edit some properties\nexistingStyles[0].fontSize = 10;\n\n// Reassign the array to apply the style changes\ncontentModel.characterStyleRanges = existingStyles;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-set-all-styles\"\n    }}>{`Example: Set all Styles`}</h3>\n    <p>{`You can also use the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#characterstyleranges\"\n      }}><inlineCode parentName=\"a\">{`characterStyleRanges`}</inlineCode></a>{` property to set individual ranges or them all. It's always best to get the array, modify it, and then reassign it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\n// Get the array of character styles\nconst existingStyles = contentModel.characterStyleRanges;\n\n// Edit some properties: the font size of all styles\nexistingStyles.forEach((style) => {\n  style.fontSize = 50;\n});\n// Alternatively, you could set the properties for a specific style range\n// existingStyles[0].fontSize = 50;\n\n// Reassign the array to apply the style changes\ncontentModel.characterStyleRanges = existingStyles;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-re-apply-styles\"\n    }}>{`Example: Re-apply Styles`}</h3>\n    <p>{`In the current release, automatic preservation of the Character Style configuration is not available when editing a TextNode’s content via the `}<inlineCode parentName=\"p\">{`fullContent.text`}</inlineCode>{`. As a temporary solution, you can save the existing character style ranges before updating the text and reapply them afterward to maintain your custom styles.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\n// Save existing character style ranges\nconst savedStyles = contentModel.characterStyleRanges;\n\n// Replace the text content\ncontentModel.text = \"Updated text content\\\\nwith preserved styles\";\n\n// Reapply the saved character styles\ncontentModel.characterStyleRanges = savedStyles;\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`If the text content differs too much from the original, the character style ranges might not be reapplied correctly. This is a temporary solution until automatic preservation of character styles is available.`}</p>\n    <h2 {...{\n      \"id\": \"use-fonts\"\n    }}>{`Use Fonts`}</h2>\n    <p>{`In the Adobe Express Document API, Fonts are part of the Character Styles; we're treating them separately here for clarity. Similarly to the color and other properties, you can use individual `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/interfaces/CharacterStylesRange.md\"\n      }}><inlineCode parentName=\"a\">{`CharacterStylesRange`}</inlineCode></a>{` items from the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#characterstyleranges\"\n      }}><inlineCode parentName=\"a\">{`CharacterStyleRanges`}</inlineCode></a>{` array as Font getters and setters, or use the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#applycharacterstyles\"\n      }}><inlineCode parentName=\"a\">{`applyCharacterStyles()`}</inlineCode></a>{` method to apply a Font style to a specific range.`}</p>\n    <p>{`The only caveat is that you cannot set the font as an Object literal, like, e.g., colors; fonts must be of type `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/AvailableFont.md\"\n      }}><inlineCode parentName=\"a\">{`AvailableFont`}</inlineCode></a>{`, and are instantiated from the `}<inlineCode parentName=\"p\">{`fonts`}</inlineCode>{` object (imported from the `}<inlineCode parentName=\"p\">{`\"express-document-sdk\"`}</inlineCode>{`) using the asynchronous `}<inlineCode parentName=\"p\">{`fromPostscriptName()`}</inlineCode>{` method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Always\n✅ const font = await fonts.fromPostscriptName(\"SourceSans3-Bold\");\n\n// Won't work\n❌ const font = {\n  availableForEditing: true,\n  isPremium: false,\n  family: \"Source Sans 3\",\n  postscriptName: \"SourceSans3-Bold\",\n  style: \"Bold\",\n}\n`}</code></pre>\n    <p>{`You can get PostScript names by setting different text fonts in the Adobe Express UI; then, log and inspec the `}<inlineCode parentName=\"p\">{`font`}</inlineCode>{` property of `}<inlineCode parentName=\"p\">{`characterStyleRange`}</inlineCode>{`, as seen `}<a parentName=\"p\" {...{\n        \"href\": \"#example-get-all-styles\"\n      }}>{`here`}</a>{`.`}</p>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`Remember that the `}<inlineCode parentName=\"p\">{`fromPostscriptName()`}</inlineCode>{` method is `}<strong parentName=\"p\">{`asynchronous`}</strong>{`. The promise resolves to an `}<inlineCode parentName=\"p\">{`AvailableFont`}</inlineCode>{` instance only for fonts that the user has permission to use for editing content; otherwise, it will resolve to `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-set-fonts-in-a-range\"\n    }}>{`Example: Set Fonts in a range`}</h3>\n    <p>{`Let's now change the font of the first three characters in a TextNode. Please note that although you're allowed to set the font as the only style, the font object itself must contain all the properties, as the following code snippet demonstrates.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, fonts } from \"express-document-sdk\"; // 👈 fonts import\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\n\n// Getting a new font object\nconst lato = await fonts.fromPostscriptName(\"Lato-Light\");\nif (!lato) return; // in case the user isn't entitled to use this font\n\n// ⚠️ Queueing the edit\neditor.queueAsyncEdit(() => {\n  textNode.fullContent.applyCharacterStyles(\n    { font: lato, fontSize: 24 },\n    { start: 0, length: 3 }\n  );\n});\n`}</code></pre>\n    <InlineAlert slots=\"header, text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`Asynchronous operations`}</p>\n    <p>{`Queuing the `}<inlineCode parentName=\"p\">{`applyCharacterStyles()`}</inlineCode>{` method is necessary because `}<inlineCode parentName=\"p\">{`fromPostscriptName()`}</inlineCode>{` is asynchronous. This ensures the edit is properly tracked for saving and undo. You can read more about this in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/Editor.md#queueasyncedit\"\n      }}>{`queueAsyncEdit()`}</a>{` reference.`}</p>\n    <h3 {...{\n      \"id\": \"example-get-all-fonts\"\n    }}>{`Example: Get all Fonts`}</h3>\n    <p>{`A font, regardless of whether accessed via `}<inlineCode parentName=\"p\">{`CharacterStylesRange`}</inlineCode>{` or executing `}<inlineCode parentName=\"p\">{`fromPostscriptName()`}</inlineCode>{`, exposes the following properties:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isPremium`}</inlineCode>{`: boolean, indicating whether the font is a Premium Adobe font.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`availableForEditing`}</inlineCode>{`: boolean, indicating whether the user has access or licensing permissions to create or edit content with this font.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`family`}</inlineCode>{`: string, the font family name, as you would find in the Text panel's UI.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`postscriptName`}</inlineCode>{`: string, the PostScript name of the font.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`style`}</inlineCode>{`: string, the style of the font (e.g., \"Regular\", \"Bold\", \"Italic\").`}</li>\n    </ul>\n    <p>{`You can log `}<inlineCode parentName=\"p\">{`font`}</inlineCode>{` and inspect it to find the actual PostScript name.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\n// Get the array of character styles\nconst existingStyles = contentModel.characterStyleRanges;\n\n// Log the font of the first style\nconsole.log(existingStyles[0].font);\n// {\n//   isPremium: false\n//   availableForEditing: true\n//   family: \"Source Sans 3\"\n//   postscriptName: \"SourceSans3-Regular\"\n//   style: \"Regular\"\n// }\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-set-all-fonts\"\n    }}>{`Example: Set all Fonts`}</h3>\n    <p>{`Similarly to what we've seen with `}<a parentName=\"p\" {...{\n        \"href\": \"#example-set-all-styles\"\n      }}>{`other styles`}</a>{`, you can set the font in a range by reassigning the `}<inlineCode parentName=\"p\">{`characterStyleRanges`}</inlineCode>{` array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, fonts } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\nconst sourceSansBold = await fonts.fromPostscriptName(\"SourceSans3-Bold\");\nif (!sourceSansBold) return;\n\n// Get the array of character styles\nconst existingStyles = contentModel.characterStyleRanges;\n\n// Set the font for all styles\nexistingStyles.forEach((style) => {\n  style.font = sourceSansBold;\n});\n// Alternatively, you could set the font for a specific style range\n// existingStyles[0].font = sourceSansBold;\n\n// Reassign the array to apply the style changes\neditor.queueAsyncEdit(() => {\n  contentModel.characterStyleRanges = existingStyles;\n});\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`Since we're dealing with asynchronous operations, we're queuing the edit to ensure it's properly tracked for saving and undo, as we did for `}<a parentName=\"p\" {...{\n        \"href\": \"#example-set-all-styles\"\n      }}>{`setting other styles`}</a></p>\n    <h3 {...{\n      \"id\": \"error-handling-with-unavailable-fonts\"\n    }}>{`Error Handling with Unavailable Fonts`}</h3>\n    <p>{`Text operations may fail if the existing text contains fonts that are unavailable to the current user; the text content cannot be modified and certain styling changes are limited as well. You can check for this condition and handle it appropriately.`}</p>\n    <h4 {...{\n      \"id\": \"example-check-for-unavailable-fonts\"\n    }}>{`Example: Check for Unavailable Fonts`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, fonts } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\nlet safeFont;\n\ntry {\n  // Check if the text has unavailable fonts\n\n  if (contentModel.hasUnavailableFonts()) {\n    console.warn(\"Text contains unavailable fonts. Text modification may be limited.\");\n\n    // You might want to inform the user or handle this case specially\n    // For example, you could change the font to an available one first\n    safeFont = await fonts.fromPostscriptName(\"SourceSans3-Regular\");\n  }\n\n  // // ⚠️ Queueing the edit\n  editor.queueAsyncEdit(() => { // Queue the edit to ensure it's properly tracked for saving and undo\n  // Proceed with the text operation\n    contentModel.insertText(\n      \", \",             // inserted text\n      15                // insertion index\n      {\n        font: safeFont, // font to use (surely available)\n      }\n    );\n  });\n\n} catch (error) {\n  console.error(\"Text replacement failed:\", error.message);\n  // Handle the error appropriately\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"apply-paragraph-styles\"\n    }}>{`Apply Paragraph Styles`}</h2>\n    <p>{`Paragraph styles can be applied to a TextNode using the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#applyparagraphstyles\"\n      }}><inlineCode parentName=\"a\">{`fullContent.applyParagraphStyles()`}</inlineCode></a>{` method. This method applies one or more style properties to entire paragraphs within the specified range, while leaving any style properties that are not provided unchanged. In contrast to directly setting the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#paragraphstyleranges\"\n      }}><inlineCode parentName=\"a\">{`paragraphStyleRanges`}</inlineCode></a>{` property—which resets any unspecified properties to their defaults—using `}<inlineCode parentName=\"p\">{`applyParagraphStyles()`}</inlineCode>{` lets you update only the desired aspects of the style.`}</p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` This is currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until it has been declared stable. To use it, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <p>{`The available properties are defined by the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/interfaces/ParagraphStylesInput.md\"\n      }}><inlineCode parentName=\"a\">{`ParagraphStylesInput`}</inlineCode></a>{` interface and include:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`lineSpacing`}</strong>{`: Specifies the spacing between lines (leading), expressed as a multiple of the font’s default spacing (e.g. 1.5 means 150% of normal).`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`spaceBefore`}</strong>{`: Sets the space (in points) before a paragraph.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`spaceAfter`}</strong>{`: Sets the space (in points) after a paragraph.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`list`}</strong>{`: Configures list styles (ordered or unordered) for the paragraph. When specifying list styles, you provide the settings via either the `}<a parentName=\"li\" {...{\n          \"href\": \"../../../references/document-sandbox/document-apis/interfaces/OrderedListStyleInput.md\"\n        }}><inlineCode parentName=\"a\">{`OrderedListStyleInput`}</inlineCode></a>{` or `}<a parentName=\"li\" {...{\n          \"href\": \"../../../references/document-sandbox/document-apis/interfaces/UnorderedListStyleInput.md\"\n        }}><inlineCode parentName=\"a\">{`UnorderedListStyleInput`}</inlineCode></a>{` interface.`}</li>\n    </ul>\n    <p>{`Paragraphs are defined by newline characters (`}<inlineCode parentName=\"p\">{`\\\\n`}</inlineCode>{`), so the style ranges should align with these boundaries. The method accepts an optional range—an object with `}<inlineCode parentName=\"p\">{`start`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`length`}</inlineCode>{` properties—that determines which portion of the text content will be updated. If no range is provided, the styles will be applied to the entire text content flow.`}</p>\n    <InlineAlert slots=\"header, text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`Style Ranges and Text Edits`}</p>\n    <p>{`For the moment, replacing the `}<inlineCode parentName=\"p\">{`fullContent.text`}</inlineCode>{` will result in applying the style from the first range to the whole text. This behavior is subject to change in future releases.`}</p>\n    <h3 {...{\n      \"id\": \"example-set-styles-in-a-range-1\"\n    }}>{`Example: Set Styles in a Range`}</h3>\n    <p>{`In this example, we modify the styles for a specific paragraph (the first 20 characters) by updating the line spacing and adding an ordered list style.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, constants } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\n\n// Apply paragraph styles to the specified range (e.g., the first paragraph)\ntextNode.fullContent.applyParagraphStyles(\n  {\n    lineSpacing: 1.5, // 150% of normal line spacing\n    spaceBefore: 12, // 12 points before the paragraph\n    spaceAfter: 8, // 8 points after the paragraph\n    list: {\n      type: constants.ParagraphListType.ordered,\n      numbering: constants.OrderedListNumbering.doubleZeroPrefixNumeric,\n      prefix: \"\",\n      postfix: \".\",\n      indentLevel: 2, // Indent level for the list\n    },\n  },\n  {\n    start: 0,\n    length: 20,\n  }\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-get-all-styles-1\"\n    }}>{`Example: Get All Styles`}</h3>\n    <p>{`To view the paragraph styles currently applied to a TextNode, you can access the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#paragraphstyleranges\"\n      }}><inlineCode parentName=\"a\">{`fullContent.paragraphStyleRanges`}</inlineCode></a>{` property. This property returns an array of `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/interfaces/ParagraphStylesRange.md\"\n      }}><inlineCode parentName=\"a\">{`ParagraphStylesRange`}</inlineCode></a>{` objects, each representing the style configuration for a contiguous block of text (i.e. a paragraph).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\n// Retrieve and log the paragraph style ranges\nconst paragraphStyles = contentModel.paragraphStyleRanges;\nconsole.log(\"Paragraph Styles: \", paragraphStyles);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-set-all-styles-1\"\n    }}>{`Example: Set All Styles`}</h3>\n    <p>{`You can also update paragraph styles for the entire text content by modifying the array returned by `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#paragraphstyleranges\"\n      }}><inlineCode parentName=\"a\">{`paragraphStyleRanges`}</inlineCode></a>{`. In this example, we update the `}<inlineCode parentName=\"p\">{`spaceAfter`}</inlineCode>{` property for all paragraphs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\n// Get the current paragraph style ranges\nconst existingStyles = contentModel.paragraphStyleRanges;\n\n// Update each range (for instance, set spaceAfter to 10 points)\nexistingStyles.forEach((range) => {\n  range.spaceAfter = 10;\n});\n\n// Reassign the modified array to apply the changes\ncontentModel.paragraphStyleRanges = existingStyles;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-reapply-styles\"\n    }}>{`Example: Reapply Styles`}</h3>\n    <p>{`When you update the text content, paragraph boundaries may change. To preserve your custom paragraph styles, save the current style ranges, modify the text, and then reapply the saved styles.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\n// Save the current paragraph style ranges\nconst savedParagraphStyles = contentModel.paragraphStyleRanges;\n\n// Replace the text content\ncontentModel.text = \"New text content\\\\nwith updated paragraphs\";\n\n// Reapply the saved paragraph styles\ncontentModel.paragraphStyleRanges = savedParagraphStyles;\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`If the updated text does not match the original paragraph boundaries, some styles may not be reapplied as expected. This is a temporary limitation until automatic preservation of paragraph styles is implemented.`}</p>\n    <h2 {...{\n      \"id\": \"deal-with-text-flow\"\n    }}>{`Deal with Text Flow`}</h2>\n    <p>{`With the introduction of \"Text Flow\" in Adobe Express (allowing content to move freely between multiple text frames), the concept of a text node had to be separated from text content.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`fullContent`}</inlineCode>{` property `}<em parentName=\"p\">{`points to`}</em>{` a `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md\"\n      }}><inlineCode parentName=\"a\">{`TextContentModel`}</inlineCode></a>{` object, which contains the actual text content that multiple `}<inlineCode parentName=\"p\">{`TextNode`}</inlineCode>{` instances can share.`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame that contains\n// text spanning to multiple text nodes\nconst selectedTextNode = editor.context.selection[0];\n\n// Log all the text nodes that share the same TextContentModel\nfor (const textNode of selectedTextNode.fullContent.allTextNodes) {\n  console.log(textNode);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"faqs\"\n    }}>{`FAQs`}</h2>\n    <h4 {...{\n      \"id\": \"q-how-do-i-create-text-in-a-document\"\n    }}>{`Q: How do I create text in a document?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Call `}<inlineCode parentName=\"p\">{`editor.createText(\"...\")`}</inlineCode>{` to get a new standalone `}<inlineCode parentName=\"p\">{`TextNode`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"q-where-is-the-actual-string-stored\"\n    }}>{`Q: Where is the actual string stored?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` In `}<inlineCode parentName=\"p\">{`textNode.fullContent.text`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-can-i-edit-existing-text\"\n    }}>{`Q: How can I edit existing text?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`replaceText()`}</inlineCode>{` for range replacement, `}<inlineCode parentName=\"p\">{`insertText()`}</inlineCode>{` for insertion at position, `}<inlineCode parentName=\"p\">{`appendText()`}</inlineCode>{` for adding to end, and `}<inlineCode parentName=\"p\">{`deleteText()`}</inlineCode>{` for range deletion.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-method-applies-character-level-formatting\"\n    }}>{`Q: What method applies character-level formatting?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` `}<inlineCode parentName=\"p\">{`fullContent.applyCharacterStyles(styles, range)`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-read-or-batch-edit-character-styles\"\n    }}>{`Q: How do I read or batch-edit character styles?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use the `}<inlineCode parentName=\"p\">{`characterStyleRanges`}</inlineCode>{` array to get or set ranges.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-change-a-font-programmatically\"\n    }}>{`Q: How do I change a font programmatically?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Await `}<inlineCode parentName=\"p\">{`fonts.fromPostscriptName(\"PSName\")`}</inlineCode>{` and pass the font to `}<inlineCode parentName=\"p\">{`applyCharacterStyles`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"q-why-must-font-edits-be-queued\"\n    }}>{`Q: Why must font edits be queued?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Because `}<inlineCode parentName=\"p\">{`fromPostscriptName()`}</inlineCode>{` is async; wrap the style edit in `}<inlineCode parentName=\"p\">{`editor.queueAsyncEdit()`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-apply-paragraph-level-formatting\"\n    }}>{`Q: How do I apply paragraph-level formatting?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`fullContent.applyParagraphStyles(styles, range)`}</inlineCode>{` (requires `}<inlineCode parentName=\"p\">{`\"experimentalApis\": true`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`).`}</p>\n    <h4 {...{\n      \"id\": \"q-where-can-i-inspect-paragraph-formats\"\n    }}>{`Q: Where can I inspect paragraph formats?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Read or modify `}<inlineCode parentName=\"p\">{`fullContent.paragraphStyleRanges`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-happens-to-styles-after-replacing-text\"\n    }}>{`Q: What happens to styles after replacing text?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` They reset; save style ranges first and reassign them afterward to preserve formatting. This is a temporary limitation until automatic preservation of paragraph styles is implemented.`}</p>\n    <h4 {...{\n      \"id\": \"q-can-i-create-a-threaded-text-frame-with-createtext\"\n    }}>{`Q: Can I create a threaded text frame with createText()?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` No, it only returns `}<inlineCode parentName=\"p\">{`StandaloneTextNode`}</inlineCode>{`; threaded nodes aren’t creatable yet.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-find-all-frames-sharing-the-same-story\"\n    }}>{`Q: How do I find all frames sharing the same story?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Iterate over `}<inlineCode parentName=\"p\">{`textNode.fullContent.allTextNodes`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"q-whats-the-difference-between-replacetext-and-setting-fullcontenttext\"\n    }}>{`Q: What's the difference between `}<inlineCode parentName=\"h4\">{`replaceText()`}</inlineCode>{` and setting `}<inlineCode parentName=\"h4\">{`fullContent.text`}</inlineCode>{`?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` `}<inlineCode parentName=\"p\">{`replaceText()`}</inlineCode>{` preserves existing styles and allows you to control styling of the replacement text, while setting `}<inlineCode parentName=\"p\">{`fullContent.text`}</inlineCode>{` (not recommended) resets all style ranges to default.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-insert-text-while-preserving-existing-styles\"\n    }}>{`Q: How do I insert text while preserving existing styles?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`insertText()`}</inlineCode>{` with a `}<inlineCode parentName=\"p\">{`TextStyleSource`}</inlineCode>{` constant like `}<inlineCode parentName=\"p\">{`constants.TextStyleSource.beforeInsertionPoint`}</inlineCode>{` to inherit styles from surrounding text.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-happens-if-i-try-to-modify-text-with-unavailable-fonts\"\n    }}>{`Q: What happens if I try to modify text with unavailable fonts?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` The operation may throw an error. Use `}<inlineCode parentName=\"p\">{`hasUnavailableFonts()`}</inlineCode>{` to check first, and consider changing fonts to available ones before modifying text.`}</p>\n    <h4 {...{\n      \"id\": \"q-can-i-specify-custom-styles-when-using-text-replacement-apis\"\n    }}>{`Q: Can I specify custom styles when using text replacement APIs?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Yes, all text replacement methods (`}<inlineCode parentName=\"p\">{`replaceText()`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`insertText()`}</inlineCode>{`) accept an optional style parameter where you can provide `}<inlineCode parentName=\"p\">{`CharacterStylesInput`}</inlineCode>{` or use `}<inlineCode parentName=\"p\">{`TextStyleSource`}</inlineCode>{` constants.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-add-or-remove-hyperlinks-from-text\"\n    }}>{`Q: How do I add or remove hyperlinks from text?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`applyCharacterStyles()`}</inlineCode>{` with a `}<inlineCode parentName=\"p\">{`link`}</inlineCode>{` property. Set to a URL string to add a hyperlink, or to an empty string to remove it.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-handle-premium-fonts-and-font-availability\"\n    }}>{`Q: How do I handle premium fonts and font availability?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Check `}<inlineCode parentName=\"p\">{`font.isPremium`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`font.availableForEditing`}</inlineCode>{` properties. Use `}<inlineCode parentName=\"p\">{`hasUnavailableFonts()`}</inlineCode>{` to detect issues. Premium fonts require user subscription; unavailable fonts prevent text modification until replaced with available fonts.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","isMDXComponent"],"sourceRoot":""}