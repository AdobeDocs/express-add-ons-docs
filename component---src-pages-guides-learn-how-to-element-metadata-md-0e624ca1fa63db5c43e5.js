"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[3599],{167:function(e,a,n){n.r(a),n.d(a,{_frontmatter:function(){return r},default:function(){return u}});var t=n(58168),d=n(80045),o=(n(88763),n(15680)),m=n(83407);const i=["components"],r={},s=e=>function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",a)},l=s("InlineAlert"),p=s("CodeBlock"),c={_frontmatter:r},x=m.A;function u(e){let{components:a}=e,n=(0,d.A)(e,i);return(0,o.mdx)(x,(0,t.A)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"element-metadata"},"Element Metadata"),(0,o.mdx)("p",null,"Store and retrieve custom metadata on document elements."),(0,o.mdx)("h2",{id:"overview"},"Overview"),(0,o.mdx)("p",null,"Add-ons can store ",(0,o.mdx)("strong",{parentName:"p"},"private metadata")," (custom data accessible only to the add-on that set it) on elements within the Express document. There are two main approaches for working with element metadata:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},"Runtime Metadata"),": Set and modify metadata on existing elements using the Document Sandbox APIs"),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},"Import-Time Metadata"),": Attach metadata to media assets during import using the Add-on UI SDK")),(0,o.mdx)("h2",{id:"runtime-element-metadata"},"Runtime Element Metadata"),(0,o.mdx)("h3",{id:"get-and-set-element-metadata"},"Get and Set Element Metadata"),(0,o.mdx)("p",null,"Add-ons can store metadata on any node within the Express document. Currently, each node can hold up to ",(0,o.mdx)("strong",{parentName:"p"},"3 KB")," of data, organized as key/value pairs where both keys and values are Strings. Additionally, there is a limit of ",(0,o.mdx)("strong",{parentName:"p"},"20 key/value pairs")," per node."),(0,o.mdx)("p",null,"All nodes that inherit from the ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/document-sandbox/document-apis/classes/BaseNode.md"},(0,o.mdx)("inlineCode",{parentName:"a"},"BaseNode"))," class have a ",(0,o.mdx)("inlineCode",{parentName:"p"},"addOnData")," property that can be used to store and retrieve metadata. It is an instance of the ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/document-sandbox/document-apis/classes/AddOnData.md"},(0,o.mdx)("inlineCode",{parentName:"a"},"AddOnData"))," class, which provides methods to perform operations such as ",(0,o.mdx)("inlineCode",{parentName:"p"},"getItem()"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"setItem()"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"removeItem()"),", and ",(0,o.mdx)("inlineCode",{parentName:"p"},"clear()"),"."),(0,o.mdx)("p",null,"With the ",(0,o.mdx)("inlineCode",{parentName:"p"},"remainingQuota")," property, you can check how much space is left, both in terms of ",(0,o.mdx)("inlineCode",{parentName:"p"},"sizeInBytes")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"numKeys"),", while ",(0,o.mdx)("inlineCode",{parentName:"p"},"keys()")," returns an array of the keys in use."),(0,o.mdx)(l,{slots:"text",variant:"info",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"While Document and Page metadata operate from the ",(0,o.mdx)("inlineCode",{parentName:"p"},"addOnUISdk.app.document")," object and belong to the ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/index.md"},"Add-on UI SDK"),", Element metadata are part of the ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/document-sandbox/document-apis/index.md"},"Document Sandbox")," and are accessed through the ",(0,o.mdx)("inlineCode",{parentName:"p"},"node.addOnData")," property."),(0,o.mdx)("h3",{id:"example"},"Example"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'import { editor } from "express-document-sdk";\n\n// Create some dummy node\nconst text = editor.createText("Hello, World!");\n\n// Store some metadata as key/value pairs\ntext.addOnData.setItem("originalText", "Hello, World!");\ntext.addOnData.setItem("date", new Date().toISOString());\n\n// Retrieve the metadata\nconsole.log("Original text: ", text.addOnData.getItem("originalText"));\n\n// Check the remaining quota\nconsole.log("Remaining quota: ", text.addOnData.remainingQuota);\n// {\n//   "sizeInBytes": 3062,\n//   "numKeys": 19\n// }\n\n// Check the keys in use\nconsole.log("Keys in use: ", text.addOnData.keys());\n// ["originalText", "date"]\n\n// Remove the metadata\ntext.addOnData.removeItem("originalText");\n\n// clear all metadata\ntext.addOnData.clear();\n')),(0,o.mdx)("p",null,"Please note that the ",(0,o.mdx)("inlineCode",{parentName:"p"},"addOnData")," property is iterable with ",(0,o.mdx)("inlineCode",{parentName:"p"},"for...of")," loops, so you can use it to iterate over the key/value pairs; each pair is an array with the key as the first element and the value as the second."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"// iterate over key/value pairs\nfor (let pair of text.addOnData) {\n  console.log(pair);\n  // ['originalText', 'Hello, World!']\n  // ['date', '2025-01-20T11:06:19.051Z']\n}\n")),(0,o.mdx)("p",null,"Alternatively, you can use the ",(0,o.mdx)("inlineCode",{parentName:"p"},"keys()")," method to get an array of all keys and then iterate over them."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"// Iterate over all keys\ntext.addOnData.keys().forEach((key) => {\n  console.log(`Key: ${key}, Value: ${text.addOnData.getItem(key)}`);\n});\n")),(0,o.mdx)("h2",{id:"import-time-metadata-for-media-assets-add-on-ui-sdk"},"Import-Time Metadata for Media Assets (Add-on UI SDK)"),(0,o.mdx)("p",null,"When importing media assets (images, videos, animated images) using the Add-on UI SDK, you can attach metadata using the ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/app-document.md#importaddondata"},(0,o.mdx)("inlineCode",{parentName:"a"},"ImportAddOnData"))," parameter. This provides two distinct types of metadata storage:"),(0,o.mdx)("h3",{id:"container-vs-media-metadata"},"Container vs. Media Metadata"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},(0,o.mdx)("inlineCode",{parentName:"strong"},"nodeAddOnData"))," - Container-Level Metadata:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Persists with the individual asset container"),(0,o.mdx)("li",{parentName:"ul"},"Remains attached even when the asset content is replaced"),(0,o.mdx)("li",{parentName:"ul"},"Each container instance has independent metadata"),(0,o.mdx)("li",{parentName:"ul"},"Accessed via ",(0,o.mdx)("a",{parentName:"li",href:"../../../references/document-sandbox/document-apis/classes/MediaContainerNode.md#addondata"},(0,o.mdx)("inlineCode",{parentName:"a"},"MediaContainerNode.addOnData"))," in the Document Sandbox")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},(0,o.mdx)("inlineCode",{parentName:"strong"},"mediaAddOnData"))," - Content-Level Metadata:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Tied to the actual asset content"),(0,o.mdx)("li",{parentName:"ul"},"Shared across all copies of the same asset in the document"),(0,o.mdx)("li",{parentName:"ul"},"Reset if the asset content is replaced with different media"),(0,o.mdx)("li",{parentName:"ul"},"Accessed via ",(0,o.mdx)("a",{parentName:"li",href:"../../../references/document-sandbox/document-apis/classes/MediaRectangleNode.md#mediaaddondata"},(0,o.mdx)("inlineCode",{parentName:"a"},"MediaRectangleNode.mediaAddOnData"))," in the Document Sandbox")),(0,o.mdx)(l,{slots:"text",variant:"warning",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"Import-time metadata is ",(0,o.mdx)("strong",{parentName:"p"},"not supported")," for PSD/AI assets. An error will be thrown if you attempt to use ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/app-document.md#importaddondata"},(0,o.mdx)("inlineCode",{parentName:"a"},"ImportAddOnData"))," with these file types."),(0,o.mdx)("h3",{id:"example-set-metadata-with-add-on-ui-sdk-importaddondata"},"Example: Set Metadata with Add-on UI SDK ",(0,o.mdx)("inlineCode",{parentName:"h3"},"ImportAddOnData")),(0,o.mdx)(p,{slots:"heading, code",repeat:"4",languages:"JavaScript",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"add-image"},"Add Image"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'// Store metadata when importing\n// ui/index.js (iframe runtime)\nimport addOnUISdk from "https://new.express.adobe.com/static/add-on-sdk/sdk.js";\n\naddOnUISdk.ready.then(async () => {\n  try {\n    // Create or fetch your image blob\n    const imageBlob = await fetch("./sample-image.png").then(r => r.blob());\n    \n    // Import image with ImportAddOnData\n    await addOnUISdk.app.document.addImage(\n      imageBlob,\n      // Optional MediaAttributes\n      {\n        title: "Sample Test Image",\n        author: "Add-on Developer"\n      },\n      {\n        // Container-level metadata (persists with container)\n        nodeAddOnData: {\n          "imageId": "test_001",\n          "category": "demo",\n          "importDate": new Date().toISOString(),\n          "source": "addon-tester"\n        },\n        // Content-level metadata (tied to actual image content)\n        mediaAddOnData: {\n          "resolution": "200x150",\n          "format": "PNG",\n          "source": "generated_canvas",\n          "color": "green"\n        }\n      }\n    );\n    \n    console.log("✅ Image imported successfully with metadata!");\n    \n  } catch (error) {\n    console.error("❌ Failed to import image:", error);\n  }\n});\n')),(0,o.mdx)("h4",{id:"add-video"},"Add Video"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'// ui/index.js (iframe runtime)\n// Import a video with container metadata only\nawait addOnUISdk.app.document.addVideo(videoBlob, {\n  title: "Product Demo"\n}, {\n  nodeAddOnData: {\n    "video-category": "product-demo",\n    "import-timestamp": new Date().toISOString()\n  },\n  mediaAddOnData: {\n    "resolution": "1920x1080",\n    "format": "MP4",\n    "duration": "596s",\n    "testFlag": "remote_video_test"\n  }\n});\n')),(0,o.mdx)("h4",{id:"add-animated-image"},"Add Animated Image"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'// ui/index.js (iframe runtime)\n// Import an animated image with media metadata only\nawait addOnUISdk.app.document.addAnimatedImage(gifBlob, {\n  title: "Animated Logo"\n}, {\n  mediaAddOnData: {\n    "animation-type": "logo",\n    "frame-count": "24",\n    "duration": "2000ms"\n  }\n});\n')),(0,o.mdx)(l,{slots:"text",variant:"info",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/app-document.md#importaddondata"},(0,o.mdx)("inlineCode",{parentName:"a"},"ImportAddOnData"))," is also supported in drag-and-drop operations via the ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/addonsdk-app.md#enabledragtodocument"},(0,o.mdx)("inlineCode",{parentName:"a"},"enableDragToDocument"))," method. See the ",(0,o.mdx)("a",{parentName:"p",href:"drag_and_drop.md"},"Drag and Drop guide")," for more details."),(0,o.mdx)("h3",{id:"example-retrieve-imported-metadata-in-document-sandbox"},"Example: Retrieve Imported Metadata in Document Sandbox"),(0,o.mdx)(p,{slots:"heading, code",repeat:"2",languages:"JavaScript",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"all-media-metadata"},"All Media Metadata"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"// sandbox/code.js (document sandbox)\nimport { editor } from \"express-document-sdk\";\n\nfunction retrieveAllMediaMetadata() {\n  console.log(\"Starting metadata retrieval...\");\n  \n  const documentRoot = editor.documentRoot;\n  let mediaContainerCount = 0;\n  \n  // Traverse document structure to find media nodes\n  for (const page of documentRoot.pages) {\n    console.log(`📄 Checking page: ${page.id}`);\n    \n    for (const artboard of page.artboards) {\n      console.log(`🎨 Checking artboard: ${artboard.id}`);\n      \n      // Use recursive traversal to find all MediaContainer nodes\n      traverseNodeForMedia(artboard);\n    }\n  }\n  \n  function traverseNodeForMedia(node) {\n    // Check if current node is a MediaContainer\n    if (node.type === 'MediaContainer') {\n      mediaContainerCount++;\n      console.log(`\\n📦 Found MediaContainer #${mediaContainerCount}: ${node.id}`);\n      \n      try {\n        // Retrieve container metadata (nodeAddOnData)\n        const containerMetadata = {};\n        const containerKeys = node.addOnData.keys();\n        \n        for (const key of containerKeys) {\n          containerMetadata[key] = node.addOnData.getItem(key);\n        }\n        \n        if (containerKeys.length > 0) {\n          console.log('📝 Container metadata (nodeAddOnData):', containerMetadata);\n        } else {\n          console.log('📝 No container metadata found');\n        }\n        \n        // Access the media rectangle directly via the mediaRectangle property\n        const mediaRectangle = node.mediaRectangle;\n        \n        if (mediaRectangle) {\n          console.log(`🖼️  Media rectangle type: ${mediaRectangle.type}`);\n          \n          try {\n            // Retrieve media-specific metadata (mediaAddOnData)\n            const mediaMetadata = {};\n            const mediaKeys = mediaRectangle.mediaAddOnData.keys();\n            \n            for (const key of mediaKeys) {\n              mediaMetadata[key] = mediaRectangle.mediaAddOnData.getItem(key);\n            }\n            \n            if (mediaKeys.length > 0) {\n              console.log('🎯 Media metadata (mediaAddOnData):', mediaMetadata);\n            } else {\n              console.log('🎯 No media metadata found');\n            }\n            \n          } catch (error) {\n            // Handle PSD/AI assets or other errors\n            console.log('⚠️  Cannot access mediaAddOnData (likely PSD/AI asset):', error.message);\n          }\n        } else {\n          console.log('⚠️  No media rectangle found');\n        }\n        \n      } catch (error) {\n        console.error('❌ Error accessing container metadata:', error);\n      }\n    }\n    \n    // Recursively traverse all children\n    // MediaContainers can be nested inside groups or other containers\n    if (node.allChildren) {\n      for (const child of node.allChildren) {\n        traverseNodeForMedia(child);\n      }\n    }\n  }\n  \n  console.log(`\\n✅ Metadata retrieval complete! Found ${mediaContainerCount} MediaContainer(s)`);\n}\n")),(0,o.mdx)("h4",{id:"known-mediacontainer"},"Known MediaContainer"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'// sandbox/code.js (document sandbox)\n// Simple access example for a known MediaContainer\nconst mediaContainer = /* get MediaContainerNode from document */;\n\n// Access container-level metadata\nconst containerMetadata = mediaContainer.addOnData;\nconsole.log("Image ID:", containerMetadata.getItem("imageId"));\nconsole.log("Category:", containerMetadata.getItem("category"));\n\n// Access media-level metadata\nconst mediaRectangle = mediaContainer.mediaRectangle;\nconst mediaMetadata = mediaRectangle.mediaAddOnData;\nconsole.log("Resolution:", mediaMetadata.getItem("resolution"));\nconsole.log("Format:", mediaMetadata.getItem("format"));\n\n// Check all available keys\nconsole.log("Container keys:", containerMetadata.keys());\nconsole.log("Media keys:", mediaMetadata.keys());\n')),(0,o.mdx)("h3",{id:"when-to-use-each-type"},"When to Use Each Type"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Use ",(0,o.mdx)("inlineCode",{parentName:"strong"},"nodeAddOnData")," when:")),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Tracking add-on-specific UI state or settings for each container"),(0,o.mdx)("li",{parentName:"ul"},"Storing metadata that should persist even if the user replaces the media content"),(0,o.mdx)("li",{parentName:"ul"},"Each instance of the media should have independent metadata")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Use ",(0,o.mdx)("inlineCode",{parentName:"strong"},"mediaAddOnData")," when:")),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Storing information about the media content itself (source, licensing, etc.)"),(0,o.mdx)("li",{parentName:"ul"},"The metadata should be shared across all instances of the same media"),(0,o.mdx)("li",{parentName:"ul"},"The metadata is only relevant to the specific media content")),(0,o.mdx)("h2",{id:"use-cases"},"Use Cases"),(0,o.mdx)("p",null,"Element metadata can be useful in various scenarios:"),(0,o.mdx)("h3",{id:"runtime-metadata-use-cases"},"Runtime Metadata Use Cases"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Track original properties a node was created with"),(0,o.mdx)("li",{parentName:"ul"},"Store history of subsequent changes made to elements"),(0,o.mdx)("li",{parentName:"ul"},"Tag nodes in ways meaningful for the add-on (e.g., skip certain operations)"),(0,o.mdx)("li",{parentName:"ul"},"Store temporary data that doesn't need to be persisted"),(0,o.mdx)("li",{parentName:"ul"},"Maintain add-on-specific UI state for elements")),(0,o.mdx)("h3",{id:"import-time-metadata-use-cases"},"Import-Time Metadata Use Cases"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"Asset Attribution"),": Store source URLs, author information, and licensing details"),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"Content Management"),": Track asset IDs, categories, and organizational metadata"),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"Workflow Context"),": Record placement context, import timestamps, and processing flags"),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"Asset Relationships"),": Maintain connections between related media assets"),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"Quality Assurance"),": Store validation flags, approval status, and review notes")),(0,o.mdx)("p",null,"Please refer to the SDK Reference section for ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/document-sandbox/document-apis/classes/AddOnData.md"},(0,o.mdx)("inlineCode",{parentName:"a"},"AddOnData"))," for a complete list of methods, and the ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/AdobeDocs/express-add-on-samples/tree/main/document-sandbox-samples/per-element-metadata"},(0,o.mdx)("inlineCode",{parentName:"a"},"per-element-metadata"))," sample add-on for a demonstrative implementation."),(0,o.mdx)("h2",{id:"faqs"},"FAQs"),(0,o.mdx)("h4",{id:"q-how-do-i-store-metadata-on-an-element"},"Q: How do I store metadata on an element?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,o.mdx)("inlineCode",{parentName:"p"},'node.addOnData.setItem("key", "value")')," to store key/value pairs on any node."),(0,o.mdx)("h4",{id:"q-how-do-i-retrieve-stored-metadata"},"Q: How do I retrieve stored metadata?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,o.mdx)("inlineCode",{parentName:"p"},'node.addOnData.getItem("key")')," to retrieve the value for a specific key."),(0,o.mdx)("h4",{id:"q-what-are-the-storage-limits"},"Q: What are the storage limits?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Each node can store up to 3 KB of data with a maximum of 20 key/value pairs."),(0,o.mdx)("h4",{id:"q-how-do-i-check-remaining-storage-space"},"Q: How do I check remaining storage space?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,o.mdx)("inlineCode",{parentName:"p"},"node.addOnData.remainingQuota")," to get remaining bytes and key count."),(0,o.mdx)("h4",{id:"q-how-do-i-remove-metadata"},"Q: How do I remove metadata?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,o.mdx)("inlineCode",{parentName:"p"},'removeItem("key")')," for specific keys or ",(0,o.mdx)("inlineCode",{parentName:"p"},"clear()")," to remove all metadata."),(0,o.mdx)("h4",{id:"q-how-do-i-iterate-over-all-metadata"},"Q: How do I iterate over all metadata?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,o.mdx)("inlineCode",{parentName:"p"},"for...of")," loops on ",(0,o.mdx)("inlineCode",{parentName:"p"},"addOnData")," or iterate over ",(0,o.mdx)("inlineCode",{parentName:"p"},"keys()")," array with ",(0,o.mdx)("inlineCode",{parentName:"p"},"forEach()"),"."),(0,o.mdx)("h4",{id:"q-can-other-add-ons-access-my-metadata"},"Q: Can other add-ons access my metadata?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," No, metadata is private and only accessible to the add-on that set it."),(0,o.mdx)("h4",{id:"q-what-types-can-i-store"},"Q: What types can I store?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Only strings are supported for both keys and values."),(0,o.mdx)("h4",{id:"q-how-do-i-add-metadata-when-importing-media"},"Q: How do I add metadata when importing media?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Use the ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/app-document.md#importaddondata"},(0,o.mdx)("inlineCode",{parentName:"a"},"ImportAddOnData"))," parameter in media import methods like ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/app-document.md#addimage"},(0,o.mdx)("inlineCode",{parentName:"a"},"addImage()")),", ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/app-document.md#addvideo"},(0,o.mdx)("inlineCode",{parentName:"a"},"addVideo()")),", and ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/app-document.md#addanimatedimage"},(0,o.mdx)("inlineCode",{parentName:"a"},"addAnimatedImage()")),"."),(0,o.mdx)("h4",{id:"q-whats-the-difference-between-nodeaddondata-and-mediaaddondata"},"Q: What's the difference between nodeAddOnData and mediaAddOnData?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"nodeAddOnData")," persists with the container even when media is replaced; ",(0,o.mdx)("inlineCode",{parentName:"p"},"mediaAddOnData")," is tied to the media content and shared across copies."),(0,o.mdx)("h4",{id:"q-how-do-i-access-media-specific-metadata"},"Q: How do I access media-specific metadata?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/document-sandbox/document-apis/classes/MediaRectangleNode.md#mediaaddondata"},(0,o.mdx)("inlineCode",{parentName:"a"},"mediaRectangleNode.mediaAddOnData"))," to access metadata tied to the media content itself."),(0,o.mdx)("h4",{id:"q-can-i-use-importaddondata-with-all-media-types"},"Q: Can I use ImportAddOnData with all media types?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," No, import-time metadata is not supported for PSD/AI assets. An error will be thrown if you attempt to use ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/app-document.md#importaddondata"},(0,o.mdx)("inlineCode",{parentName:"a"},"ImportAddOnData"))," with these file types."),(0,o.mdx)("h4",{id:"q-what-happens-to-mediaaddondata-when-i-copy-a-media-element"},"Q: What happens to mediaAddOnData when I copy a media element?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," All copies of the same media asset share the same ",(0,o.mdx)("inlineCode",{parentName:"p"},"mediaAddOnData"),". Changes to one copy affect all copies."),(0,o.mdx)("h4",{id:"q-what-happens-to-nodeaddondata-when-i-replace-media-content"},"Q: What happens to nodeAddOnData when I replace media content?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"nodeAddOnData")," persists with the container even when the media content is replaced, while ",(0,o.mdx)("inlineCode",{parentName:"p"},"mediaAddOnData")," is reset."))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-learn-how-to-element-metadata-md-0e624ca1fa63db5c43e5.js.map