{"version":3,"file":"component---src-pages-references-scriptruntime-communication-index-md-74777ed153e58ed686ad.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,sBAAoB,uBAE5BA,EAAAA,EAAAA,KAAA,sIACAA,EAAAA,EAAAA,KAAA,MACE,GAAM,YAAU,aAElBA,EAAAA,EAAAA,KAAA,mMAA6LA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACvM,KAAQ,+CAA6C,mBAC7B,0PAC5BH,EAAAA,EAAAA,KAAA,MACE,GAAM,yBAAuB,0BAE/BA,EAAAA,EAAAA,KAAA,0BAAoBA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,WAAyB,wGAAwGH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,eAA6B,SAASH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA4B,+DAA+DH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA4B,mHAAmHH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,WAAyB,MAChkBH,EAAAA,EAAAA,KAAA,MACE,GAAM,+BAA6B,gCAErCA,EAAAA,EAAAA,KAAA,MACE,GAAM,WACLA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,aAC9BH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,4UAY9BH,EAAAA,EAAAA,KAAA,MACE,GAAM,aAAW,eAEnBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,ylBAoB9BH,EAAAA,EAAAA,KAAA,MACE,GAAM,2BAAyB,4BAEjCA,EAAAA,EAAAA,KAAA,MACE,GAAM,gBACLA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,gBAC9BH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,msBAwB9BH,EAAAA,EAAAA,KAAA,MACE,GAAM,aACLA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,aAC9BH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,eAAa,6VAelC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/references/scriptruntime/communication/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/express-add-ons-docs/express-add-ons-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"communication-apis\"\n    }}>{`Communication APIs`}</h1>\n    <p>{`The communication APIs allow you to communicate between the script runtime and the iframe where your add-on is running. `}</p>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`The script runtime and iframe runtime are two different runtime execution environments which are present on different threads in the browser. The communication APIs are based on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/GoogleChromeLabs/comlink\"\n      }}>{`Comlink library`}</a>{` and provide a mechanism to allow the JavaScript code executing in each to interact, so developers can call apis exposed in one environment (ie: script runtime) from another environment (ie: iframe where their add-on is running) bidirectionally.`}</p>\n    <h2 {...{\n      \"id\": \"example-code-snippets\"\n    }}>{`Example Code Snippets`}</h2>\n    <p>{`The AddOnSdk `}<inlineCode parentName=\"p\">{`runtime`}</inlineCode>{` object provides the methods to allow you to communicate between the two execution environments via `}<inlineCode parentName=\"p\">{`exposeApi()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`apiProxy()`}</inlineCode>{`. The examples below show the methods in use from both the `}<inlineCode parentName=\"p\">{`index.html`}</inlineCode>{` where the iframe is running with your add-on code, and the script runtime environment running the contents of `}<inlineCode parentName=\"p\">{`code.js`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"expose-apis-from-the-script\"\n    }}>{`Expose APIs from the script`}</h3>\n    <h4 {...{\n      \"id\": \"codejs\"\n    }}><inlineCode parentName=\"h4\">{`code.js`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const scriptApis = {\n    performWorkOnDocument: function (data, someFlag) {\n        // call content authoring APIs\n    },\n    getDataFromDocument: function() {\n        // get some data from document\n    }\n}\n// expose these apis to be directly consumed in the UI (ie: index.html file).\nruntime.exposeApi(scriptApis);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"indexhtml\"\n    }}>{`index.html`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSdk from \"https://localhost.adobe.com:8081/sdk.js\";\n\nAddOnSdk.ready.then(async () => {\n    const { runtime } = AddOnSdk.instance;\n\n    // Wait for the promise to resolve (the script runtime may not have initialized yet) to get a proxy to call APIs defined in the script\n    const scriptApis = await runtime.apiProxy(\"script\");\n\n    await scriptApis.performWorkOnDocument({\n        pageNumber: 1,\n        op: \"change_background_color\",\n        data: {\n            toColor: \"blue\"\n        }\n    }, true);\n\n    console.log(await scriptApis.getDataFromDocument());\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"expose-apis-from-the-ui\"\n    }}>{`Expose APIs from the UI`}</h3>\n    <h4 {...{\n      \"id\": \"indexhtml-1\"\n    }}><inlineCode parentName=\"h4\">{`index.html`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`AddOnSdk.ready.then(async () => {\n    console.log(\"AddOnSdk is ready for use.\");\n\n    const { runtime } = AddOnSdk.instance;\n    const uiApi = {\n        performWorkOnUI: function(data, someFlag) {\n            // Do some ui operation\n        },\n        getDataFromUI: async function() {\n            let resolver = undefined;\n            const promise = new Promise(resolve => {\n                resolver = resolve;\n            });\n            setTimeout(() => {\n                resolver(\"button_color_blue\");\n            }, 10);\n            return await promise;\n        }\n    }\n    // Expose the UI Apis to be used in the script code (ie: code.js)\n    runtime.exposeApi(uiApi);\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"codejs-1\"\n    }}><inlineCode parentName=\"h4\">{`code.js`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function callUIApis() {\n    // Get a proxy to the APIs defined in the UI\n    const uiApis = await runtime.apiProxy(\"panel\");\n    await uiApis.performWorkOnUI({\n        buttonTextFont: 20,\n        buttonColor: \"Green\"\n    }, true);\n\n    const result = await uiApis.getDataFromUI();\n    console.log(\"Data from UI: \" + result);\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}