"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[2542],{23046:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return l},default:function(){return p}});var a=t(87462),o=t(63366),r=(t(15007),t(64983)),i=t(91515),s=["components"],l={},d=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",n)}},c=d("InlineAlert"),m=d("CodeBlock"),u={_frontmatter:l},g=i.Z;function p(e){var n=e.components,t=(0,o.Z)(e,s);return(0,r.mdx)(g,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"client-side-storage"},"Client-Side Storage"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"ClientStorage")," API allows you to store, retrieve and delete persistent data in the user's current browser. "),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"ClientStorage")," is similar to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Window.localStorage")," API, but is asynchronous, supports multiple datatypes, (i.e., objects, arrays, strings, numbers, booleans, null, undefined and Uint8Array) and has a larger storage limit. Each add-on can store up to 10 mb of data in ",(0,r.mdx)("inlineCode",{parentName:"p"},"ClientStorage"),", per user. Post 10 mb, any data additions will throw a quota error. However, an add-on developer can write code to delete old data so that new data can be added."),(0,r.mdx)(c,{slots:"text",variant:"info",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"Note that since the data will be stored in the userâ€™s current browser, user actions such as clearing the browser cache would clear all of the data storage in ",(0,r.mdx)("inlineCode",{parentName:"p"},"ClientStorage")," (similar to ",(0,r.mdx)("inlineCode",{parentName:"p"},"localStorage"),")."),(0,r.mdx)(m,{slots:"heading, code",repeat:"3",languages:"JavaScript",mdxType:"CodeBlock"}),(0,r.mdx)("h3",{id:"interface"},"Interface"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},"interface AddOn {\n  /**\n   * Data storage on the user's local machine.\n   * This data is not synchronized across users\n   */\n  clientStorage: ClientStorage;\n}\n\ninterface ClientStorage {\n  /**\n   * Retrieve a value from ClientStorage for given key.\n   * If no value has been stored for that key, this function will asynchronously return undefined.\n   */\n  async getItem(key: string): Promise<unknown | undefined>;\n\n  /**\n   * Set a value to ClientStorage with the given key.\n   * The returned promise will resolve if storage is successful or reject with an error message if storage failed.\n   */\n  async setItem(key: string, value: any): Promise<void>;\n\n  /**\n   * Remove the stored key/value pair from ClientStorage for given key.\n   * If no such key is stored, this function will return normally but will otherwise do nothing.\n   */\n  async removeItem(key: string): Promise<void>;\n\n  /**\n   * Retrieve a list of all keys stored to ClientStorage.\n   * Use this to enumerate the full contents of the ClientStorage API.\n   */\n  async keys(): Promise<string[]>;\n\n   /**\n     * Delete all data present in ClientStorage for an Add-on.\n     */\n    clear(): Promise<void>;\n}\n")),(0,r.mdx)("h3",{id:"example"},"Example"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},'import AddOnSdk from "https://new.express.adobe.com/static/add-on-sdk/sdk.js";\n\n// Wait for the SDK to be ready\nawait AddOnSdk.ready;\n\n// Reference to the client storage of the add-on\nconst { clientStorage } = AddOnSdk.instance;\n\n// Get add-on data\nasync function getData(key) {\n  try {\n    return await clientStorage.getItem(key);\n  } catch (error) {\n    console.log("Failed to get the value from the ClientStorage.");\n  }\n}\n\n// Add/update add-on data\nasync function setData(key, value) {\n  try {\n    await clientStorage.setItem(key, value);\n  } catch (error) {\n    console.log("Failed to set the value to the ClientStorage.");\n  }\n}\n\n// Delete add-on data for a key\nasync function deleteData(key) {\n  try {\n    await clientStorage.removeItem(key);\n  } catch (error) {\n    console.log("Failed to delete the value from the ClientStorage.");\n  }\n}\n\n// Delete ALL add-on data for this user\nasync function clearData() {\n  try {\n    await clientStorage.clear();\n  }\n  catch(error) {\n    console.log("Failed to clear the data from the ClientStorage.");\n  }\n}\n\n// Get all stored keys\nasync function getKeys() {\n  try {\n    const keys = await clientStorage.keys();\n    keys.forEach((key) => console.log(key));\n  } catch (error) {\n    console.log("Failed to get the keys from the ClientStorage.");\n  }\n}\n')),(0,r.mdx)("h3",{id:"output"},"Output"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"")),(0,r.mdx)(c,{slots:"text",variant:"success",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"The ",(0,r.mdx)("strong",{parentName:"p"},"use-client-storage")," sample can also be used as a reference for implementing the Client Storage APIs."))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-references-apis-clientstorage-md-525c8076800c4bd8a790.js.map