"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[3599],{167:function(e,a,t){t.r(a),t.d(a,{_frontmatter:function(){return s},default:function(){return x}});var n=t(58168),d=t(80045),o=(t(88763),t(15680)),r=t(83407);const m=["components"],s={},i=(l="InlineAlert",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)});var l;const p={_frontmatter:s},c=r.A;function x(e){let{components:a}=e,t=(0,d.A)(e,m);return(0,o.mdx)(c,(0,n.A)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"element-metadata"},"Element Metadata"),(0,o.mdx)("h2",{id:"get-and-set-element-metadata"},"Get and Set Element Metadata"),(0,o.mdx)("p",null,"Add-ons can store ",(0,o.mdx)("strong",{parentName:"p"},"private metadata")," (custom data accessible only to the add-on that set it) on any node within the Express document. Currently, each node can hold up to ",(0,o.mdx)("strong",{parentName:"p"},"3â€¯KB")," of data, organized as key/value pairs where both keys and values are Strings. Additionally, there is a limit of ",(0,o.mdx)("strong",{parentName:"p"},"20 key/value pairs")," per node."),(0,o.mdx)("p",null,"All nodes that inherit from the ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/document-sandbox/document-apis/classes/BaseNode.md"},(0,o.mdx)("inlineCode",{parentName:"a"},"BaseNode"))," class have a ",(0,o.mdx)("inlineCode",{parentName:"p"},"addOnData")," property that can be used to store and retrieve metadata. It is an instance of the ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/document-sandbox/document-apis/classes/AddOnData.md"},(0,o.mdx)("inlineCode",{parentName:"a"},"AddOnData"))," class, which provides methods to perform operations such as ",(0,o.mdx)("inlineCode",{parentName:"p"},"getItem()"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"setItem()"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"removeItem()"),", and ",(0,o.mdx)("inlineCode",{parentName:"p"},"clear()"),"."),(0,o.mdx)("p",null,"With the ",(0,o.mdx)("inlineCode",{parentName:"p"},"remainingQuota")," property, you can check how much space is left, both in terms of ",(0,o.mdx)("inlineCode",{parentName:"p"},"sizeInBytes")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"numKeys"),", while ",(0,o.mdx)("inlineCode",{parentName:"p"},"keys()")," returns an array of the keys in use."),(0,o.mdx)(i,{slots:"text",variant:"info",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"While Document and Page metadata operate from the ",(0,o.mdx)("inlineCode",{parentName:"p"},"addOnUISdk.app.document")," object and belong to the ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/index.md"},"Add-on UI SDK"),", Element metadata are part of the ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/document-sandbox/document-apis/index.md"},"Document Sandbox")," and are accessed through the ",(0,o.mdx)("inlineCode",{parentName:"p"},"node.addOnData")," property."),(0,o.mdx)("h3",{id:"example"},"Example"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'import { editor } from "express-document-sdk";\n\n// Create some dummy node\nconst text = editor.createText("Hello, World!");\n\n// Store some metadata as key/value pairs\ntext.addOnData.setItem("originalText", "Hello, World!");\ntext.addOnData.setItem("date", new Date().toISOString());\n\n// Retrieve the metadata\nconsole.log("Original text: ", text.addOnData.getItem("originalText"));\n\n// Check the remaining quota\nconsole.log("Remaining quota: ", text.addOnData.remainingQuota);\n// {\n//   "sizeInBytes": 3062,\n//   "numKeys": 19\n// }\n\n// Check the keys in use\nconsole.log("Keys in use: ", text.addOnData.keys());\n// ["originalText", "date"]\n\n// Remove the metadata\ntext.addOnData.removeItem("originalText");\n\n// clear all metadata\ntext.addOnData.clear();\n')),(0,o.mdx)("p",null,"Please note that the ",(0,o.mdx)("inlineCode",{parentName:"p"},"addOnData")," property is iterable with ",(0,o.mdx)("inlineCode",{parentName:"p"},"for...of")," loops, so you can use it to iterate over the key/value pairs; each pair is an array with the key as the first element and the value as the second."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"// iterate over key/value pairs\nfor (let pair of text.addOnData) {\n  console.log(pair);\n  // ['originalText', 'Hello, World!']\n  // ['date', '2025-01-20T11:06:19.051Z']\n}\n")),(0,o.mdx)("p",null,"Alternatively, you can use the ",(0,o.mdx)("inlineCode",{parentName:"p"},"keys()")," method to get an array of all keys and then iterate over them."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"// Iterate over all keys\ntext.addOnData.keys().forEach((key) => {\n  console.log(`Key: ${key}, Value: ${text.addOnData.getItem(key)}`);\n});\n")),(0,o.mdx)("h2",{id:"use-cases"},"Use Cases"),(0,o.mdx)("p",null,"Per-element metadata can be useful to keep track, for example, of the original properties a node has been created with, the history of the subsequent changes made to it, or to tag some nodes in a way that is meaningful for the add-on (e.g., it's supposed to be skipped when a certain routine is launched). It can also be used to store temporary data that is not meant to be persisted."),(0,o.mdx)("p",null,"Please, refer to the SDK Reference section for ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/document-sandbox/document-apis/classes/AddOnData.md"},(0,o.mdx)("inlineCode",{parentName:"a"},"AddOnData"))," for a complete list of methods, and the ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/AdobeDocs/express-add-on-samples/tree/main/document-sandbox-samples/per-element-metadata"},(0,o.mdx)("inlineCode",{parentName:"a"},"per-element-metadata"))," sample add-on for a demonstrative implementation."),(0,o.mdx)("h2",{id:"faqs"},"FAQs"),(0,o.mdx)("h4",{id:"q-how-do-i-store-metadata-on-an-element"},"Q: How do I store metadata on an element?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,o.mdx)("inlineCode",{parentName:"p"},'node.addOnData.setItem("key", "value")')," to store key/value pairs on any node."),(0,o.mdx)("h4",{id:"q-how-do-i-retrieve-stored-metadata"},"Q: How do I retrieve stored metadata?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,o.mdx)("inlineCode",{parentName:"p"},'node.addOnData.getItem("key")')," to retrieve the value for a specific key."),(0,o.mdx)("h4",{id:"q-what-are-the-storage-limits"},"Q: What are the storage limits?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Each node can store up to 3 KB of data with a maximum of 20 key/value pairs."),(0,o.mdx)("h4",{id:"q-how-do-i-check-remaining-storage-space"},"Q: How do I check remaining storage space?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,o.mdx)("inlineCode",{parentName:"p"},"node.addOnData.remainingQuota")," to get remaining bytes and key count."),(0,o.mdx)("h4",{id:"q-how-do-i-remove-metadata"},"Q: How do I remove metadata?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,o.mdx)("inlineCode",{parentName:"p"},'removeItem("key")')," for specific keys or ",(0,o.mdx)("inlineCode",{parentName:"p"},"clear()")," to remove all metadata."),(0,o.mdx)("h4",{id:"q-how-do-i-iterate-over-all-metadata"},"Q: How do I iterate over all metadata?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,o.mdx)("inlineCode",{parentName:"p"},"for...of")," loops on ",(0,o.mdx)("inlineCode",{parentName:"p"},"addOnData")," or iterate over ",(0,o.mdx)("inlineCode",{parentName:"p"},"keys()")," array with ",(0,o.mdx)("inlineCode",{parentName:"p"},"forEach()"),"."),(0,o.mdx)("h4",{id:"q-can-other-add-ons-access-my-metadata"},"Q: Can other add-ons access my metadata?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," No, metadata is private and only accessible to the add-on that set it."),(0,o.mdx)("h4",{id:"q-what-types-can-i-store"},"Q: What types can I store?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Only strings are supported for both keys and values."))}x.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-learn-how-to-element-metadata-md-7916a8dd8b1c5924b849.js.map