{"version":3,"file":"component---src-pages-references-addonsdk-instance-client-storage-md-5539ec90dd9f579a753f.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/references/addonsdk/instance-clientStorage.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/express-add-ons-docs/express-add-ons-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"addonsdkinstanceclientstorage\"\n    }}>{`AddOnSdk.instance.clientStorage`}</h1>\n    <p>{`Reference to the `}<inlineCode parentName=\"p\">{`clientStorage`}</inlineCode>{` object for the currently running add-on. See the `}<a parentName=\"p\" {...{\n        \"href\": \"../../guides/develop/#storing-and-retrieving-client-side-data\"\n      }}>{`client storage use case implementation`}</a>{` for more details. The Client Storage API allows you to store, retrieve and delete persistent data in the user's current browser. `}</p>\n    <p>{`Client Storage is similar to using the `}<inlineCode parentName=\"p\">{`Window.localStorage`}</inlineCode>{` API, but is asynchronous, supports multiple datatypes, (i.e., objects, arrays, strings, numbers, booleans, `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Uint8Array`}</inlineCode>{`) and has a larger storage limit. Each add-on can store up to 10 mb of data in `}<inlineCode parentName=\"p\">{`ClientStorage`}</inlineCode>{`, per user. Any data additions over 10 mb will throw a quota error. However, an add-on developer can write code to delete old data so that new data can be added.`}</p>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`Since the data is stored in the userâ€™s current browser, user actions such as clearing the browser cache would clear all of the data storage in `}<inlineCode parentName=\"p\">{`ClientStorage`}</inlineCode>{` (similar to `}<inlineCode parentName=\"p\">{`localStorage`}</inlineCode>{`).`}</p>\n    <h2 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h2>\n    <h3 {...{\n      \"id\": \"getitem\"\n    }}>{`getItem()`}</h3>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`async getItem(key: string): Promise<unknown | undefined>`}</inlineCode></strong><br />{`\nAn asynchronous method to retrieve a value from Client Storage for a given key. If no value has been stored for that key, this function will return `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`key`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string `}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`The key to retrieve the value for.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"returns\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`Promise`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` if no value has been stored for that key.`}</p>\n    <h4 {...{\n      \"id\": \"example-usage\"\n    }}>{`Example Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function getData(key) {\n  try {\n    return await clientStorage.getItem(key);\n  } catch (error) {\n    console.log(\"Failed to get the value from the ClientStorage.\");\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"setitem\"\n    }}>{`setItem()`}</h3>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`async setItem(key: string, value: any): Promise<void>;`}</inlineCode></strong><br />{`\nStore a value in Client Storage with the given key. The returned promise will resolve if storage is successful, or reject with an error message if storage failed. The value can be any of multiple data types, such as `}<inlineCode parentName=\"p\">{`object`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{`, array, `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`boolean`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Uint8Array`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"parameters-1\"\n    }}>{`Parameters`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`key`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string `}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`The key to reference the value stored.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`value`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`any `}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`The value to store for the key.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"returns-1\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`Promise`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{` if no value has been stored for that key.`}</p>\n    <h4 {...{\n      \"id\": \"example-usage-1\"\n    }}>{`Example Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function setData(key, value) {\n  try {\n    await clientStorage.setItem(key, value);\n  } catch (error) {\n    console.log(\"Failed to set the value to the ClientStorage.\");\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"removeitem\"\n    }}>{`removeItem()`}</h3>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`async removeItem(key: string): Promise<void>`}</inlineCode></strong><br />{`\nRemove the stored key/value pair from Client Storage for the given key. If no such key is stored, this function will return normally, but will otherwise do nothing.`}</p>\n    <h4 {...{\n      \"id\": \"parameters-2\"\n    }}>{`Parameters`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`key`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string `}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"right\"\n          }}>{`The key indicating which specific key/value pair to remove from storage`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"returns-2\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`Promise`}</inlineCode>{` or nothing if the key is not found.`}</p>\n    <h4 {...{\n      \"id\": \"example-usage-2\"\n    }}>{`Example Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function removeData(key) {\n  try {\n    await clientStorage.removeItem(key);\n  } catch (error) {\n    console.log(\"Failed to delete the key/value pair from ClientStorage.\");\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"clear\"\n    }}>{`clear()`}</h3>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`clear(): Promise<void>`}</inlineCode></strong><br />{`\nDelete all data present in ClientStorage for this add-on.`}</p>\n    <h4 {...{\n      \"id\": \"parameters-3\"\n    }}>{`Parameters`}</h4>\n    <p>{`None`}</p>\n    <h4 {...{\n      \"id\": \"returns-3\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`Promise`}</inlineCode>{` or returns normally when there's nothing to clear.`}</p>\n    <h4 {...{\n      \"id\": \"example-usage-3\"\n    }}>{`Example Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function clearData() {\n  try {\n    await clientStorage.clear();\n  }\n  catch(error) {\n    console.log(\"Failed to clear the data from the ClientStorage.\");\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"keys\"\n    }}>{`keys()`}</h3>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`async keys(): Promise<string[]>`}</inlineCode></strong><br />{`\nRetrieve a list of all keys in Client Storage. Use this to enumerate the full contents of the Client Storage for the add-on.`}</p>\n    <h4 {...{\n      \"id\": \"parameters-4\"\n    }}>{`Parameters`}</h4>\n    <p>{`None`}</p>\n    <h4 {...{\n      \"id\": \"returns-4\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`Promise`}</inlineCode>{` with an array of the keys found when the promise resolves (all type `}<inlineCode parentName=\"p\">{`string`}</inlineCode>{`).`}</p>\n    <h4 {...{\n      \"id\": \"example-usage-4\"\n    }}>{`Example Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function getKeys() {\n  try {\n    const keys = await clientStorage.keys();\n    keys.forEach((key) => console.log(key));\n  } catch (error) {\n    console.log(\"Failed to get the keys from the ClientStorage.\");\n  }\n}\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"success\" mdxType=\"InlineAlert\" />\n    <p>{`Be sure to check out the `}<a parentName=\"p\" {...{\n        \"href\": \"../develop/#storing-and-retrieving-client-side-data\"\n      }}>{`add-on recipes`}</a>{` page for more details around using storing and retrieving client-side data, as well as the `}<strong parentName=\"p\">{`use-client-storage`}</strong>{` sample for a more complete example of implementing it in an add-on.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","_extends","mdxType","parentName","slots","variant","isMDXComponent"],"sourceRoot":""}