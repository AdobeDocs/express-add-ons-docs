"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[5641],{73835:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return s},default:function(){return u}});var a=t(87462),o=t(63366),i=(t(15007),t(64983)),r=t(91515),d=["components"],s={},l=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",n)}},p=l("InlineAlert"),c=l("CodeBlock"),m={_frontmatter:s},h=r.Z;function u(e){var n=e.components,t=(0,o.Z)(e,d);return(0,i.mdx)(h,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"api-overview"},"API Overview"),(0,i.mdx)("p",null,"The following APIs are currently supported for building add-ons:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#AddOnSDKAPI"},"AddOnSDKAPI")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#ui-theme"},"Theme")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#language-locale"},"Languages & Locale")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#add-on-manifest-data"},"Manifest")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#oauth-20"},"OAuth 2.0")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#client-storage"},"ClientStorage")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#import"},"Import")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#drag-and-drop"},"Drag and Drop")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#export"},"Export")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("a",{parentName:"li",href:"#simple-modal-dialogs"},"Simple Modal Dialogs"))),(0,i.mdx)("p",null,"Also, check out the latest ",(0,i.mdx)("a",{parentName:"p",href:"../references/manifest.md"},"Manifest Reference")," for more important details on how to configure options when developing your add-ons."),(0,i.mdx)(p,{slots:"text",variant:"success",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"Each API section includes the ",(0,i.mdx)("strong",{parentName:"p"},"Interface")," definition as well as a ",(0,i.mdx)("strong",{parentName:"p"},"Example")," tab to show an example of how the interface can be used. Please also see the ",(0,i.mdx)("a",{parentName:"p",href:"guides/develop/samples"},"code samples")," for more in-depth references on using the Add-on SDK APIs. "),(0,i.mdx)("h2",{id:"introduction"},"Introduction"),(0,i.mdx)("p",null,"The Add-on SDK is available as an ECMAScript 2015 Module hosted in a CDN."),(0,i.mdx)("p",null,"To use the SDK, simply include a link to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"sdk.js")," file in a script tag within the ",(0,i.mdx)("inlineCode",{parentName:"p"},"<head>")," section of the page to ensure correct initialization of the add-on API environment."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'<script type="module">\n  import AddOnSDKAPI from\n  "https://new.express.adobe.com/static/add-on-sdk/sdk.js";\n<\/script>\n')),(0,i.mdx)("h2",{id:"addonsdkapi"},"AddOnSDKAPI"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"AddOnSDKAPI")," provides the following interface for accessing all of the APIs. It exposes several variables listed below, which allow you to know when the APIs are ready to interact with, the ",(0,i.mdx)("inlineCode",{parentName:"p"},"apiVersion")," of the SDK running, the insta access to a number of things"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"apiVersion"),": Current version of the SDK running.\n",(0,i.mdx)("inlineCode",{parentName:"p"},"ready"),": Allows you to know you can start accessing the APIs.\n",(0,i.mdx)("inlineCode",{parentName:"p"},"instance"),": the currently running add-on instance, allowing you to access the ",(0,i.mdx)("a",{parentName:"p",href:"#manifest"},"manifest.json")," details and a ",(0,i.mdx)("a",{parentName:"p",href:"#client-storage"},"Client Storage")," object, which allows you to locally persist to storage, per user and for this add-on.\n",(0,i.mdx)("inlineCode",{parentName:"p"},"app"),": Provides access to the host application (Adobe Express). See the ",(0,i.mdx)("a",{parentName:"p",href:"#Application"},(0,i.mdx)("inlineCode",{parentName:"a"},"Application"))," definition below for more details."),(0,i.mdx)(c,{slots:"heading, code",repeat:"2",languages:"JavaScript",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"interface"},"Interface"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"/**\n * The main API Interface exposed by the SDK to the consuming Add-on code.\n */\ninterface AddOnSDKAPI {\n    /**\n     * API version of the SDK.\n     */\n    readonly apiVersion: string;\n\n    /**\n     * Resolves when the SDK has made a successful connection to the host app.\n     * Indicates that APIs directly interacting with the host application are ready.\n     * Register a call back with @see Promise#then or await this promise.\n     */\n    readonly ready: Promise<void>;\n\n    /**\n     * Represents capabilities and events of the currently running Add-on Instance.\n     * The interface type depends on the type of the underlying Add-on.\n     */\n    readonly instance: AddOn;\n\n    /**\n     * Represents capabilities and events of the host application.\n     */\n    readonly app: Application;\n}\n")),(0,i.mdx)("h3",{id:"example"},"Example"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import AddOnSDKAPI from "https://new.express.adobe.com/static/add-on-sdk/sdk.js";\n\nAddOnSDKAPI.ready.then(() => {\n  console.log("API version", AddOnSDKAPI.apiVersion);\n  console.log("Add-on instance object", AddOnSDKAPI.instance);\n  console.log("Application object", AddOnSDKAPI.app);\n});\n')),(0,i.mdx)("h2",{id:"application"},"Application"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("a",{parentName:"p",href:"#AddOnSDKAPI"},(0,i.mdx)("inlineCode",{parentName:"a"},"AddOnSDKAPI"))," provides you with an ",(0,i.mdx)("inlineCode",{parentName:"p"},"app")," variable, which is of type ",(0,i.mdx)("inlineCode",{parentName:"p"},"Application"),", and allows you to access the following objects which are used throughout this reference:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ui"),": Provides access to the ",(0,i.mdx)("a",{parentName:"li",href:"#theme"},"theme"),", ",(0,i.mdx)("a",{parentName:"li",href:"language-locale"},"locale and locales"),"."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"document"),": Provides access to the methods needed for ",(0,i.mdx)("a",{parentName:"li",href:"#import"},"adding an image or video")," the document and for ",(0,i.mdx)("a",{parentName:"li",href:"#export"},"creating a rendition")," for export."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"oauth"),": Provides access to the OAuth methods needed for use with the ",(0,i.mdx)("a",{parentName:"li",href:"oauth-20"},"OAuth API"),".")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"/**\n * Interface that represents the underlying Application (Adobe Express).\n */\nexport interface Application {\n    /**\n     * Represents the UI of the app (Adobe Express). Provides access to theme, locale and locales.\n     */\n    readonly ui: UI;\n\n    /**\n     * Represents the active document and provides access to the methods needed for adding an image or video the document and creating a rendition (for export).\n     */\n    readonly document: Document;\n\n    /**\n     * OAuth 2.0 middleware for handling user authorization. Provides access to the OAuth methods needed to implement OAuth 2.0.\n     */\n    readonly oauth: OAuth;\n}\n")),(0,i.mdx)("h2",{id:"addon"},"AddOn"),(0,i.mdx)("p",null,"Represents the current add-on, providing references to ",(0,i.mdx)("inlineCode",{parentName:"p"},"manifest")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"clientStorage")," objects. "),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"/**\n * Base interface for all type of add-ons\n */\nexport interface AddOn {\n    \n    /**\n     * Add-ons Manifest details - this maps to entries in the add-ons manifest.json file.\n     */\n    readonly manifest: Record<string, unknown>;\n\n    /**\n     * Local-persisted storage per user per addon.\n     */\n    readonly clientStorage: ClientStorage;\n}\n")),(0,i.mdx)("h2",{id:"theme"},"Theme"),(0,i.mdx)("p",null,"Retrieve the current theme of the host application, via the ",(0,i.mdx)("a",{parentName:"p",href:"#application"},(0,i.mdx)("inlineCode",{parentName:"a"},"app.ui"))," object."),(0,i.mdx)(c,{slots:"heading, code",repeat:"2",languages:"JavaScript",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"interface-1"},"Interface"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'interface UI {\n    /**\n     * The theme currently used by the host application.\n     */\n    theme: string;\n}\n/**\n * "themechange" event is triggered when the UI theme is changed in the application.\n */\n')),(0,i.mdx)("h3",{id:"example-1"},"Example"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import AddOnSDKAPI from "https://new.express.adobe.com/static/add-on-sdk/sdk.js";\n\nfunction applyTheme(theme) {\n  /* ... */\n}\n\nAddOnSDKAPI.ready.then(() => applyTheme(AddOnSDKAPI.app.ui.theme));\n\nAddOnSDKAPI.app.on("themechange", (data) => {\n  applyTheme(data.theme);\n});\n')),(0,i.mdx)(p,{slots:"text",variant:"success",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"We have provided a sample that can be used as a reference for implementing the Application UI Theme APIs. Please see the ",(0,i.mdx)("strong",{parentName:"p"},"swc")," sample provided in the ",(0,i.mdx)("a",{parentName:"p",href:"guides/develop/samples"},"code samples")," within the ",(0,i.mdx)("strong",{parentName:"p"},"contributed")," folder for specific details."),(0,i.mdx)("h2",{id:"language--locale"},"Language & Locale"),(0,i.mdx)("p",null,"Retrieve the supported languages (via the ",(0,i.mdx)("inlineCode",{parentName:"p"},"locales")," variable) and current ",(0,i.mdx)("inlineCode",{parentName:"p"},"locale")," of the host application."),(0,i.mdx)(c,{slots:"heading, code",repeat:"2",languages:"JavaScript",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"interface-2"},"Interface"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},'interface Application {\n  /**\n   * Represents the UI of the host application.\n   */\n  readonly ui: UI;\n}\n\ninterface UI {\n  /**\n   * Current locale of the application.\n   */\n  locale: string;\n\n  /**\n   * Supported Languages of the application\n   */\n  locales: string[];\n}\n\n/**\n * "localechange" event is triggered when the locale is changed in the application.\n */\n')),(0,i.mdx)("h3",{id:"example-2"},"Example"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import AddOnSDKAPI from "https://new.express.adobe.com/static/add-on-sdk/sdk.js";\n\nfunction setLanguage(language) { /* ... */ }\n\nAddOnSDKAPI.ready.then(() => {\n  console.log(AddOnSDKAPI.app.ui.locales);\n  setLanguage(AddOnSDKAPI.app.ui.locale);\n});\n\nAddOnSDKAPI.app.on("localechange", data => {\n  setLanguage(data.locale));\n});\n')),(0,i.mdx)("h2",{id:"add-on-manifest-data"},"Add-on Manifest Data"),(0,i.mdx)("p",null,"Retrieve the ",(0,i.mdx)("a",{parentName:"p",href:"../references/manifest.md"},"manifest data")," belonging to the add-on."),(0,i.mdx)(c,{slots:"heading, code",repeat:"2",languages:"JavaScript",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"interface-3"},"Interface"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"interface AddOn {\n  /**\n   * Add-ons Manifest details - this maps to entries in the add-ons manifest.json file.\n   */\n  readonly manifest: Record<string, unknown>;\n}\n")),(0,i.mdx)("h3",{id:"example-3"},"Example"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import AddOnSDKAPI from "https://new.express.adobe.com/static/add-on-sdk/sdk.js";\n\nasync function logManifestData() {\n  await AddOnSDKAPI.ready;\n  const manifest = AddOnSDKAPI.instance.manifest;\n  console.log(manifest["name"]);\n  console.log(manifest["id"]);\n  console.log(manifest["main"]);\n  console.log(manifest["version"]);\n  console.log(manifest["manifestVersion"]);\n  for (const app of manifest["requirements"]["apps"]) {\n    console.log(app);\n  }\n  for (const entryPoint of manifest["entryPoints"]) {\n    console.log(entryPoint["type"]);\n    console.log(entryPoint["id"]);\n    console.log(entryPoint["label"]);    \n  }\n}\n')),(0,i.mdx)("h2",{id:"authorize-using-oauth-20"},"Authorize using OAuth 2.0"),(0,i.mdx)("p",null,'The OAuth APIs can be used to obtain the authorization "code" from any OAuth 2.0 provider supporting the ',(0,i.mdx)("a",{parentName:"p",href:"https://www.oauth.com/oauth2-servers/pkce/authorization-code-exchange/"},"Code Exchange authorization")," workflow. Here are the steps to get started:"),(0,i.mdx)("p",null,"Log in to the OAuth provider's website and create an application. This must be a web application, and if an option of SPA (Single Page Application) is listed, select it.\nAs an input to the ",(0,i.mdx)("strong",{parentName:"p"},"Redirect URIs")," field, add: ",(0,i.mdx)("a",{parentName:"p",href:"https://new.express.adobe.com/static/oauth-redirect.html"},"https://new.express.adobe.com/static/oauth-redirect.html")),(0,i.mdx)("p",null,"Fill out other details as necessary and save the form. A ",(0,i.mdx)("strong",{parentName:"p"},"Client Id")," / ",(0,i.mdx)("strong",{parentName:"p"},"Application Id")," / ",(0,i.mdx)("strong",{parentName:"p"},"Application Key")," (varies between different OAuth providers) gets generated.\nNext you need to add the host name of the OAuth provider's authorization URL to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"manifest.json")," file."),(0,i.mdx)("p",null,"When using multiple providers, all such hostnames must be provided.\nFor example, if the add-on uses two OAuth providers (such as ",(0,i.mdx)("inlineCode",{parentName:"p"},"login.microsoftonline.com")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"www.dropbox.com"),"), its ",(0,i.mdx)("inlineCode",{parentName:"p"},"manifest.json")," should be updated according to this:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-json"},'{\n    "id": "<ADD_ON_ID>",\n    "name": "<ADD_ON_NAME>",\n    "version": "1.0.0",\n    "manifestVersion": 1,\n    "requirements": {\n        "apps": ["Express"]\n    },\n    "entryPoints": [\n        {\n            "type": "panel",\n            "id": "panel1",\n            "label": {\n                "default": "<ADD_ON_LABEL>"\n            },\n            "main": "index.html",\n            "permissions": {\n                "oauth": ["login.microsoftonline.com", "www.dropbox.com"]\n            }\n        }\n    ]\n}\n')),(0,i.mdx)("p",null,"Now the setup is complete and the OAuth APIs can be used by following the contract and usage as detailed below:"),(0,i.mdx)(c,{slots:"heading, code",repeat:"2",languages:"JavaScript",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"interface-4"},"Interface"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'interface Application {\n    /**\n     * OAuth 2.0 middleware for handling user authorization.\n     */\n    readonly oauth: OAuth;\n}\n\nexport interface OAuth {\n    /**\n     * Authorize a user using OAuth 2.0 PKCE workflow.\n     * @param request - {@link AuthorizationRequest} Payload with parameters to be used in the authorization workflow.\n     * @returns - {@link AuthorizationResponse} Response containing a ONE-TIME Authorization Code which can be used to obtain an access token.\n     */\n    authorize(request: AuthorizationRequest): Promise<AuthorizationResponse>;\n\n    /**\n     * Initiate the OAuth 2.0 PKCE authorization workflow by opening the user sign-in window.\n     * Post authorization the user is redirected to the Add-on developer provided URL.\n     * @param request - {@link AuthorizeWithOwnRedirectRequest} Payload with parameters to be used in the authorization workflow.\n     * @returns - {@link AuthorizationResult} Authorization result.\n     */\n    authorizeWithOwnRedirect(request: AuthorizeWithOwnRedirectRequest): Promise<AuthorizationResult>;\n}\n\nexport type AuthorizationRequest = {\n    /**\n     * OAuth provider\'s authorization URL.\n     */\n    authorizationUrl: string;\n\n    /**\n     * Client identifier of the application created at the OAuth provider.\n     */\n    clientId: string;\n\n    /**\n     * Code challenge used in Authorization Code Exchange.\n     */\n    codeChallenge: string;\n\n    /**\n     * Scope to control the application\'s access.\n     */\n    scope: string;\n\n    /**\n     * Additional parameters, specific to an OAuth provider which\n     * are required in the Authorization URL as query string parameters.\n     */\n    additionalParameters?: Map<string, string>;\n};\n\nexport type AuthorizeWithOwnRedirectRequest = AuthorizationRequest & {\n    /**\n     * URL where the user is redirected to after successful or failed authorization.\n     * Hosting and handling redirects to this URL should be managed by the caller.\n     */\n    redirectUri: string;\n\n    /**\n     * A value which is preserved in the authorization request,\n     * and replayed back as a query string parameter in the redirectUri.\n     * Although the primary reason for using the state parameter is to mitigate CSRF attacks,\n     * it can also be used to encode any other information.\n     */\n    state: string;\n};\n\nexport type AuthorizationResponse = {\n    /**\n     * Unique identifier for the authorization request.\n     */\n    id: string;\n\n    /**\n     * OAuth 2.0 generated authorization code which can be used\n     * ONCE to obtain an access token and a refresh token.\n     */\n    code: string;\n\n    /**\n     * URL where the user is redirected to after authorization.\n     * This is the default URL owned by Adobe and\n     * it is this URL which needs to be used to obtain access_token.\n     */\n    redirectUri: string;\n\n    /**\n     * Authorization result which denotes either success or failure,\n     * represented by {@link AuthorizationResult}.\n     */\n    result: AuthorizationResult;\n};\n\nexport type AuthorizationResult = {\n    /**\n     * Status representing success or failure in the authorization workflow.\n     */\n    status: AuthorizationStatus;\n\n    /**\n     * Description about the success or failure in the authorization workflow.\n     * In the event of a FAILED status reported by the OAuth provider during authorization,\n     * the value of this property is an object, in the form of \\{ [failure_title]: \\"failure_description\\" \\}\n     * While for all other statuses the value of this property is a string.\n     */\n    description: string | object;\n};\n\nexport enum AuthorizationStatus {\n    SUCCESS = "SUCCESS",\n    POPUP_OPENED = "POPUP_OPENED",\n    POPUP_BLOCKED = "POPUP_BLOCKED",  \n    POPUP_TIMEOUT = "POPUP_TIMEOUT",  \n    FAILED = "FAILED"\n}\n')),(0,i.mdx)("h3",{id:"example-4"},"Example"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import AddOnSDKAPI from "https://new.express.adobe.com/static/add-on-sdk/sdk.js";\n \nconst DROPBOX_AUTHORIZATION_URL = "https://www.dropbox.com/oauth2/authorize";\nconst DROPBOX_TOKEN_URL = "https://api.dropboxapi.com/oauth2/token";\nconst DROPBOX_CLIENT_ID = "<DROPBOX_CLIENT_ID>";\nconst DROPBOX_SCOPE = "<DROPBOX_SPACE_SEPARATED_SCOPES>";\n \nconst ONEDRIVE_AUTHORIZATION_URL = "https://login.microsoftonline.com/<AZURE_AD_TENANT_ID>/oauth2/v2.0/authorize";\nconst ONEDRIVE_TOKEN_URL = "https://login.microsoftonline.com/<AZURE_AD_TENANT_ID>/oauth2/v2.0/token";\nconst ONEDRIVE_CLIENT_ID = "<ONEDRIVE_CLIENT_ID>";\nconst ONEDRIVE_SCOPE = "<ONEDRIVE_SPACE_SEPARATED_SCOPES>";\nconst OWN_REDIRECT_URI = "<OWN_REDIRECT_URI>";\n \nAddOnSDKAPI.ready.then(() => {\n    // \'oauthUtils\' is a helper javascript module (included with the OAuth template) which provides utility functions to:\n    // 1. generateChallenge()     Generate the \'code_challenge\' and \'code_verifier\' parameters that are essential in the OAuth 2.0 workflow.\n    // 2. generateAccessToken()   Generate an \'access_token\' and a \'refresh_token\' using the \'code\' and \'redirectUri\' received on successful authorization.\n    // 3. getAccessToken()        Get an always valid \'access_token\'.\n     \n    const challenge = await oauthUtils.generateChallenge();\n     \n    await authorize(challenge);\n     \n    await authorizeWithOwnRedirect(challenge);\n});\n \nfunction authorize(challenge) {\n    const { id, code, redirectUri, result } = await oauth.authorize({\n        authorizationUrl: DROPBOX_AUTHORIZATION_URL,\n        clientId: DROPBOX_CLIENT_ID,\n        scope: DROPBOX_SCOPE,\n        codeChallenge: challenge.codeChallenge\n    });\n \n    const { status, description } = result;\n    if (status !== "SUCCESS") {\n        throw new Error(`Status: ${status} | Description: ${description}`);\n    }\n \n    await oauthUtils.generateAccessToken({\n        id,\n        clientId: DROPBOX_CLIENT_ID,\n        codeVerifier: challenge.codeVerifier,\n        code,\n        tokenUrl: DROPBOX_TOKEN_URL,\n        redirectUri\n    });\n \n    const accessToken = await oauthUtils.getAccessToken(id);\n}\n \nfunction authorizeWithOwnRedirect(challenge) {\n    const result = await oauth.authorizeWithOwnRedirect({\n        authorizationUrl: ONEDRIVE_AUTHORIZATION_URL,\n        clientId: ONEDRIVE_CLIENT_ID,\n        scope: ONEDRIVE_SCOPE,\n        codeChallenge: challenge.codeChallenge,\n        redirectUri: OWN_REDIRECT_URI,\n        state: <ANY_STRING_THAT_WILL_BE_REPLAYED_AT_REDIRECT>\n    });\n \n    const { status, description } = result;\n    if (status !== "POPUP_OPENED") {\n        throw new Error(`Status: ${status} | Description: ${description}`);\n    }\n \n    // Handle post-redirection after successful authorization\n    // and retrieve the authorization "code" for generating access_token.\n \n    const id = <ANY_UNIQUE_STRING>;\n    await oauthUtils.generateAccessToken({\n        id,\n        clientId: ONEDRIVE_CLIENT_ID,\n        codeVerifier: challenge.codeVerifier,\n        code,\n        tokenUrl: ONEDRIVE_TOKEN_URL,\n        OWN_REDIRECT_URI\n    });\n \n    const accessToken = await oauthUtils.getAccessToken(id);\n}\n')),(0,i.mdx)(p,{slots:"text",variant:"success",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"We have provided two samples that can be used as a reference for implementing the OAuth APIs. Please see the ",(0,i.mdx)("strong",{parentName:"p"},"import-images-using-oauth")," and ",(0,i.mdx)("strong",{parentName:"p"},"Dropbox")," samples for specific details."),(0,i.mdx)("h2",{id:"client-storage"},"Client Storage"),(0,i.mdx)("p",null,"The ClientStorage APIs allow you to store/retrieve/delete persistent data in the user's current browser. It's like the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Window.localStorage")," API, but is asynchronous, and supports multiple datatypes, i.e., objects, arrays, strings, numbers, booleans, null, undefined and Uint8Array. Since data will be stored in the user’s current browser, user actions such as clearing the browser cache might clear all of the data storage in ",(0,i.mdx)("inlineCode",{parentName:"p"},"ClientStorage")," (similar to ",(0,i.mdx)("inlineCode",{parentName:"p"},"localStorage"),")."),(0,i.mdx)("p",null,"Each add-on can store up to 10 mb of data in ",(0,i.mdx)("inlineCode",{parentName:"p"},"ClientStorage"),", per user. Post 10 mb, any data additions will throw a quota error. However, an add-on developer can write code to delete old data so that new data can be added."),(0,i.mdx)(c,{slots:"heading, code",repeat:"2",languages:"JavaScript",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"interface-5"},"Interface"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"interface AddOn {\n  /**\n   * Data storage on the user's local machine.\n   * This data is not synchronized across users\n   */\n  clientStorage: ClientStorage;\n}\n\ninterface ClientStorage {\n  /**\n   * Retrieve a value from ClientStorage for given key.\n   * If no value has been stored for that key, this function will asynchronously return undefined.\n   */\n  async getItem(key: string): Promise<unknown | undefined>;\n\n  /**\n   * Set a value to ClientStorage with the given key.\n   * The returned promise will resolve if storage is successful or reject with an error message if storage failed.\n   */\n  async setItem(key: string, value: any): Promise<void>;\n\n  /**\n   * Remove the stored key/value pair from ClientStorage for given key.\n   * If no such key is stored, this function will return normally but will otherwise do nothing.\n   */\n  async removeItem(key: string): Promise<void>;\n\n  /**\n   * Retrieve a list of all keys stored to ClientStorage.\n   * Use this to enumerate the full contents of the ClientStorage API.\n   */\n  async keys(): Promise<string[]>;\n\n   /**\n     * Delete all data present in ClientStorage for an Add-on.\n     */\n    clear(): Promise<void>;\n}\n")),(0,i.mdx)("h3",{id:"example-5"},"Example"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import AddOnSDKAPI from "https://new.express.adobe.com/static/add-on-sdk/sdk.js";\n\n// Wait for the SDK to be ready\nawait AddOnSDKAPI.ready;\n\n// Reference to the client storage of the add-on\nconst { clientStorage } = AddOnSDKAPI.instance;\n\n// Get add-on data\nasync function getData(key) {\n  try {\n    return await clientStorage.getItem(key);\n  } catch (error) {\n    console.log("Failed to get the value from the ClientStorage.");\n  }\n}\n\n// Add/update add-on data\nasync function setData(key, value) {\n  try {\n    await clientStorage.setItem(key, value);\n  } catch (error) {\n    console.log("Failed to set the value to the ClientStorage.");\n  }\n}\n\n// Delete add-on data for a key\nasync function deleteData(key) {\n  try {\n    await clientStorage.removeItem(key);\n  } catch (error) {\n    console.log("Failed to delete the value from the ClientStorage.");\n  }\n}\n\n// Delete ALL add-on data for this user\nasync function clearData() {\n  try {\n    await clientStorage.clear();\n  }\n  catch(error) {\n    console.log("Failed to clear the data from the ClientStorage.");\n  }\n}\n\n// Get all stored keys\nasync function getKeys() {\n  try {\n    const keys = await clientStorage.keys();\n    keys.forEach((key) => console.log(key));\n  } catch (error) {\n    console.log("Failed to get the keys from the ClientStorage.");\n  }\n}\n')),(0,i.mdx)(p,{slots:"text",variant:"success",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"The ",(0,i.mdx)("strong",{parentName:"p"},"use-client-storage")," sample can also be used as a reference for implementing the Client Storage APIs."),(0,i.mdx)("h2",{id:"import"},"Import"),(0,i.mdx)("p",null,"Allows you to import an image or video to your page."),(0,i.mdx)(c,{slots:"heading, code",repeat:"2",languages:"JavaScript",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"interface-6"},"Interface"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"interface Application {\n  /**\n   * Represents the active document of the host application\n   */\n  readonly document: Document;\n}\n\ninterface Document {\n  /**\n   * Add image/video to the current page\n   */\n  addImage(imageBlob: Blob): Promise<void>;\n\n  /**\n   * Add video to the current page\n   */\n  addVideo(videoBlob: Blob): Promise<void>;\n}\n")),(0,i.mdx)("h3",{id:"example-6"},"Example"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import AddOnSDKAPI from "https://new.express.adobe.com/static/add-on-sdk/sdk.js";\n\n// Reference to the active document\nconst { document } = AddOnSDKAPI.app;\n\n// Add image(blob) to the current page\nasync function addImageFromBlob(blob) {\n  try {\n    await document.addImage(blob);\n  } catch (error) {\n    console.log("Failed to add the image to the Page.");\n  }\n}\n\n// Add image(url) to the current page\nasync function addImageFromURL(url) {\n  try {\n    const blob = await fetch(url).then((response) => response.blob());\n    await document.addImage(blob);\n  } catch (error) {\n    console.log("Failed to add the image to the Page.");\n  }\n}\n\n// Add video(blob) to the current page\nasync function addVideoFromBlob(blob) {\n  try {\n    await document.addVideo(blob);\n  } catch (error) {\n    console.log("Failed to add the video to the Page.");\n  }\n}\n\n// Add video(url) to the current page\nasync function addVideoFromURL(url) {\n  try {\n    const blob = await fetch(url).then((response) => response.blob());\n    await document.addVideo(blob);\n  } catch (error) {\n    console.log("Failed to add the video to the Page.");\n  }\n}\n')),(0,i.mdx)(p,{slots:"text",variant:"success",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"Many of the samples we've included in the ",(0,i.mdx)("a",{parentName:"p",href:"guides/develop/samples"},"code samples")," implement the Import APIs, so please use them as a reference. This includes the the ",(0,i.mdx)("strong",{parentName:"p"},"import-images-from-local"),", ",(0,i.mdx)("strong",{parentName:"p"},"import-images-using-oauth"),", ",(0,i.mdx)("strong",{parentName:"p"},"giphy"),", ",(0,i.mdx)("strong",{parentName:"p"},"qrcode")," and ",(0,i.mdx)("strong",{parentName:"p"},"dropbox")," samples."),(0,i.mdx)("h2",{id:"drag-and-drop"},"Drag and Drop"),(0,i.mdx)("p",null,"Allows you to drag and drop objects to the document."),(0,i.mdx)(c,{slots:"heading, code",repeat:"2",languages:"JavaScript",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"interface-7"},"Interface"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'interface DragCompletionData {\n  /**\n   * Blob (image/video) to be added to the document\n   */\n  blob: Blob;\n}\n\n/**\n * Callback to provide the preview image\n * @returns URL or DataURL\n **/\ntype DragPreviewCallback = (element: HTMLElement) => URL;\n\n/**\n * Callback to provide the content (image/video) to be added to the document\n **/\ntype DragCompletionCallback = (\n  element: HTMLElement\n) => Promise<DragCompletionData[]>;\n\ninterface DragCallbacks {\n  /**\n   * Callback to provide the preview image\n   */\n  previewCallback: DragPreviewCallback;\n\n  /**\n   * Callback to provide the content to be added to the document\n   */\n  completionCallback: DragCompletionCallback;\n}\n\ninterface Application {\n  /**\n   * Enable drag to document functionality for an element\n   */\n  enableDragToDocument(\n    element: HTMLElement,\n    dragCallbacks: DragCallbacks\n  ): void;\n}\n\n/**\n * "dragstart" event is triggered when the user starts dragging an item for which drag behavior is enabled\n *\n * "dragend" event is triggered when the drag operation ends\n */\n\ninterface DragStartEventData {\n  /**\n   * Element for which the drag event started\n   */\n  element: HTMLElement;\n}\n\ninterface DragEndEventData {\n  /**\n   * Drop occurred/Drag ended at invalid position\n   */\n  dropCancelled: boolean;\n\n  /**\n   * Element for which the drag event ended\n   */\n  element: HTMLElement;\n}\n')),(0,i.mdx)("h3",{id:"example-7"},"Example"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import AddOnSDKAPI from "https://new.express.adobe.com/static/add-on-sdk/sdk.js";\n\n// Enable drag support for an element\nfunction makeDraggableUsingUrl(elementId: string, previewUrl: string) {\n  const image = document.getElementById(elementId);\n\n  const dragCallbacks = {\n    previewCallback: (image: HTMLElement) => {\n      return new URL(previewUrl);\n    },\n    completionCallback: async (image: HTMLElement) => {\n      const imageBlob = await fetch(image.src).then((response) =>\n        response.blob()\n      );\n      return [{ blob: imageBlob }];\n    },\n  };\n\n  try {\n    AddOnSDKAPI.app.enableDragToDocument(image, dragCallbacks);\n  } catch (error) {\n    console.log("Failed to enable DragToDocument:", error);\n  }\n}\n\nAddOnSDKAPI.app.on("dragstart", (eventData: DragStartEventData) => {\n  console.log("The drag event has started for", eventData.element);\n});\n\nAddOnSDKAPI.app.on("dragend", (eventData: DragEndEventData) => {\n  if (!eventData.dropCancelled) {\n    console.log("The drag event has ended for", eventData.element);\n  } else {\n    console.log("The drag event was cancelled for", eventData.element);\n  }\n});\n')),(0,i.mdx)(p,{slots:"text",variant:"info",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"Please note, the maximum dimension of an object dropped on to the canvas in Express is 8000x8000. "),(0,i.mdx)(p,{slots:"text",variant:"success",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"Many of the samples we've included in the ",(0,i.mdx)("a",{parentName:"p",href:"guides/develop/samples"},"code samples")," implement the Drag and Drop APIs, so please use them as a reference. This includes the the ",(0,i.mdx)("strong",{parentName:"p"},"import-images-from-local"),", ",(0,i.mdx)("strong",{parentName:"p"},"import-images-using-oauth"),", ",(0,i.mdx)("strong",{parentName:"p"},"giphy")," and ",(0,i.mdx)("strong",{parentName:"p"},"qrcode")," samples."),(0,i.mdx)("h2",{id:"export"},"Export"),(0,i.mdx)("p",null,"Allows you to export a rendition of a page or document in ",(0,i.mdx)("strong",{parentName:"p"},"jpg"),", ",(0,i.mdx)("strong",{parentName:"p"},"png"),", ",(0,i.mdx)("strong",{parentName:"p"},"pdf")," and ",(0,i.mdx)("strong",{parentName:"p"},"mp4")," formats."),(0,i.mdx)(c,{slots:"heading, code",repeat:"2",languages:"JavaScript",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"interface-8"},"Interface"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'interface Document {\n  /**\n   * Create renditions\n   */\n  createRenditions(renditionOptions: RenditionOptions): Promise<Rendition[]>;\n}\n \ninterface RenditionOptions {\n  /**\n   * Range of the document to get the rendition\n   */\n  range: Range;\n \n  /**\n   * Format of the rendition\n   */\n  format: RenditionFormat;\n}\n\nexport enum Range {\n    /**\n     * Generate rendition for the current page\n     */\n    currentPage = "currentPage",\n\n    /**\n     * Generate rendition for all the pages\n     */\n    entireDocument = "entireDocument"\n}\n\nenum Range {\n  /**\n   * Generate rendition for the current page\n   */\n  currentPage,\n \n  /**\n   * Generate rendition for all the pages\n   */\n  entireDocument\n}\n \nenum RenditionFormat {\n  /**\n   * PNG format\n   */\n  png = "image/png",\n \n  /**\n   * JPG format\n   */\n  jpg = "image/jpeg",\n \n  /**\n   * MP4 format\n   */\n  mp4 = "video/mp4",\n \n  /**\n   * PDF format\n   */\n  pdf = "application/pdf"\n}\n \ninterface JpgRenditionOptions extends RenditionOptions {\n  /**\n   * JPG rendition format\n   */\n  format: RenditionFormat.jpg;\n \n  /**\n   * The background color to sit behind any transparent areas.\n   * By default it is derived from the entity for which the rendition needs to be created.\n   * Integer in 0xRRGGBB format.\n   */\n  backgroundColor?: number;\n \n  /**\n   * A number between 0 and 1, indicating image quality. Default is 1.0\n   */\n  quality?: number;\n}\n \ninterface PngRenditionOptions extends RenditionOptions {\n  /**\n   * PNG rendition format\n   */\n  format: RenditionFormat.png;\n \n  /**\n   * The background color to sit behind any transparent areas.\n   * By default it is derived from the entity for which the rendition needs to be created.\n   * Integer in 0xAARRGGBB format\n   */\n  backgroundColor?: number;\n}\n\ninterface Rendition {\n  /**\n   * Type of Rendition\n   */\n  type: RenditionType;\n  \n  /**\n   * Blob containing the rendition\n   */\n  blob: Blob;\n}\n \nenum RenditionType {\n  /**\n   * Rendition of the whole page\n   */\n  page = "page"\n}\n \ninterface PageRendition extends Rendition {\n  /**\n   * Page rendition type\n   */\n  type: RenditionType.page;\n \n  /**\n   * Page title\n   */\n  title: string;\n}\n')),(0,i.mdx)("h3",{id:"example-8"},"Example"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import AddOnSDKAPI from "https://new.express.adobe.com/static/add-on-sdk/sdk.js";\n\n// Display preview of all pages in the AddOn UI\nasync function displayPreview() {\n  try {\n    const renditionOptions: PngRenditionOptions = {range: Range.entireDocument, format: RenditionFormat.png, backgroundColor: 0x7FAA77FF};\n    const renditions = await AddOnSDKAPI.app.document.createRenditions(renditionOptions);\n    renditions.forEach(rendition => {\n      const image = document.createElement("img");\n      image.src = URL.createObjectURL(rendition.blob);\n      document.body.appendChild(image);\n    });\n  }\n  catch(error) {\n    console.log("Failed to create renditions:", error);\n  }\n}\n')),(0,i.mdx)(p,{slots:"text",variant:"success",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"Please refer to the ",(0,i.mdx)("strong",{parentName:"p"},"export-sample")," and ",(0,i.mdx)("strong",{parentName:"p"},"pix")," add-on in the code samples for more details on how to use the Export APIs."),(0,i.mdx)("h2",{id:"simple-modal-dialogs"},"Simple Modal Dialogs"),(0,i.mdx)("p",null,"Allows you to pop-up a modal with different variations depending on needs."),(0,i.mdx)("p",null,"You can also check the ",(0,i.mdx)("a",{parentName:"p",href:"../references/manifest.md"},"manifest documentation")," and the ",(0,i.mdx)("a",{parentName:"p",href:"guides/develop/samples"},"dialog-add-on")," code sample for more details on this flag and see how it's used. Also, please report any issues or feedback you may have for this API to the ",(0,i.mdx)("strong",{parentName:"p"},"#express-addons-support")," slack channel."),(0,i.mdx)(c,{slots:"heading, code",repeat:"2",languages:"JavaScript",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"interface-9"},"Interface"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'interface Application {\n  /**\n   * Show modal dialog\n   */\n  showModalDialog(dialogOptions: DialogOptions): Promise<DialogResult>;\n}\n \ninterface DialogOptions {\n  /**\n   * Variant\n   */\n  variant: Variant;\n \n  /**\n   * Title\n   */\n  title: LocalizedString;\n \n  /**\n   * Description\n   */\n  description: LocalizedString;\n \n  /**\n   * Buttons\n   */\n  buttonLabels?: ButtonLabels;\n}\n \ninterface InputDialogOptions extends DialogOptions {\n  /**\n   * Variant\n   */\n  variant: Variant.input;\n \n  /**\n   * Input field\n   */\n  field: Field;\n}\n \nenum Variant {\n  export enum Variant {\n    /**\n     * Ask a user to confirm an action\n     */\n    confirmation = "confirmation",\n\n    /**\n     * Share information for user to acknowledge\n     */\n    information = "information",\n\n    /**\n     * Share information that a user needs to consider before proceeding\n     */\n    warning = "warning",\n\n    /**\n     * Tell a user that if they proceed with an action, it may impact their data in a negative way\n     */\n    destructive = "destructive",\n\n    /**\n     * Communicate critical issue that a user needs to resolve before proceeding\n     */\n    error = "error",\n\n    /**\n     * Ask a user to provide some inputs\n     */\n    input = "input"\n}\n \ninterface ButtonLabels {\n  /**\n   * Primary action label\n   * Default label is "OK".\n   */\n  primary?: LocalizedString;\n \n  /**\n   * Secondary action label\n   */\n  secondary?: LocalizedString;\n \n  /**\n   * Cancel action label\n   */\n  cancel?: LocalizedString;\n}\n \ninterface Field {\n  /**\n   * Label\n   */\n  label: LocalizedString;\n \n  /**\n   * Specifies a short hint that describes the expected value of the field\n   */\n  placeholder: LocalizedString;\n \n  /**\n   * Type of the field\n   */\n  fieldType: FieldType;\n}\n \nenum FieldType {\n  /**\n   * One-line text input field\n   */\n  text = "text"\n}\n \n/**\n * Placeholder for future localization support\n */\ntype LocalizedString = string;\n \ninterface DialogResult {\n  /**\n   * Clicked button\n   */\n  buttonType: ButtonType\n}\n \ninterface InputDialogResult extends DialogResult {\n  /**\n   * Field value\n   */\n  fieldValue: string;\n}\n\n/**\n * Button types for Simple Dialog\n */\nexport enum ButtonType {\n    /**\n     * Primary button pressed\n     */\n    primary = "primary",\n\n    /**\n     * Secondary button pressed\n     */\n    secondary = "secondary",\n\n    /**\n     * Cancel button pressed\n     */\n    cancel = "cancel",\n\n    /**\n     * Dialog closed via ESC or close(X) button\n     */\n    close = "close"\n}\n')),(0,i.mdx)("h3",{id:"example-9"},"Example"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'import AddOnSDKAPI from "https://new.express.adobe.com/static/add-on-sdk/sdk.js";\n \n// Wait for the SDK to be ready\nawait AddOnSDKAPI.ready;\n  \n// Get confirmation from the user to enable a feature\nasync function EnableSmartFilters() {\n  try {\n    const dialogResult = await AddOnSDKAPI.app.showModalDialog({\n        variant: Variant.confirmation,\n        title: "Enable smart Filters",\n        description: "Smart filters are nondestructive and will preserve your original images.",\n        buttonLabels: { primary: "Enable", cancel: "Cancel" },\n      });\n \n    if (dialogResult.buttonType === ButtonType.primary) {\n      // Enable smart filters\n    }\n  } catch (error) {\n    console.log("Error showing modal dialog:", error);\n  }\n}\n')),(0,i.mdx)(p,{slots:"text",variant:"success",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"We have provided a sample that can be used as a reference for implementing the Dialog APIs. Please see the ",(0,i.mdx)("strong",{parentName:"p"},"dialog-add-on")," sample provided in the ",(0,i.mdx)("a",{parentName:"p",href:"guides/develop/samples"},"code samples")," for specific details."))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-references-index-md-4d9904731584df0a4e23.js.map