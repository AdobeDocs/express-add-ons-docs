{"version":3,"file":"component---src-pages-guides-develop-how-to-modal-dialogs-md-7e57194e4476176e87d7.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/develop/how_to/modal_dialogs.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"use-modal-dialogs\"\n    }}>{`Use Modal Dialogs`}</h1>\n    <p>{`When you need to pop up a dialog to show a certain message, such as an informational, warning, or error message, you can use a modal dialog.`}</p>\n    <p>{`Below are some examples of the different types. Also, check out the SDK references for details on how to `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/addonsdk/addonsdk-app.md#showmodaldialog\"\n      }}>{`show`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/addonsdk/runtime-dialog.md#close\"\n      }}>{`programmatically close a dialog`}</a>{`, as well as the `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/samples.md#dialog-add-on\"\n      }}>{`dialog add-on sample`}</a>{` for more details.`}</p>\n    <h2 {...{\n      \"id\": \"simple-modal-dialog\"\n    }}>{`Simple Modal Dialog`}</h2>\n    <p>{`You can show a dialog with the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/addonsdk-app.md#showmodaldialog\"\n      }}><inlineCode parentName=\"a\">{`addOnUISdk.app.showModalDialog()`}</inlineCode></a>{` method, which accepts an options object containing the `}<inlineCode parentName=\"p\">{`variant`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`title`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`description`}</inlineCode>{` and, optionally, `}<inlineCode parentName=\"p\">{`buttonLabels`}</inlineCode>{`. The returned result object from a dialog will contain the `}<inlineCode parentName=\"p\">{`buttonType`}</inlineCode>{` clicked.`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(() => {\n  // Utility function to show a confirmation dialog\n  async function showConfirmDialog() {\n    try {\n      // Dialog Settings\n      const dialogOptions = {\n        // Available variants:\n        // confirmation, information, warning,\n        // destructive, error, input, custom\n        variant: \"confirmation\",\n        title: \"Enable smart Filters\",\n        description: \"Smart filters are editable filters.\",\n        // Available button labels: primary, secondary, cancel\n        buttonLabels: { primary: \"Enable\", cancel: \"Cancel\" },\n      };\n\n      // Show the dialog\n      const result = await addOnUISdk.app.showModalDialog(dialogOptions);\n\n      // Log the button type clicked, return either \"primary\" or \"cancel\"\n      console.log(\"Button type clicked \" + result.buttonType);\n    } catch (error) {\n      console.log(\"Error showing modal dialog:\", error);\n    }\n  }\n  // Call the function to show the dialog\n  showConfirmDialog();\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"input-modal-dialog\"\n    }}>{`Input Modal Dialog`}</h3>\n    <p>{`A dialog of variant `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` allows you to accept input from the user. The construction of the dialog is similar to the previous example, but with an additional `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/addonsdk-app.md#field\"\n      }}><inlineCode parentName=\"a\">{`field`}</inlineCode></a>{` object that defines the input field and has a `}<inlineCode parentName=\"p\">{`label`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`placeholder`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`fieldType`}</inlineCode>{` properties. In addition to the `}<inlineCode parentName=\"p\">{`buttonType`}</inlineCode>{`, the `}<inlineCode parentName=\"p\">{`fieldValue`}</inlineCode>{` is returned in the result object of the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/addonsdk-app.md#showmodaldialog\"\n      }}><inlineCode parentName=\"a\">{`addOnUISdk.app.showModalDialog()`}</inlineCode></a>{` method.`}</p>\n    <h3 {...{\n      \"id\": \"example-1\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(() => {\n  // Utility function to show an input dialog\n  async function showInputDialog() {\n    try {\n      // Dialog Settings\n      const inputDialogOptions = {\n        variant: \"input\", // ðŸ‘ˆ\n        title: \"Please enter your key\",\n        description: \"Your API key\",\n        buttonLabels: { cancel: \"Cancel\" },\n        field: {\n          // ðŸ‘ˆ\n          label: \"API Key\",\n          placeholder: \"Enter API key\",\n          fieldType: \"text\",\n        },\n      };\n\n      // Show the dialog\n      const inputDialogResult = await addOnUISdk.app.showModalDialog(\n        inputDialogOptions\n      );\n\n      if (inputDialogResultwi.buttonType === \"primary\") {\n        // returns the input the user entered if they didn't cancel\n        console.log(\"Field value\", inputDialogResult.fieldValue); // ðŸ‘ˆ\n      }\n    } catch (error) {\n      console.log(\"Error showing modal dialog:\", error);\n    }\n  }\n  // Call the function to show the dialog\n  showInputDialog();\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"custom-dialog\"\n    }}>{`Custom Dialog`}</h2>\n    <p>{`If you need to show a dialog with custom content, you can use the `}<inlineCode parentName=\"p\">{`custom`}</inlineCode>{` variant. This allows you to define the content in a separate source file (e.g., a `}<inlineCode parentName=\"p\">{`dialog.html`}</inlineCode>{`) and specify the container's size and title.`}</p>\n    <h3 {...{\n      \"id\": \"example-2\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(() => {\n  // Utility function to show a custom dialog\n  async function showCustomDialog() {\n    try {\n      // Dialog Settings\n      const customDialogOptions = {\n        variant: \"custom\",\n        title: \"Custom Modal\",\n        src: \"dialog.html\", // use content from this html file\n        size: { width: 600, height: 400 },\n      };\n\n      // Show the dialog\n      const customDialogResult = await addOnUISdk.app.showModalDialog(\n        customDialogOptions\n      );\n\n      // Log the result object\n      console.log(\"Custom dialog result \" + customDialogResult.result);\n    } catch (error) {\n      console.log(\"Error showing modal dialog:\", error);\n    }\n  }\n  // Call the function to show the dialog\n  showCustomDialog();\n});\n`}</code></pre>\n    <p>{`Inside the custom dialog's HTML file, you can use the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/runtime-dialog.md\"\n      }}><inlineCode parentName=\"a\">{`addOnUISdk.instance.runtime.dialog`}</inlineCode></a>{` object, especially its `}<inlineCode parentName=\"p\">{`close()`}</inlineCode>{` method, to programmatically close the dialog and set an optional return value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\n// Wait for the SDK to be ready\nawait addOnUISdk.ready;\n\ncloseButton.onsubmit = () => {\n  // User canceled the operation, close the dialog with no result\n  addOnUISdk.instance.runtime.dialog.close();\n};\n\ncreateButton.onsubmit = () => {\n  // return an object, to be captured in the result object\n  addOnUISdk.instance.runtime.dialog.close({\n    selectedDesign: \"grid-layout\",\n  });\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use Cases`}</h2>\n    <p>{`Modals are versatile tools suitable for a wide range of scenarios. They can display simple information or warning pop-ups when you need users to confirm an action or provide input. Additionally, modals can present more complex content, such as custom dialogs that initiate the payment process for accessing add-on's premium features.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}