{"version":3,"file":"component---src-pages-guides-learn-how-to-handle-selection-md-3a22101e52a620a5ddd7.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/learn/how_to/handle_selection.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst InlineNestedAlert = makeShortcode(\"InlineNestedAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"handle-element-selection\"\n    }}>{`Handle Element Selection`}</h1>\n    <p>{`Learn how to work with user selections, handle selection changes, and create responsive interfaces that react to what users select in their Adobe Express documents.`}</p>\n    <h2 {...{\n      \"id\": \"getting-started-with-selections\"\n    }}>{`Getting Started with Selections`}</h2>\n    <p>{`Selections in Adobe Express represent the elements (nodes) that users have currently selected in their document. The selection system provides access to what's selected, the ability to change selections programmatically, and events to respond to selection changes.`}</p>\n    <p>{`All selection operations use the `}<strong parentName=\"p\">{`Document API`}</strong>{` and run in the `}<strong parentName=\"p\">{`document sandbox environment`}</strong>{`. This means your selection code should be placed in your `}<inlineCode parentName=\"p\">{`code.js`}</inlineCode>{` file, not in your main iframe panel code.`}</p>\n    <InlineAlert slots=\"header,text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <h3 {...{\n      \"id\": \"document-sandbox-setup\"\n    }}>{`Document Sandbox Setup`}</h3>\n    <p>{`Make sure your `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{` includes `}<inlineCode parentName=\"p\">{`\"documentSandbox\": \"code.js\"`}</inlineCode>{` in the entry points to set up the document sandbox environment.`}</p>\n    <h3 {...{\n      \"id\": \"check-current-selection\"\n    }}>{`Check Current Selection`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js  \nimport { editor } from \"express-document-sdk\";\n\n// Check if anything is selected\nif (editor.context.hasSelection) {\n  const selection = editor.context.selection;\n  console.log(\\`Selected \\${selection.length} item(s)\\`);\n  \n  // Process each selected node\n  selection.forEach((node, index) => {\n    console.log(\\`Node \\${index + 1}: \\${node.type}\\`);\n  });\n} else {\n  console.log(\"Nothing is selected\");\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// sandbox/code.ts\nimport { editor, Node, EditorEvent } from \"express-document-sdk\";\n\n// Check if anything is selected\nif (editor.context.hasSelection) {\n  const selection: readonly Node[] = editor.context.selection;\n  console.log(\\`Selected \\${selection.length} item(s)\\`);\n  \n  // Process each selected node\n  selection.forEach((node: Node, index: number) => {\n    console.log(\\`Node \\${index + 1}: \\${node.type}\\`);\n  });\n} else {\n  console.log(\"Nothing is selected\");\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"understanding-selections\"\n    }}>{`Understanding Selections`}</h2>\n    <p>{`In Adobe Express, the selection system provides:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Current selection access`}</strong>{` - Get what's currently selected`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Selection modification`}</strong>{` - Programmatically change selections  `}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Selection events`}</strong>{` - React to selection changes`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Selection filtering`}</strong>{` - Handle locked/non-editable content`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"selection-rules\"\n    }}>{`Selection Rules`}</h3>\n    <p>{`Adobe Express enforces these constraints:`}</p>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Artboard constraint`}</strong>{` - Only nodes within the current artboard can be selected`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Hierarchy filtering`}</strong>{` - Cannot select both parent and child nodes simultaneously`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Locked node filtering`}</strong>{` - Locked nodes are excluded from the main selection`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Editable-only`}</strong>{` - Main selection only includes editable nodes`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"basic-selection-operations\"\n    }}>{`Basic Selection Operations`}</h2>\n    <p>{`Core operations for working with selections.`}</p>\n    <h3 {...{\n      \"id\": \"getting-the-current-selection\"\n    }}>{`Getting the Current Selection`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-1\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Get the current selection\nconst selection = editor.context.selection;\n\nconsole.log(\"Selected nodes:\", selection.length);\n\n// Process each selected node\nselection.forEach((node, index) => {\n  console.log(\\`Node \\${index + 1}: \\${node.type}\\`);\n  \n  // Common node properties you can access\n  console.log(\"  Position:\", node.translation);\n  console.log(\"  Size:\", { width: node.width, height: node.height });\n});\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-1\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// sandbox/code.ts\nimport { editor, Node, EditorEvent } from \"express-document-sdk\";\n\n// Get the current selection\nconst selection: readonly Node[] = editor.context.selection;\n\nconsole.log(\"Selected nodes:\", selection.length);\n\n// Process each selected node\nselection.forEach((node: Node, index: number) => {\n  console.log(\\`Node \\${index + 1}: \\${node.type}\\`);\n  \n  // Common node properties you can access  \n  console.log(\"  Position:\", node.translation);\n  console.log(\"  Size:\", { width: node.width, height: node.height });\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"programmatic-selection\"\n    }}>{`Programmatic Selection`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-2\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Create and select a single element\nconst rectangle = editor.createRectangle();\nrectangle.width = 100;\nrectangle.height = 100;\nrectangle.translation = { x: 50, y: 50 };\n\n// Add to document\neditor.context.insertionParent.children.append(rectangle);\n\n// Select the rectangle (single element)\neditor.context.selection = rectangle; \n// OR using array syntax: editor.context.selection = [rectangle];\n\nconsole.log(\"Rectangle is now selected\");\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-2\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// code.ts  \nimport { editor, RectangleNode, ContainerNode } from \"express-document-sdk\";\n\n// Create a simple rectangle to demonstrate selection\nconst rectangle: RectangleNode = editor.createRectangle();\nrectangle.width = 100;\nrectangle.height = 100;\nrectangle.translation = { x: 50, y: 50 };\n\n// Add to document\nconst insertionParent: ContainerNode = editor.context.insertionParent;\ninsertionParent.children.append(rectangle);\n\n// Select the rectangle (single element)\neditor.context.selection = rectangle;\n// OR using array syntax: editor.context.selection = [rectangle];\n\nconsole.log(\"Rectangle is now selected\");\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"multiple-selection\"\n    }}>{`Multiple Selection`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-3\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Create multiple elements\nconst rectangle = editor.createRectangle();\nrectangle.width = 80;\nrectangle.height = 80;\nrectangle.translation = { x: 50, y: 50 };\n\nconst ellipse = editor.createEllipse();\nellipse.rx = 40;\nellipse.ry = 40;\nellipse.translation = { x: 200, y: 50 };\n\n// Add both to document\nconst parent = editor.context.insertionParent;\nparent.children.append(rectangle, ellipse);\n\n// Select both elements at once\neditor.context.selection = [rectangle, ellipse];\n\nconsole.log(\"Multiple elements selected:\", editor.context.selection.length);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-3\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// sandbox/code.ts\nimport { editor, RectangleNode, EllipseNode, ContainerNode } from \"express-document-sdk\";\n\n// Create multiple simple elements\nconst rectangle: RectangleNode = editor.createRectangle();\nrectangle.width = 80;\nrectangle.height = 80;  \nrectangle.translation = { x: 50, y: 50 };\n\nconst ellipse: EllipseNode = editor.createEllipse();\nellipse.rx = 40;\nellipse.ry = 40;\nellipse.translation = { x: 200, y: 50 };\n\n// Add both to document\nconst parent: ContainerNode = editor.context.insertionParent;\nparent.children.append(rectangle, ellipse);\n\n// Select both elements at once\neditor.context.selection = [rectangle, ellipse];\n\nconsole.log(\"Multiple elements selected:\", editor.context.selection.length);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"clearing-the-selection\"\n    }}>{`Clearing the Selection`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-4\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Clear the selection - both ways work\neditor.context.selection = [];\n// OR: editor.context.selection = undefined;\n\nconsole.log(\"Selection cleared\");\nconsole.log(\"Has selection:\", editor.context.hasSelection); // false\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-4\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// sandbox/code.ts\nimport { editor } from \"express-document-sdk\";\n\n// Clear the selection - both ways work\neditor.context.selection = [];\n// OR: editor.context.selection = undefined;\n\nconsole.log(\"Selection cleared\");\nconsole.log(\"Has selection:\", editor.context.hasSelection); // false\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"selection-events\"\n    }}>{`Selection Events`}</h2>\n    <p>{`Respond to selection changes to create dynamic UIs that update based on what's selected.`}</p>\n    <h3 {...{\n      \"id\": \"basic-selection-change-handler\"\n    }}>{`Basic Selection Change Handler`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-5\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, EditorEvent } from \"express-document-sdk\";\n\n// Listen for selection changes  \nconst handlerId = editor.context.on(EditorEvent.selectionChange, () => {\n  const selection = editor.context.selection;\n  \n  console.log(\"Selection changed!\");\n  console.log(\"New selection count:\", selection.length);\n  \n  if (selection.length === 0) {\n    console.log(\"Nothing selected\");\n  } else if (selection.length === 1) {\n    console.log(\"One item selected:\", selection[0].type);\n  } else {\n    console.log(\"Multiple items selected\");\n  }\n});\n\n// Store handlerId if you need to unregister later\nconsole.log(\"Selection handler registered:\", handlerId);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-5\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// sandbox/code.ts\nimport { editor, Node, EditorEvent } from \"express-document-sdk\";\n\n// Listen for selection changes\nconst handlerId: string = editor.context.on(EditorEvent.selectionChange, () => {\n  const selection: readonly Node[] = editor.context.selection;\n  \n  console.log(\"Selection changed!\");\n  console.log(\"New selection count:\", selection.length);\n  \n  if (selection.length === 0) {\n    console.log(\"Nothing selected\");\n  } else if (selection.length === 1) {\n    console.log(\"One item selected:\", selection[0].type);\n  } else {\n    console.log(\"Multiple items selected\");\n  }\n});\n\n// Store handlerId if you need to unregister later  \nconsole.log(\"Selection handler registered:\", handlerId);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"properties-panel-example\"\n    }}>{`Properties Panel Example`}</h3>\n    <p>{`Dynamic properties panel based on selection:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-6\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, EditorEvent } from \"express-document-sdk\";\n\nfunction updatePropertiesPanel() {\n  const selection = editor.context.selection;\n  \n  if (selection.length === 0) {\n    console.log(\"Properties Panel: Show 'Nothing Selected' state\");\n    return;\n  }\n  \n  if (selection.length === 1) {\n    const node = selection[0];\n    console.log(\"Properties Panel: Show properties for\", node.type);\n    \n    // Show different properties based on node type\n    if (node.type === \"Text\") {\n      console.log(\"  - Show font controls\");\n      console.log(\"  - Show text color picker\");\n    } else if (node.type === \"Rectangle\" || node.type === \"Ellipse\") {\n      console.log(\"  - Show fill color picker\");  \n      console.log(\"  - Show stroke controls\");\n    }\n    \n    // Common properties for all nodes\n    console.log(\"  - Show position controls\");\n    console.log(\"  - Show size controls\");\n    \n  } else {\n    console.log(\"Properties Panel: Show multi-selection options\");\n    console.log(\\`  - \\${selection.length} items selected\\`);\n    console.log(\"  - Show alignment tools\");\n    console.log(\"  - Show group option\");\n  }\n}\n\n// Register the handler\neditor.context.on(EditorEvent.selectionChange, updatePropertiesPanel);\n\n// Call once on startup to initialize\nupdatePropertiesPanel();\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-6\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// sandbox/code.ts\nimport { editor, Node, TextNode } from \"express-document-sdk\";\n\nfunction updatePropertiesPanel(): void {\n  const selection: readonly Node[] = editor.context.selection;\n  \n  if (selection.length === 0) {\n    console.log(\"Properties Panel: Show 'Nothing Selected' state\");\n    return;\n  }\n  \n  if (selection.length === 1) {\n    const node: Node = selection[0];\n    console.log(\"Properties Panel: Show properties for\", node.type);\n    \n    // Show different properties based on node type\n    if (node.type === \"Text\") {\n      console.log(\"  - Show font controls\");\n      console.log(\"  - Show text color picker\");\n    } else if (node.type === \"Rectangle\" || node.type === \"Ellipse\") {\n      console.log(\"  - Show fill color picker\");\n      console.log(\"  - Show stroke controls\");\n    }\n    \n    // Common properties for all nodes\n    console.log(\"  - Show position controls\");\n    console.log(\"  - Show size controls\");\n    \n  } else {\n    console.log(\"Properties Panel: Show multi-selection options\");\n    console.log(\\`  - \\${selection.length} items selected\\`);\n    console.log(\"  - Show alignment tools\");\n    console.log(\"  - Show group option\");\n  }\n}\n\n// Register the handler\neditor.context.on(EditorEvent.selectionChange, updatePropertiesPanel);\n\n// Call once on startup to initialize\nupdatePropertiesPanel();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"event-handler-cleanup\"\n    }}>{`Event Handler Cleanup`}</h3>\n    <p>{`⚠️ `}<strong parentName=\"p\">{`Important`}</strong>{`: Always clean up event handlers to prevent memory leaks.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-7\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, EditorEvent } from \"express-document-sdk\";\n\n// Store handler IDs so you can unregister them later\nlet selectionHandlerId = null;\n\nfunction startListening() {\n  // Register handler and store the ID\n  selectionHandlerId = editor.context.on(EditorEvent.selectionChange, () => {\n    console.log(\"Selection changed!\");\n    // Handle selection change\n  });\n  \n  console.log(\"✅ Selection handler registered\");\n}\n\nfunction stopListening() {\n  // Clean up the handler\n  if (selectionHandlerId) {\n    editor.context.off(EditorEvent.selectionChange, selectionHandlerId);\n    selectionHandlerId = null;\n    console.log(\"✅ Selection handler cleaned up\");\n  }\n}\n\n// Start listening\nstartListening();\n\n// Clean up when your add-on is being destroyed or reset\n// stopListening();\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-7\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// sandbox/code.ts\nimport { editor, EditorEvent } from \"express-document-sdk\";\n\n// Store handler IDs so you can unregister them later\nlet selectionHandlerId: string | null = null;\n\nfunction startListening(): void {\n  // Register handler and store the ID\n  selectionHandlerId = editor.context.on(EditorEvent.selectionChange, () => {\n    console.log(\"Selection changed!\");\n    // Handle selection change\n  });\n  \n  console.log(\"✅ Selection handler registered\");\n}\n\nfunction stopListening(): void {\n  // Clean up the handler\n  if (selectionHandlerId) {\n    editor.context.off(EditorEvent.selectionChange, selectionHandlerId);\n    selectionHandlerId = null;\n    console.log(\"✅ Selection handler cleaned up\");\n  }\n}\n\n// Start listening\nstartListening();\n\n// Clean up when your add-on is being destroyed or reset\n// stopListening();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"advanced-selection-techniques\"\n    }}>{`Advanced Selection Techniques`}</h2>\n    <p>{`Advanced patterns for complex add-ons.`}</p>\n    <h3 {...{\n      \"id\": \"working-with-lockednon-editable-elements\"\n    }}>{`Working with Locked/Non-Editable Elements`}</h3>\n    <p>{`Handle selections that include locked or non-editable content:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-8\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, EditorEvent } from \"express-document-sdk\";\n\nfunction analyzeCompleteSelection() {\n  const selection = editor.context.selection;\n  const fullSelection = editor.context.selectionIncludingNonEditable;\n  \n  return {\n    editableCount: selection.length,\n    totalCount: fullSelection.length,\n    lockedCount: fullSelection.length - selection.length,\n    types: [...new Set(selection.map(node => node.type))], // Unique types\n    hasText: selection.some(node => node.type === \"Text\"),\n    hasShapes: selection.some(node => \n      node.type === \"Rectangle\" || node.type === \"Ellipse\"\n    ),\n    isEmpty: !editor.context.hasSelection\n  };\n}\n\n// Example: Dynamic UI updates based on detailed analysis\neditor.context.on(EditorEvent.selectionChange, () => {\n  const analysis = analyzeCompleteSelection();\n  \n  console.log(\"📊 Detailed Selection Info:\");\n  console.log(\\`  Editable: \\${analysis.editableCount}\\`);\n  if (analysis.lockedCount > 0) {\n    console.log(\\`  Locked: \\${analysis.lockedCount}\\`);\n  }\n  console.log(\\`  Types: \\${analysis.types.join(\", \")}\\`);\n  \n  // Enable specific tools based on content\n  if (analysis.hasText) {\n    console.log(\"🔤 Text formatting tools available\");\n  }\n  if (analysis.hasShapes) {\n    console.log(\"🔷 Shape styling tools available\");  \n  }\n  if (analysis.editableCount > 1) {\n    console.log(\"📐 Alignment tools available\");\n  }\n});\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-8\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// code.ts\nimport { editor, Node, EditorEvent } from \"express-document-sdk\";\n\ninterface DetailedSelectionAnalysis {\n  editableCount: number;\n  totalCount: number;\n  lockedCount: number;\n  types: string[];\n  hasText: boolean;\n  hasShapes: boolean;\n  isEmpty: boolean;\n}\n\nfunction analyzeSelection(): DetailedSelectionAnalysis {\n  const selection: readonly Node[] = editor.context.selection;\n  const fullSelection: readonly Node[] = editor.context.selectionIncludingNonEditable;\n  \n  return {\n    editableCount: selection.length,\n    totalCount: fullSelection.length,\n    lockedCount: fullSelection.length - selection.length,\n    types: [...new Set(selection.map((node: Node) => node.type))], // Unique types\n    hasText: selection.some((node: Node) => node.type === \"Text\"),\n    hasShapes: selection.some((node: Node) => \n      node.type === \"Rectangle\" || node.type === \"Ellipse\"\n    ),\n    isEmpty: !editor.context.hasSelection\n  };\n}\n\n// Example: Dynamic UI updates based on detailed analysis\neditor.context.on(EditorEvent.selectionChange, () => {\n  const analysis: DetailedSelectionAnalysis = analyzeSelection();\n  \n  console.log(\"📊 Detailed Selection Info:\");\n  console.log(\\`  Editable: \\${analysis.editableCount}\\`);\n  if (analysis.lockedCount > 0) {\n    console.log(\\`  Locked: \\${analysis.lockedCount}\\`);\n  }\n  console.log(\\`  Types: \\${analysis.types.join(\", \")}\\`);\n  \n  // Enable specific tools based on content\n  if (analysis.hasText) {\n    console.log(\"🔤 Text formatting tools available\");\n  }\n  if (analysis.hasShapes) {\n    console.log(\"🔷 Shape styling tools available\");\n  }\n  if (analysis.editableCount > 1) {\n    console.log(\"📐 Alignment tools available\");\n  }\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ui-integration\"\n    }}>{`UI Integration`}</h2>\n    <p>{`Communicate selection changes between the document sandbox and your UI panel to create responsive interfaces.`}</p>\n    <h3 {...{\n      \"id\": \"selection-based-actions\"\n    }}>{`Selection-Based Actions`}</h3>\n    <p>{`Common patterns for performing actions on selected elements:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-9\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, colorUtils } from \"express-document-sdk\";\n\n// Function to apply red color to selected text\nfunction applyRedToSelectedText() {\n  const selection = editor.context.selection;\n  \n  // Filter for text nodes only\n  const textNodes = selection.filter(node => node.type === \"Text\");\n  \n  if (textNodes.length === 0) {\n    console.log(\"No text nodes selected\");\n    return;\n  }\n  \n  // Apply red color to all selected text\n  const redColor = colorUtils.fromHex(\"#FF0000\");\n  \n  textNodes.forEach(textNode => {\n    textNode.fullContent.applyCharacterStyles({ color: redColor });\n  });\n  \n  console.log(\\`Applied red color to \\${textNodes.length} text nodes\\`);\n}\n\n// Function to group selected elements\nfunction groupSelection() {\n  const selection = editor.context.selection;\n  \n  if (selection.length < 2) {\n    console.log(\"Need at least 2 elements to create a group\");\n    return;\n  }\n  \n  // Create a group\n  const group = editor.createGroup();\n  \n  // Add selected elements to the group\n  selection.forEach(node => {\n    // Remove from current parent and add to group\n    node.removeFromParent();\n    group.children.append(node);\n  });\n  \n  // Add group to the document\n  editor.context.insertionParent.children.append(group);\n  \n  // Select the new group\n  editor.context.selection = group;\n  \n  console.log(\\`Created group with \\${selection.length} elements\\`);\n}\n\n// Register handlers for different actions\neditor.context.on(EditorEvent.selectionChange, () => {\n  const selection = editor.context.selection;\n  \n  // Update UI or enable/disable actions based on selection\n  if (selection.length === 0) {\n    console.log(\"No selection - disable all actions\");\n  } else if (selection.length === 1) {\n    console.log(\"Single selection - enable individual actions\");\n  } else {\n    console.log(\"Multiple selection - enable group actions\");\n  }\n});\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-9\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// sandbox/code.ts\nimport { editor, colorUtils, Node, TextNode, GroupNode, ContainerNode } from \"express-document-sdk\";\n\n// Function to apply red color to selected text\nfunction applyRedToSelectedText(): void {\n  const selection: readonly Node[] = editor.context.selection;\n  \n  // Filter for text nodes only\n  const textNodes = selection.filter((node: Node): node is TextNode => \n    node.type === \"Text\"\n  );\n  \n  if (textNodes.length === 0) {\n    console.log(\"No text nodes selected\");\n    return;\n  }\n  \n  // Apply red color to all selected text\n  const redColor = colorUtils.fromHex(\"#FF0000\");\n  \n  textNodes.forEach((textNode: TextNode) => {\n    textNode.fullContent.applyCharacterStyles({ color: redColor });\n  });\n  \n  console.log(\\`Applied red color to \\${textNodes.length} text nodes\\`);\n}\n\n// Function to group selected elements\nfunction groupSelection(): void {\n  const selection: readonly Node[] = editor.context.selection;\n  \n  if (selection.length < 2) {\n    console.log(\"Need at least 2 elements to create a group\");\n    return;\n  }\n  \n  // Create a group\n  const group: GroupNode = editor.createGroup();\n  \n  // Add selected elements to the group\n  selection.forEach((node: Node) => {\n    // Remove from current parent and add to group\n    node.removeFromParent();\n    group.children.append(node);\n  });\n  \n  // Add group to the document\n  const insertionParent: ContainerNode = editor.context.insertionParent;\n  insertionParent.children.append(group);\n  \n  // Select the new group\n  editor.context.selection = group;\n  \n  console.log(\\`Created group with \\${selection.length} elements\\`);\n}\n\n// Register handlers for different actions\neditor.context.on(EditorEvent.selectionChange, () => {\n  const selection: readonly Node[] = editor.context.selection;\n  \n  // Update UI or enable/disable actions based on selection\n  if (selection.length === 0) {\n    console.log(\"No selection - disable all actions\");\n  } else if (selection.length === 1) {\n    console.log(\"Single selection - enable individual actions\");\n  } else {\n    console.log(\"Multiple selection - enable group actions\");\n  }\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"selection-state-management\"\n    }}>{`Selection State Management`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-10\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, EditorEvent } from \"express-document-sdk\";\n\nclass SelectionManager {\n  constructor() {\n    this.selectionHistory = [];\n    this.handlerId = null;\n    this.startListening();\n  }\n  \n  startListening() {\n    this.handlerId = editor.context.on(EditorEvent.selectionChange, () => {\n      const selection = editor.context.selection;\n      \n      // Store selection in history (limit to last 10)\n      this.selectionHistory.push([...selection]);\n      if (this.selectionHistory.length > 10) {\n        this.selectionHistory.shift();\n      }\n      \n      console.log(\"Selection history length:\", this.selectionHistory.length);\n      this.notifySelectionChange(selection);\n    });\n  }\n  \n  notifySelectionChange(selection) {\n    // Custom logic based on selection\n    if (selection.length === 0) {\n      this.onNoSelection();\n    } else if (selection.length === 1) {\n      this.onSingleSelection(selection[0]);\n    } else {\n      this.onMultipleSelection(selection);\n    }\n  }\n  \n  onNoSelection() {\n    console.log(\"No elements selected\");\n    // Disable context-sensitive UI\n  }\n  \n  onSingleSelection(node) {\n    console.log(\"Single element selected:\", node.type);\n    // Enable single-element actions\n  }\n  \n  onMultipleSelection(selection) {\n    console.log(\"Multiple elements selected:\", selection.length);\n    // Enable multi-element actions\n  }\n  \n  restorePreviousSelection() {\n    if (this.selectionHistory.length >= 2) {\n      const previousSelection = this.selectionHistory[this.selectionHistory.length - 2];\n      editor.context.selection = previousSelection;\n    }\n  }\n  \n  stopListening() {\n    if (this.handlerId) {\n      editor.context.off(EditorEvent.selectionChange, this.handlerId);\n      this.handlerId = null;\n    }\n  }\n}\n\n// Usage\nconst selectionManager = new SelectionManager();\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-10\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// code.ts\nimport { editor, Node, EditorEvent } from \"express-document-sdk\";\n\nclass SelectionManager {\n  private selectionHistory: Node[][] = [];\n  private handlerId: string | null = null;\n  \n  constructor() {\n    this.startListening();\n  }\n  \n  startListening(): void {\n    this.handlerId = editor.context.on(EditorEvent.selectionChange, () => {\n      const selection: readonly Node[] = editor.context.selection;\n      \n      // Store selection in history (limit to last 10)\n      this.selectionHistory.push([...selection]);\n      if (this.selectionHistory.length > 10) {\n        this.selectionHistory.shift();\n      }\n      \n      console.log(\"Selection history length:\", this.selectionHistory.length);\n      this.notifySelectionChange(selection);\n    });\n  }\n  \n  private notifySelectionChange(selection: readonly Node[]): void {\n    // Custom logic based on selection\n    if (selection.length === 0) {\n      this.onNoSelection();\n    } else if (selection.length === 1) {\n      this.onSingleSelection(selection[0]);\n    } else {\n      this.onMultipleSelection(selection);\n    }\n  }\n  \n  private onNoSelection(): void {\n    console.log(\"No elements selected\");\n    // Disable context-sensitive UI\n  }\n  \n  private onSingleSelection(node: Node): void {\n    console.log(\"Single element selected:\", node.type);\n    // Enable single-element actions\n  }\n  \n  private onMultipleSelection(selection: readonly Node[]): void {\n    console.log(\"Multiple elements selected:\", selection.length);\n    // Enable multi-element actions\n  }\n  \n  restorePreviousSelection(): void {\n    if (this.selectionHistory.length >= 2) {\n      const previousSelection = this.selectionHistory[this.selectionHistory.length - 2];\n      editor.context.selection = previousSelection;\n    }\n  }\n  \n  stopListening(): void {\n    if (this.handlerId) {\n      editor.context.off(EditorEvent.selectionChange, this.handlerId);\n      this.handlerId = null;\n    }\n  }\n}\n\n// Usage\nconst selectionManager = new SelectionManager();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"best-practices--guidelines\"\n    }}>{`Best Practices & Guidelines`}</h2>\n    <h3 {...{\n      \"id\": \"event-handler-cleanup-1\"\n    }}>{`Event Handler Cleanup`}</h3>\n    <p>{`⚠️ `}<strong parentName=\"p\">{`Important`}</strong>{`: Always clean up event handlers to prevent memory leaks.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript-11\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, EditorEvent } from \"express-document-sdk\";\n\n// Store handler IDs for cleanup\nlet selectionHandlerId = null;\n\nfunction setupSelectionHandling() {\n  // Register handler and store ID\n  selectionHandlerId = editor.context.on(EditorEvent.selectionChange, () => {\n    console.log(\"Selection changed\");\n    // Handle selection change\n  });\n  \n  console.log(\"Selection handler registered\");\n}\n\nfunction cleanupSelectionHandling() {\n  // Unregister the handler\n  if (selectionHandlerId) {\n    editor.context.off(EditorEvent.selectionChange, selectionHandlerId);\n    selectionHandlerId = null;\n    console.log(\"Selection handler unregistered\");\n  }\n}\n\n// Setup\nsetupSelectionHandling();\n\n// Cleanup when add-on is being destroyed or reset\n// cleanupSelectionHandling();\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript-11\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// code.ts\nimport { editor, EditorEvent } from \"express-document-sdk\";\n\n// Store handler IDs for cleanup\nlet selectionHandlerId: string | null = null;\n\nfunction setupSelectionHandling(): void {\n  // Register handler and store ID\n  selectionHandlerId = editor.context.on(EditorEvent.selectionChange, () => {\n    console.log(\"Selection changed\");\n    // Handle selection change\n  });\n  \n  console.log(\"Selection handler registered\");\n}\n\nfunction cleanupSelectionHandling(): void {\n  // Unregister the handler\n  if (selectionHandlerId) {\n    editor.context.off(EditorEvent.selectionChange, selectionHandlerId);\n    selectionHandlerId = null;\n    console.log(\"Selection handler unregistered\");\n  }\n}\n\n// Setup\nsetupSelectionHandling();\n\n// Cleanup when add-on is being destroyed or reset\n// cleanupSelectionHandling();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"selection-system-rules\"\n    }}>{`Selection System Rules`}</h3>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Artboard constraint`}</strong>{`: Only nodes within the current artboard can be selected`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Hierarchy filtering`}</strong>{`: Cannot select both parent and child nodes simultaneously  `}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Locked node handling`}</strong>{`: Locked nodes are excluded from main selection but available in `}<inlineCode parentName=\"li\">{`selectionIncludingNonEditable`}</inlineCode></li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Automatic filtering`}</strong>{`: System automatically filters out invalid selections`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"important-selection-handler-restrictions\"\n    }}>{`Important: Selection Handler Restrictions`}</h3>\n    <InlineNestedAlert header=\"true\" variant=\"warning\" iconPosition=\"left\" mdxType=\"InlineNestedAlert\">\n      <p><strong parentName=\"p\">{`Document Modification Restrictions`}</strong></p>\n      <p><strong parentName=\"p\">{`Never modify the document inside selection change handlers!`}</strong>{` This can crash the application.`}</p>\n      <p><strong parentName=\"p\">{`✅ Safe in selection handlers:`}</strong></p>\n      <ul>\n        <li parentName=\"ul\">{`Update UI panels`}</li>\n        <li parentName=\"ul\">{`Log information  `}</li>\n        <li parentName=\"ul\">{`Analyze selection`}</li>\n        <li parentName=\"ul\">{`Enable/disable buttons`}</li>\n        <li parentName=\"ul\">{`Send data to UI panel`}</li>\n      </ul>\n      <p><strong parentName=\"p\">{`❌ Never do in selection handlers:`}</strong></p>\n      <ul>\n        <li parentName=\"ul\">{`Create, delete, or modify nodes`}</li>\n        <li parentName=\"ul\">{`Change document structure  `}</li>\n        <li parentName=\"ul\">{`Set properties on selected elements`}</li>\n      </ul>\n    </InlineNestedAlert>\n    <h3 {...{\n      \"id\": \"performance-guidelines\"\n    }}>{`Performance Guidelines`}</h3>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Keep handlers fast`}</strong>{`: Minimize processing time`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Essential work only`}</strong>{`: Avoid heavy computations`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Clean Up`}</strong>{`: Always unregister handlers when done (`}<inlineCode parentName=\"li\">{`editor.context.off()`}</inlineCode>{`)`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Avoid Heavy Work`}</strong>{`: Don't do complex calculations in selection callbacks`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"communication-between-ui-and-document-sandbox\"\n    }}>{`Communication Between UI and Document Sandbox`}</h3>\n    <p>{`One of the most important real-world patterns is communicating selection changes from the document sandbox to your UI panel, allowing you to update the interface based on what the user has selected.`}</p>\n    <p>{`For detailed information on the communication APIs, see the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/communication/\"\n      }}>{`Communication API reference`}</a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"complete-communication-example\"\n    }}>{`Complete Communication Example`}</h4>\n    <p>{`This example shows how to set up bidirectional communication between your UI panel and document sandbox for selection-based interactions.`}</p>\n    <h2 {...{\n      \"id\": \"quick-reference--common-patterns\"\n    }}>{`Quick Reference & Common Patterns`}</h2>\n    <p>{`Here are some frequently used patterns you can copy and adapt:`}</p>\n    <h3 {...{\n      \"id\": \"conditional-actions-based-on-selection\"\n    }}>{`Conditional Actions Based on Selection`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// code.js\nimport { editor, EditorEvent } from \"express-document-sdk\";\n\n// Enable/disable actions based on selection type\neditor.context.on(EditorEvent.selectionChange, () => {\n  const selection = editor.context.selection;\n  \n  // Communicate with your UI panel\n  const actions = {\n    canGroup: selection.length >= 2,\n    canApplyTextStyle: selection.some(node => node.type === \"Text\"),\n    canApplyFill: selection.some(node => \n      [\"Rectangle\", \"Ellipse\"].includes(node.type)\n    ),\n    isEmpty: selection.length === 0\n  };\n  \n  // Send to UI panel for enabling/disabling buttons\n  // (Use the communication API to send this data)\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"selection-based-properties-panel\"\n    }}>{`Selection-Based Properties Panel`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// code.js\nimport { editor, EditorEvent } from \"express-document-sdk\";\n\n// Update properties panel based on selection\neditor.context.on(EditorEvent.selectionChange, () => {\n  const selection = editor.context.selection;\n  \n  if (selection.length === 1) {\n    const node = selection[0]; // Common pattern: access first selected element\n    \n    // Send node properties to UI for editing\n    const properties = {\n      type: node.type,\n      width: node.width || null,\n      height: node.height || null,\n      x: node.translation?.x || null,\n      y: node.translation?.y || null,\n      locked: node.locked || false\n    };\n    \n    // Update UI panel with these properties\n    console.log(\"Node properties:\", properties);\n  }\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"working-with-single-selection\"\n    }}>{`Working with Single Selection`}</h3>\n    <p>{`Many add-ons focus on single-element operations. Here's a common pattern used throughout the documentation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// code.js\nimport { editor } from \"express-document-sdk\";\n\n// Safe access to first selected element (used in use_text.md and other guides)\nif (editor.context.hasSelection) {\n  const selectedNode = editor.context.selection[0];\n  \n  // Perform operations on the selected node\n  if (selectedNode.type === \"Text\") {\n    // Handle text-specific operations\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"faqs\"\n    }}>{`FAQs`}</h2>\n    <h4 {...{\n      \"id\": \"q-how-do-i-get-the-current-selection\"\n    }}>{`Q: How do I get the current selection?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`editor.context.selection`}</inlineCode>{` to get an array of currently selected nodes.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-listen-for-selection-changes\"\n    }}>{`Q: How do I listen for selection changes?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`editor.context.on(EditorEvent.selectionChange, callback)`}</inlineCode>{` to register a selection change handler.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-programmatically-select-elements\"\n    }}>{`Q: How do I programmatically select elements?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Set `}<inlineCode parentName=\"p\">{`editor.context.selection = node`}</inlineCode>{` for single elements or `}<inlineCode parentName=\"p\">{`editor.context.selection = [node1, node2]`}</inlineCode>{` for multiple elements.`}</p>\n    <h4 {...{\n      \"id\": \"q-whats-the-difference-between-selection-and-selectionincludingnoneditable\"\n    }}>{`Q: What's the difference between selection and selectionIncludingNonEditable?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` `}<inlineCode parentName=\"p\">{`selection`}</inlineCode>{` only includes editable nodes, while `}<inlineCode parentName=\"p\">{`selectionIncludingNonEditable`}</inlineCode>{` also includes locked/non-editable nodes.`}</p>\n    <h4 {...{\n      \"id\": \"q-can-i-modify-the-document-in-a-selection-change-callback\"\n    }}>{`Q: Can I modify the document in a selection change callback?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` No, avoid making document changes in selection change callbacks as it may destabilize the application.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-clear-the-selection\"\n    }}>{`Q: How do I clear the selection?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Set `}<inlineCode parentName=\"p\">{`editor.context.selection = []`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`editor.context.selection = undefined`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-are-the-selection-rules\"\n    }}>{`Q: What are the selection rules?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Nodes must be within the current artboard, ancestors cannot be selected with descendants, and locked nodes are filtered out.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-unregister-selection-event-handlers\"\n    }}>{`Q: How do I unregister selection event handlers?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`editor.context.off(EditorEvent.selectionChange, handlerId)`}</inlineCode>{` with the ID returned from the `}<inlineCode parentName=\"p\">{`on()`}</inlineCode>{` method.`}</p>\n    <h2 {...{\n      \"id\": \"related-topics\"\n    }}>{`Related Topics`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"../../../references/document-sandbox/document-apis/classes/Context.md\"\n          }}>{`Context API Reference`}</a></strong>{` - Complete API documentation for the Context class`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"../../../references/document-sandbox/communication/\"\n          }}>{`Communication APIs`}</a></strong>{` - Learn how to communicate between document sandbox and UI panel  `}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"./group_elements.md\"\n          }}>{`Group Elements`}</a></strong>{` - Working with selections to create and manage groups`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"./position_elements.md\"\n          }}>{`Position Elements`}</a></strong>{` - Positioning and transforming selected elements`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"./use_text.md\"\n          }}>{`Use Text`}</a></strong>{` - Examples of working with text selections using `}<inlineCode parentName=\"li\">{`editor.context.selection[0]`}</inlineCode></li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"../../../references/document-sandbox/document-apis/enumerations/EditorEvent.md\"\n          }}>{`EditorEvent Enumeration`}</a></strong>{` - All available editor events`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><a parentName=\"strong\" {...{\n            \"href\": \"../../../references/document-sandbox/document-apis/classes/Node.md\"\n          }}>{`Node API Reference`}</a></strong>{` - Understanding the Node class used in selections`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","InlineAlert","CodeBlock","InlineNestedAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","repeat","languages","header","iconPosition","isMDXComponent"],"sourceRoot":""}