{"version":3,"file":"component---src-pages-guides-develop-index-md-def12f3bff49f8d03672.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/develop/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/express-add-ons-docs/express-add-ons-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`Preview Adobe Express add-on SDK documentation while you wait to `}<a parentName=\"p\" {...{\n        \"href\": \"https://adobe.com/go/express-developer\"\n      }}>{`join our private beta`}</a>{`.`}</p>\n    <h1 {...{\n      \"id\": \"implementing-common-use-cases\"\n    }}>{`Implementing Common Use Cases`}</h1>\n    <p>{`If you're looking to explore and discover the capabilities of our add-ons platform, check out these common use cases and accompanying code snippets to help you get started with our add-on SDK. For more extensive usage examples, check out the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/samples/\"\n      }}>{`code samples`}</a>{`. The `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/\"\n      }}>{`SDK References`}</a>{` are also available to help you find all of the objects, methods, properties and events supported for building add-ons.`}</p>\n    <h2 {...{\n      \"id\": \"importing-content\"\n    }}>{`Importing Content`}</h2>\n    <p>{`Importing content into a design is one of the most popular use cases. For instance, to add content retrieved from a third-party service or directly from the local hard drive. The following example use cases for implementing this feature. The first function shows how to implement it by adding an image directly from a `}<inlineCode parentName=\"p\">{`blob`}</inlineCode>{` object, and the second shows how to implement it by fetching an image via a URL first. Follow the example below to implement this feature, but also be sure to refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/app-document/#methods\"\n      }}>{`related SDK Reference section`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/samples/\"\n      }}>{`code samples`}</a>{` for more details.`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\n// Wait for the SDK to be ready\nawait AddOnSdk.ready;\n\n// Reference to the active document\nconst { document } = AddOnSdk.app;\n\n// Add image via blob to the current page\nasync function addImageFromBlob(blob) {\n  try {\n    await document.addImage(blob);\n  } catch (error) {\n    console.log(\"Failed to add the image to the page.\");\n  }\n}\n\n// Add image via url to the current page\nasync function addImageFromURL(url) {\n  try {\n    const blob = await fetch(url).then((response) => response.blob());\n    await document.addImage(blob);\n  } catch (error) {\n    console.log(\"Failed to add the image to the page.\");\n  }\n}\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`The supported file types for imported content are currently `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`png/jpg/mp4`}</inlineCode>{`,`}</strong>{` and the size of the imported images should not exceed `}<strong parentName=\"p\">{`8000px`}</strong>{` or `}<strong parentName=\"p\">{`40MB`}</strong>{`. See the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/app-document/\"\n      }}>{`SDK References`}</a>{` for additional details on importing content. `}</p>\n    <h2 {...{\n      \"id\": \"exporting-content\"\n    }}>{`Exporting Content`}</h2>\n    <p>{`Another popular feature available for use in your add-on is the ability to export content. For instance, if you want to allow the user to save/download the current design, (or range of a design), with certain export configurations to their local hard drive. Some examples for exporting content are provided below, but also check out the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/app-document/#createrenditions\"\n      }}><inlineCode parentName=\"a\">{`createRenditions`}</inlineCode>{` section in the SDK Reference`}</a>{` for more specific options and details, as well as the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/samples/#export-sample\"\n      }}>{`export-sample add-on`}</a>{`.`}</p>\n    <p>{`The steps to export content:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Call `}<inlineCode parentName=\"li\">{`createRenditions()`}</inlineCode>{` to get the renditions based on your export configuration options. `}</li>\n      <li parentName=\"ul\">{`Convert the `}<inlineCode parentName=\"li\">{`blob`}</inlineCode>{` object returned in the response to a `}<inlineCode parentName=\"li\">{`string`}</inlineCode>{` with the `}<inlineCode parentName=\"li\">{`URL.createObjectURL(blob)`}</inlineCode>{` method.`}</li>\n      <li parentName=\"ul\">{`Create or update an anchor `}<inlineCode parentName=\"li\">{`<a>`}</inlineCode>{` element's `}<inlineCode parentName=\"li\">{`href`}</inlineCode>{` value with the URL string from the above step.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"basic-example\"\n    }}>{`Basic Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\nconst response = await AddOnSdk.app.document.createRenditions({\n    range: \"currentPage\",\n    format: \"image/jpeg\",\n});\n\nconst downloadUrl = URL.createObjectURL(response[0].blob);\ndocument.getElementById(\"anchor\").href = downloadUrl; \n\n<a href=\"#\" download=\"download\" id=\"anchor\" style=\"text-decoration: none\">\n  <sp-button id=\"download-button\" style=\"display: none\">Download</sp-button>\n</a>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"premium-content\"\n    }}>{`Premium Content`}</h3>\n    <p>{`While the above is a very basic example, add-ons that call `}<inlineCode parentName=\"p\">{`createRenditions`}</inlineCode>{` to export content should ensure proper handling in the case of premium content. There are two options that can be considered for handling it.`}</p>\n    <h4 {...{\n      \"id\": \"option-1-show-premium-content-error-with-upgrade-option\"\n    }}>{`Option 1: Show premium content error with \"Upgrade\" option`}</h4>\n    <p>{`Display an error message when export/download fails due to the user not being entitled for premium content, and include a button to allow them to upgrade. `}<em parentName=\"p\">{`Be sure to update your `}<inlineCode parentName=\"em\">{`manifest.json`}</inlineCode>{` as outlined in the warning below the code snippet examples to allow the pricing page to properly load.`}</em></p>\n    <h4 {...{\n      \"id\": \"example-1\"\n    }}>{`Example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const showPremiumContentError = async () => {\n  const { ButtonType } = AddOnSdk.constants;\n  const {buttonType} = await window.AddOnSdk.app.showModalDialog({\n    variant: \"error\",\n    title: \"Export failed\",\n    description: \"Sorry, we were not able to export your design. Some assets are only included in the Premium plan. Try replacing with something else or upgrading Adobe Express to a Premium plan.\", \n    buttonLabels: { secondary: \"Upgrade\" }\n  });\n  if (buttonType === ButtonType.cancel) return;\n  if (buttonType === ButtonType.secondary) {\n    window.open(\"https://www.adobe.com/go/express_addons_pricing\", \"_blank\")\n  }\n}\n\ndocument.querySelector(\"#export\").onclick = async () => {\n  const { app, constants } = AddOnSdk;\n  const { Range, RenditionFormat, RenditionType, RenditionIntent } = constants;\n  /* THE FOLLOWING FLAG CAN BE USED FOR TESTING PURPOSES ONLY -- REMOVE BEFORE RELEASE */\n  app.devFlags.simulateFreeUser = true; \n  const renditionOptions = {range: Range.currentPage, format: RenditionFormat.png};\n  try {\n    const renditions = await app.document.createRenditions(renditionOptions);\n    renditions.forEach(rendition => { /* do your thing w/ the renditions */ });\n  } catch (err) {\n    if (err.message?.includes(\"USER_NOT_ENTITLED_TO_PREMIUM_CONTENT\")) {\n      showPremiumContentError();\n    }\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"option-2---allow-preview-of-premium-content\"\n    }}>{`OPTION 2 - Allow preview of premium content`}</h4>\n    <p>{`Set a `}<inlineCode parentName=\"p\">{`renditionPreview`}</inlineCode>{` intent in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../references/manifest/index.md#requirements\"\n      }}>{`manifest requirements`}</a>{`, and add an extra argument to the `}<a parentName=\"p\" {...{\n        \"href\": \"../../references/addonsdk/app-document.md#createrenditions\"\n      }}><inlineCode parentName=\"a\">{`createRenditions`}</inlineCode>{` method`}</a>{` (ie: `}<inlineCode parentName=\"p\">{`RenditionIntent.preview`}</inlineCode>{`) to generate previews that can still use premium content. `}</p>\n    <p><strong parentName=\"p\">{`IMPORTANT`}</strong>{`: Your add-on must not allow these previewed images to be downloaded or persisted on a backend (for any longer than necessary to serve the result back to the user). To that end, be sure that users cannot: `}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`right-click -> save as`}</strong>{`: To prevent this, reject the `}<inlineCode parentName=\"li\">{`contextmenu`}</inlineCode>{` event`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`drag the image off the panel`}</strong>{`: To prevent this, you can reject the `}<inlineCode parentName=\"li\">{`dragstart`}</inlineCode>{` event`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` These behaviors are enabled by default if you use an `}<inlineCode parentName=\"p\">{`<img>`}</inlineCode>{` tag. If you apply the image using `}<inlineCode parentName=\"p\">{`background-image`}</inlineCode>{` CSS, these behaviors aren't added.`}</p>\n    <h4 {...{\n      \"id\": \"example-2\"\n    }}>{`Example:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`document.querySelector(\"#export\").onclick = async () => {\n  const { app, constants } = AddOnSdk;\n  const { Range, RenditionFormat, RenditionType, RenditionIntent } = constants;  \n  /* THE FOLLOWING FLAG CAN BE USED FOR TESTING PURPOSES ONLY */\n  app.devFlags.simulateFreeUser = true; \n  const renditionOptions = {range: Range.currentPage, format: RenditionFormat.png};\n  try {\n    const renditions = await app.document.createRenditions(renditionOptions,RenditionIntent.preview);\n    renditions.forEach(rendition => { /* do your thing w/ the renditions */ });\n  } catch (err) {\n    console.log(\"Error \" + err);\n  }\n}\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` When implementing the premium content flows where you present a dialog or option to allow the user to upgrade, you must be sure to also include the following permissions in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../references/manifest/index.md#entrypointspermissionssandbox\"\n      }}><inlineCode parentName=\"a\">{`sandbox`}</inlineCode></a>{` attribute of your `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{` to allow the Adobe Express pricing page to properly load: `}<inlineCode parentName=\"p\">{`\"permissions\": { \"sandbox\": [\"allow-popups-to-escape-sandbox\", \"allow-popups\", \"allow-downloads\"]\n}`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"authorization-with-oauth-20\"\n    }}>{`Authorization with OAuth 2.0`}</h2>\n    <p>{`This use case focuses on providing an authorization feature that allows a user to login to one of their existing services with OAuth 2.0. A typical use case would be to use assets you have stored in another service. Here you will find instructions of how to set it up, and an example of how to implement it. But also check out the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/app-oauth/\"\n      }}>{`SDK Reference OAuth section`}</a>{` for more options and details, as well as the  `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/samples/#import-images-using-oauth\"\n      }}>{`import-images-using-oauth`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/samples/#dropbox\"\n      }}>{`Dropbox`}</a>{` sample add-ons for more advanced usage.`}</p>\n    <h3 {...{\n      \"id\": \"setup\"\n    }}>{`Setup`}</h3>\n    <p>{`The OAuth APIs can be used to obtain the authorization \"code\" from any OAuth 2.0 provider supporting the Code Exchange authorization workflow. You will need to go through some setup steps with the provider you want to use OAuth with first. Here are the steps to get started:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Log in to the OAuth provider's website and create an application (for example, Dropbox). This must be a web application, and if an option of SPA (Single Page Application) is listed, select it.`}</li>\n      <li parentName=\"ol\">{`As an input to the \"Redirect URIs\" field, add: `}<a parentName=\"li\" {...{\n          \"href\": \"https://new.express.adobe.com/static/oauth-redirect.html\"\n        }}>{`https://new.express.adobe.com/static/oauth-redirect.html`}</a>{`.`}</li>\n      <li parentName=\"ol\">{`Fill out other details as necessary and save the form. A client Id / application Id / application key (this differs on different OAuth providers) will be generated. Make note of it as you will need it in your add-on code.`}</li>\n      <li parentName=\"ol\">{`Next, update your add-on `}<inlineCode parentName=\"li\">{`manifest.json`}</inlineCode>{` file with the hostname of the OAuth provider's authorization URL. `}<strong parentName=\"li\">{`NOTE:`}</strong>{` When using multiple providers, all hostnames must be provided. For example, if the add-on uses two OAuth providers (`}<inlineCode parentName=\"li\">{`\"login.microsoftonline.com\"`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`\"www.dropbox.com\"`}</inlineCode>{`), the `}<inlineCode parentName=\"li\">{`manifest.json`}</inlineCode>{` should contain both of them, as shown below:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"id\": \"<ADD_ON_ID>\",\n    \"name\": \"<ADD_ON_NAME>\",\n    \"version\": \"1.0.0\",\n    \"manifestVersion\": 1,\n    \"requirements\": {\n        \"apps\": [\"Express\"]\n    },\n    \"entryPoints\": [\n        {\n            \"type\": \"panel\",\n            \"id\": \"panel1\",\n            \"label\": {\n                \"default\": \"<ADD_ON_LABEL>\"\n            },\n            \"main\": \"index.html\",\n            \"permissions\": {\n                \"oauth\": [\"login.microsoftonline.com\", \"www.dropbox.com\"]\n            }\n        }\n    ]\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-3\"\n    }}>{`Example`}</h3>\n    <p>{`Once you complete the set up, you can use the following code snippet as an example of how to perform the OAuth exchange to retrieve an access token. The `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/samples/\"\n      }}>{`code samples`}</a>{` also contain a few different examples of using OAuth 2.0 workflows that you can use for a reference. You will also find the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/express-add-on-samples/blob/main/samples/import-images-using-oauth/src/utils/OAuthUtils.js\"\n      }}>{`OAuthUtils.js`}</a>{` module there, which is referenced below, and we recommend using to help with your own OAuth implementation. Also be sure to check out the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/app-oauth\"\n      }}>{`SDK References`}</a>{` for additional details on the OAuth workflows.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n \nconst DROPBOX_AUTHORIZATION_URL = \"https://www.dropbox.com/oauth2/authorize\";\nconst DROPBOX_TOKEN_URL = \"https://api.dropboxapi.com/oauth2/token\";\nconst DROPBOX_CLIENT_ID = \"<DROPBOX_CLIENT_ID>\";\nconst DROPBOX_SCOPE = \"<DROPBOX_SPACE_SEPARATED_SCOPES>\";\n \nconst ONEDRIVE_AUTHORIZATION_URL = \"https://login.microsoftonline.com/<AZURE_AD_TENANT_ID>/oauth2/v2.0/authorize\";\nconst ONEDRIVE_TOKEN_URL = \"https://login.microsoftonline.com/<AZURE_AD_TENANT_ID>/oauth2/v2.0/token\";\nconst ONEDRIVE_CLIENT_ID = \"<ONEDRIVE_CLIENT_ID>\";\nconst ONEDRIVE_SCOPE = \"<ONEDRIVE_SPACE_SEPARATED_SCOPES>\";\nconst OWN_REDIRECT_URI = \"<OWN_REDIRECT_URI>\";\n \nAddOnSdk.ready.then(() => {\n    // 'oauthUtils' is a helper javascript module (included with the OAuth template) which provides utility functions to:\n    // 1. generateChallenge()     Generate the 'code_challenge' and 'code_verifier' parameters that are essential in the OAuth 2.0 workflow.\n    // 2. generateAccessToken()   Generate an 'access_token' and a 'refresh_token' using the 'code' and 'redirectUri' received on successful authorization.\n    // 3. getAccessToken()        Get an always valid 'access_token'.\n     \n    const challenge = await oauthUtils.generateChallenge();     \n    await authorize(challenge);         \n});\n \nfunction authorize(challenge) {\n    // Trigger the OAuth 2.0 based authorization which opens up a sign-in window for the user\n    // and returns an authorization code which can be used to obtain an access_token.\n    const { id, code, redirectUri, result } = await oauth.authorize({\n        authorizationUrl: DROPBOX_AUTHORIZATION_URL,\n        clientId: DROPBOX_CLIENT_ID,\n        scope: DROPBOX_SCOPE,\n        codeChallenge: challenge.codeChallenge\n    });\n \n    const { status, description } = result;\n    if (status !== \"SUCCESS\") {\n        throw new Error(\\`Status: \\${status} | Description: \\${description}\\`);\n    }\n \n    // Generate the access_token which can be used to verify the identity of the user and\n    // grant them access to the requested resource.\n    await oauthUtils.generateAccessToken({\n        id,\n        clientId: DROPBOX_CLIENT_ID,\n        codeVerifier: challenge.codeVerifier,\n        code,\n        tokenUrl: DROPBOX_TOKEN_URL,\n        redirectUri\n    });\n \n    const accessToken = await oauthUtils.getAccessToken(id);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"storing-and-retrieving-client-side-data\"\n    }}>{`Storing and Retrieving Client-Side Data`}</h2>\n    <p>{`If you want to be able to store and retrieve data on the client side rather to and from a server for certain instances (ie: caching images that were fetched to decrease load times etc), you can do so using the add-on `}<inlineCode parentName=\"p\">{`clientStorage`}</inlineCode>{` API. An example of using it is shown below, but also refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/instance-clientStorage/\"\n      }}>{`SDK Reference section for clientStorage`}</a>{` and the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/samples/#use-client-storage\"\n      }}>{`use-client-storage sample add-on`}</a>{` for more details.`}</p>\n    <h3 {...{\n      \"id\": \"example-4\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\nlet store;\n\nAddOnSdk.ready.then(async () => {\n    store = AddOnSdk.instance.clientStorage;\n}\n/**\n * Store item \n */\nasync function setItem(item: string, isComplete: boolean) {\n    await store.setItem(item, isComplete);\n    todoItemInput.value = \"\";\n}\n/**\n * Log all storage item values\n */\nasync function displayAllItems() {\n    const todoItems = await store.keys();\n    todoItems.forEach(async (item: string) => {\n        const itemValue = await store.getItem(item);\n        console.log(\"Key: \" + item + \" value: \" + itemValue);\n    });\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"drag-and-drop\"\n    }}>{`Drag and Drop`}</h2>\n    <p>{`If you want to allow a user to drag and drop items from your add-on to the document, you can use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/addonsdk-app/#enabledragtodocument\"\n      }}>{`methods provided in the add-on SDK`}</a>{`. There are also several `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/samples\"\n      }}>{`code samples`}</a>{` that implement drag and drop, including the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/samples/#import-images-using-oauth\"\n      }}>{`import-images-using-oauth`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/samples/#dropbox\"\n      }}>{`Dropbox`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/samples/#pix\"\n      }}>{`pix`}</a>{` and more that you can reference. Some example use cases are shown below:`}</p>\n    <h3 {...{\n      \"id\": \"example-using-local-images\"\n    }}>{`Example using local images`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\nconst IMAGES = new Map([\n    [\"image1.jpg\", \"./images/image1.jpg\"],    \n    [\"image2.jpg\", \"./images/image2.jpg\"],\n    [\"image3.jpg\", \"./images/image3.jpg\"]\n]);\n\nlet gallery;\n\n// Wait for the SDK to be ready before rendering elements in the DOM.\nAddOnSdk.ready.then(async () => {\n    // Create elements in the DOM.\n    gallery = document.createElement(\"div\");\n    gallery.className = \"gallery\";\n\n    IMAGES.forEach((url, id) => {\n        const image = document.createElement(\"img\");\n        image.id = id;\n        image.src = url;\n        image.addEventListener(\"click\", addToDocument);\n\n        // Enable drag to document for the image.\n        AddOnSdk.app.enableDragToDocument(image, {\n            previewCallback: element => {\n                return new URL(element.src);\n            },\n            completionCallback: async (element) => {\n                return [{ blob: await getBlob(element.src) }];\n            }\n        });\n\n        gallery.appendChild(image);\n    });\n\n    // Register event handler for \"dragstart\" event\n    AddOnSdk.app.on(\"dragstart\", startDrag);\n     // Register event handler for 'dragend' event\n    AddOnSdk.app.on(\"dragend\", endDrag);\n\n    document.body.appendChild(gallery);\n});\n\n/**\n * Add image to the document.\n */\nasync function addToDocument(event) {\n    const url = event.currentTarget.src;\n    const blob = await getBlob(url);\n    AddOnSdk.app.document.addImage(blob);\n}\n\n/**\n * Handle \"dragstart\" event\n */\nfunction startDrag(eventData) {\n    console.log(\"The drag event has started for\", eventData.element.id);\n}\n\n/**\n * Handle \"dragend\" event\n */\nfunction endDrag(eventData) {\n    if (!eventData.dropCancelled) {\n        console.log(\"The drag event has ended for\", eventData.element.id);\n    } else {\n        console.log(\"The drag event was cancelled for\", eventData.element.id);\n    }\n}\n\n/**\n * Get the binary object for the image.\n */\nasync function getBlob(url) {\n    return await fetch(url).then(response => response.blob());\n}\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-using-an-image-url\"\n    }}>{`Example using an image URL`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\n// Enable drag support for an element\nfunction makeDraggableUsingUrl(elementId: string, previewUrl: string) {\n  const image = document.getElementById(elementId);\n\n  const dragCallbacks = {\n    previewCallback: (image: HTMLElement) => {\n      return new URL(previewUrl);\n    },\n    completionCallback: async (image: HTMLElement) => {\n      const imageBlob = await fetch(image.src).then((response) =>\n        response.blob()\n      );\n      return [{ blob: imageBlob }];\n    },\n  };\n\n  try {\n    AddOnSdk.app.enableDragToDocument(image, dragCallbacks);\n  } catch (error) {\n    console.log(\"Failed to enable DragToDocument:\", error);\n  }\n}\n\nAddOnSdk.app.on(\"dragstart\", (eventData: DragStartEventData) => {\n  console.log(\"The drag event has started for\", eventData.element);\n});\n\nAddOnSdk.app.on(\"dragend\", (eventData: DragEndEventData) => {\n  if (!eventData.dropCancelled) {\n    console.log(\"The drag event has ended for\", eventData.element);\n    disableDragToDocument();\n  } else {\n    console.log(\"The drag event was cancelled for\", eventData.element);\n    console.log(\"Cancel Reason: \", eventData.dropCancelReason);\n  }\n});\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Important Notes:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Since the AddOnSdk uses pointer event handlers to perform drag operations, you should ensure that you don't attach any pointer event handlers that prevent default or stop propagation. Adding those types of handlers will kill the built-in handlers and cause the events not to work.`}</li>\n      <li parentName=\"ul\">{`You should not attach `}<inlineCode parentName=\"li\">{`click`}</inlineCode>{` event listeners to drag-enabled elements in the capture phase, as the AddOnSdk attaches a `}<inlineCode parentName=\"li\">{`cancelClickEvent`}</inlineCode>{` handler to drag-enabled elements to ensure that the automatic click (pointer down + pointer up automatically fires a click event) doesn't fire. Adding other handlers to this same element will cause them to be triggered on drag & drop completion.`}</li>\n      <li parentName=\"ul\">{`TIP: Use Chrome devTools to check the handlers attached to the element and its ancestors to identify any which may be causing conflicts with drag and drop handlers.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"modal-dialogs\"\n    }}>{`Modal Dialogs`}</h2>\n    <p>{`When you need to pop up a dialog to show a certain message such as an informational, warning or error message, you can use a modal dialog to do so. Below are some examples of the different types of modal dialogs supported. Also check out the SDK references for details on how to `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/addonsdk-app/#showmodaldialog\"\n      }}>{`show`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/runtime-dialog/#close\"\n      }}>{`programmatically close a dialog`}</a>{`, as well as the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/samples/#dialog-add-on\"\n      }}>{`dialog add-on sample`}</a>{` for more details.`}</p>\n    <h3 {...{\n      \"id\": \"simple-modal-dialog-example\"\n    }}>{`Simple Modal Dialog Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n \n// Wait for the SDK to be ready\nawait AddOnSdk.ready;\n\n// Confirmation Dialog Example\nlet dialogOptions = {\n    title: titleValue,\n    description: [descValue],\n    buttonLabels: {\n        primary:\n        primaryButtonTextValue != \"\" ? primaryButtonTextValue : undefined,\n        secondary:\n        secondaryButtonTextValue != \"\"\n            ? secondaryButtonTextValue\n            : undefined,\n        cancel:\n        cancelButtonTextValue != \"\" ? cancelButtonTextValue : undefined,\n    },\n    variant: \"confirmation\",\n};\nconst response = await addOnSdk.app.showModalDialog(dialogOptions);\nconsole.log(\"Button type clicked \" + response.buttonType)\n`}</code></pre>\n    <p>{`Below is an example of using an `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` dialog that accepts input you can retrieve:`}</p>\n    <h3 {...{\n      \"id\": \"input-modal-dialog-example\"\n    }}>{`Input Modal Dialog Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n \n// Wait for the SDK to be ready\nawait AddOnSdk.ready;\n\n// Input Dialog Example \nlet inputDialogOptions = {\n    title: titleValue,\n    description: [descValue],\n    buttonLabels: {\n        primary:\n        primaryButtonTextValue != \"\" ? primaryButtonTextValue : undefined,\n        secondary:\n        secondaryButtonTextValue != \"\"\n            ? secondaryButtonTextValue\n            : undefined,\n        cancel:\n        cancelButtonTextValue != \"\" ? cancelButtonTextValue : undefined,\n    },\n    variant: \"input\",\n    field: {\n          label: labelValue,\n          placeholder: placeholderValue,\n          fieldType: \"text\",\n    },\n\n    const response = await addOnSdk.app.showModalDialog(inputDialogOptions);\n    console.log(\"Field value \" + response.fieldValue); // returns the input the user entered\n}\n};\n`}</code></pre>\n    <p>{`There's also support for a custom modal dialog that allows you to supply custom content as shown below, but note that it is currently behind an `}<a parentName=\"p\" {...{\n        \"href\": \"../../references/manifest/\"\n      }}><inlineCode parentName=\"a\">{`experimentalApis`}</inlineCode></a>{` flag. `}</p>\n    <h3 {...{\n      \"id\": \"custom-dialog-example\"\n    }}>{`Custom Dialog Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n \n// Wait for the SDK to be ready\nawait AddOnSdk.ready;\n \nfunction useCustomDialogResult(data: unknown) {\n  // Use the dialog data\n}\n\n// Custom Dialog\nasync function showCustomDialog() {\n  try {\n    const dialogResult = await AddOnSdk.app.showModalDialog({\n        variant: \"custom\",\n        title: \"Custom Modal\",\n        src: \"dialog.html\", // use content from this html file\n        size: { width: 600, height: 400 }\n    });\n \n    // Use data received from the custom dialog\n    useCustomDialogResult(dialogResult.result);\n \n  } catch (error) {\n    console.log(\"Error showing modal dialog:\", error);\n  }\n}\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"success\" mdxType=\"InlineAlert\" />\n    <p>{`Check out the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/\"\n      }}>{`add-on SDK`}</a>{` for more specific details on using modal dialogs, including `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/runtime-dialog/#close\"\n      }}>{`programmatically closing a dialog with an optional custom result`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"detecting-theme\"\n    }}>{`Detecting Theme`}</h2>\n    <p>{`When you want to detect the theme of the environment where your add-on is running, or if you want to be notified if it changes, you can use the following example. This is useful for knowing what theme is currently set in Adobe Express, so you can use the same in your add-on UI, or to apply a change to your UI when the user changes their Adobe Express theme. `}<strong parentName=\"p\">{`Note:`}</strong>{` currently Adobe Express only supports a \"light\" theme, though this will be changing to include support for a \"dark\" theme in the future. See the snippet below for an example of how to use and detect the theme, as well as the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/app-ui/#theme\"\n      }}>{`related SDK Reference section`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-5\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\nfunction applyTheme(theme) {\n    document.querySelector(\"sp-theme\").setAttribute(\"color\", theme);\n}\napplyTheme(AddOnSdk.app.ui.theme);\nAddOnSdk.app.on(\"themechange\", (data) => { applyTheme(data.theme); });\n\naddOnSdk.app.on(\"themechange\", (data) => {\n    applyTheme(data.theme == \"dark\" ? darkTheme : lightTheme);\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"detecting-locale-and-supported-locales\"\n    }}>{`Detecting Locale and Supported Locales`}</h2>\n    <p>{`If you want to find out the users current locale, the list of supported locales, or detect when the locale changes (ie: to set the language in your add-on), you can do so with the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/express/add-ons/docs/references/addonsdk/app-ui/#locale\"\n      }}><inlineCode parentName=\"a\">{`AddOnSdk.app.ui`}</inlineCode>{` object`}</a>{` in the add-on SDK. A simple example is shown below.`}</p>\n    <h3 {...{\n      \"id\": \"example-6\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\nfunction setLanguage(language) { \n  /* Set the language in your UI strings based on the change detected */ \n}\n\nAddOnSdk.ready.then(() => {\n  console.log(AddOnSdk.app.ui.locales);\n  setLanguage(AddOnSdk.app.ui.locale);\n});\n\nAddOnSdk.app.on(\"localechange\", data => {\n  setLanguage(data.locale));\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","_extends","mdxType","slots","variant","parentName","isMDXComponent"],"sourceRoot":""}