{"version":3,"file":"component---src-pages-guides-learn-how-to-use-images-md-dc4f30802aa5fbfdd955.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/learn/how_to/use_images.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"use-images\"\n    }}>{`Use Images`}</h1>\n    <h2 {...{\n      \"id\": \"import-images-into-the-page\"\n    }}>{`Import Images into the page`}</h2>\n    <p>{`Add-ons are hosted in an iframe within the Adobe Express UI, and can load images as `}<inlineCode parentName=\"p\">{`<img>`}</inlineCode>{` elements like any other web application. But in order to add images into an Adobe Express document, you need to use the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#addimage\"\n      }}><inlineCode parentName=\"a\">{`addImage()`}</inlineCode></a>{` method of the `}<inlineCode parentName=\"p\">{`addOnUISdk.app.document`}</inlineCode>{` object.`}</p>\n    <p>{`It expects a `}<inlineCode parentName=\"p\">{`Blob`}</inlineCode>{` object as the first argument, an optional `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#mediaattributes\"\n      }}><inlineCode parentName=\"a\">{`MediaAttribute`}</inlineCode></a>{` object with the image's title and author, and an optional `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#importaddondata\"\n      }}><inlineCode parentName=\"a\">{`ImportAddOnData`}</inlineCode></a>{` object with custom metadata that can be retrieved later via document sandbox APIs.`}</p>\n    <InlineAlert slots=\"header, text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`Iframe vs. Document Sandbox`}</p>\n    <p>{`The following snippets import the `}<inlineCode parentName=\"p\">{`addOnUISdk`}</inlineCode>{` object, and belong to the `}<inlineCode parentName=\"p\">{`ui/index.js`}</inlineCode>{` file. This is the `}<strong parentName=\"p\">{`iframe`}</strong>{` side of the add-on's houseâ€”whereas most of the Design Elements how-tos make use of the `}<strong parentName=\"p\">{`Document Sandbox API`}</strong>{` (in the `}<inlineCode parentName=\"p\">{`sandbox/code.js`}</inlineCode>{` file).`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// ui/index.js\nimport addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(async () => {\n  try {\n    const imageUrl = \"https://placehold.co/600x400.png\";\n    const image = await fetch(imageUrl);\n    const imageBlob = await image.blob();\n\n    await addOnUISdk.app.document.addImage(\n      imageBlob, // ðŸ‘ˆ Blob object\n      {\n        title: \"Placeholder image\", // ðŸ‘ˆ Optional MediaAttributes\n        author: \"Adobe Developer\",\n      },\n      { // ðŸ‘ˆ Optional ImportAddOnData - metadata that persists with the image\n        nodeAddOnData: { \"imageId\": \"placeholder_123\", \"category\": \"demo\" },\n        mediaAddOnData: { \"source\": \"external\", \"resolution\": \"600x400\" }\n      }\n    );\n  } catch (e) {\n    console.error(\"Failed to add the image\", e);\n  }\n});\n`}</code></pre>\n    <p>{`You can use `}<inlineCode parentName=\"p\">{`fetch()`}</inlineCode>{` also to get images that are local to the add-on; in this case, paths should be relative to the add-on's root.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// ui/index.js\nimport addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(async () => {\n  try {\n    const imageUrl = \"./600x400.png\";     // ðŸ‘ˆ Local image\n    const image = await fetch(imageUrl);\n    // ... same as before\n`}</code></pre>\n    <InlineAlert slots=\"header, text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`Image requirements`}</p>\n    <p>{`Please refer to `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#image-requirements\"\n      }}>{`this section`}</a>{` to know more about the file formats support and size requirements for images.`}</p>\n    <h2 {...{\n      \"id\": \"import-animated-images\"\n    }}>{`Import Animated images`}</h2>\n    <p>{`Importing a `}<inlineCode parentName=\"p\">{`GIF`}</inlineCode>{` via `}<inlineCode parentName=\"p\">{`addImage()`}</inlineCode>{` won't work as expected, as the method converts the animation into a static image before adding it to the document. You should use the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#addanimatedimage\"\n      }}><inlineCode parentName=\"a\">{`addAnimatedImage()`}</inlineCode></a>{` method instead.`}</p>\n    <h3 {...{\n      \"id\": \"example-1\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// ui/index.js\nimport addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(async () => {\n  try {\n    const gifImageUrl = \"https://path/to/a/file.gif\"; // ðŸ‘ˆ a GIF image\n    const gifImage = await fetch(gifImageUrl);\n    const gifImageBlob = await gifImage.blob();\n\n    await addOnUISdk.app.document.addAnimatedImage(\n      // ðŸ‘ˆ\n      gifImageBlob, // ðŸ‘ˆ Blob object\n      {\n        title: \"Animated GIF\",\n        author: \"GIF Creator\"\n      }, // ðŸ‘ˆ Optional MediaAttributes\n      { // ðŸ‘ˆ Optional ImportAddOnData\n        nodeAddOnData: { \"gifId\": \"animated_456\", \"type\": \"animation\" },\n        mediaAddOnData: { \"duration\": \"3s\", \"frames\": \"24\" }\n      }\n    );\n  } catch (e) {\n    console.error(\"Failed to add the image\", e);\n  }\n});\n`}</code></pre>\n    <InlineAlert slots=\"header, text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`GIF Image requirements`}</p>\n    <p>{`All image formats are equal, but some formats are more equal than others. Please refer to `}<a parentName=\"p\" {...{\n        \"href\": \"../../support/faq.md#are-animated-gifs-supported-when-importing-or-dragging-content-to-the-document\"\n      }}>{`this FAQ`}</a>{` to learn more about specific GIF limitations in terms of size and weight.`}</p>\n    <h2 {...{\n      \"id\": \"replace-media\"\n    }}>{`Replace Media`}</h2>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/MediaContainerNode.md#replacemedia\"\n      }}><inlineCode parentName=\"a\">{`replaceMedia()`}</inlineCode></a>{` method can be used to replace an existing media with a new one. It accepts a single argument of type `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/BitmapImage.md\"\n      }}><inlineCode parentName=\"a\">{`BitmapImage`}</inlineCode></a>{`.`}</p>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`Compared to the previous examples, replacing media is a method that belongs to the `}<strong parentName=\"p\">{`Document Sandbox API`}</strong>{` (in the `}<inlineCode parentName=\"p\">{`sandbox/code.js`}</inlineCode>{` file), and not to the `}<strong parentName=\"p\">{`iframe`}</strong>{` (in the `}<inlineCode parentName=\"p\">{`ui/index.js`}</inlineCode>{` file).`}</p>\n    <h3 {...{\n      \"id\": \"example-2\"\n    }}>{`Example`}</h3>\n    <p>{`Because the Document Sandbox doesn't have access to the `}<inlineCode parentName=\"p\">{`fetch()`}</inlineCode>{` function, in the following example the Bitmap data is fetched on the iframe side, and passed to the Document Sandbox to be replaced using the `}<a parentName=\"p\" {...{\n        \"href\": \"./tutorials/stats-addon.md\"\n      }}>{`Communication API`}</a>{`.`}</p>\n    <p>{`You can copy and paste the following code into a `}<a parentName=\"p\" {...{\n        \"href\": \"../../getting_started/code_playground.md\"\n      }}>{`Code Playground`}</a>{` session to try it out.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"4\" languages=\"HTML, CSS, iFrame JS, Document JS\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"html\"\n    }}>{`HTML`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Get Started</title>\n</head>\n  <body>\n    <div class=\"container\">\n      <button id=\"replace-media-btn\" disabled>Replace Media</button>\n    </div>\n  </body>\n</html>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"css\"\n    }}>{`CSS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.container {\n  margin: 24px;\n  display: flex;\n  flex-direction: column;\n}\n\nbutton {\n  background-color: rgb(82, 88, 228);\n  border-color: rgb(82, 88, 228);\n  border-radius: 16px;\n  border-style: solid;\n  color: rgb(255, 255, 255);\n  font-family: sans-serif;\n  height: 32px;\n}\n\nbutton:disabled {\n  background-color: rgb(177, 177, 177);\n  border-color: rgb(177, 177, 177);\n}\n\nbutton:not([disabled]):hover {\n  background-color: rgb(64, 70, 202);\n  cursor: pointer;\n}\n\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"iframe-js\"\n    }}>{`iFrame JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(async () => {\n  const { runtime } = addOnUISdk.instance;\n\n  // Get the Document Sandbox proxy\n  const sandboxProxy = await runtime.apiProxy(\"documentSandbox\");\n\n  // Get the button and message elements\n  const replaceButton = document.getElementById(\"replace-media-btn\");\n  const messageDiv = document.getElementById(\"message\");\n\n  // Enable the button once everything is ready\n  replaceButton.disabled = false;\n\n  // Function to show messages to the user\n  function showMessage(text, type = \"error\") {\n    messageDiv.textContent = text;\n    messageDiv.className = \\`message \\${type}\\`;\n    messageDiv.style.display = \"block\";\n\n    // Hide message after 3 seconds for success, keep error messages visible\n    if (type === \"success\") {\n      setTimeout(() => {\n        messageDiv.style.display = \"none\";\n      }, 3000);\n    }\n  }\n\n  // Function to replace media in selected container\n  async function replaceSelectedMedia() {\n    try {\n      // Hide any previous messages\n      messageDiv.style.display = \"none\";\n\n      replaceButton.disabled = true;\n      replaceButton.textContent = \"Replacing...\";\n\n      // Replace with an image from URL\n      const imageUrl = \"https://placehold.co/800x600.png\";\n\n      // Or replace with a local image:\n      // const imageUrl = \"./assets/new-image.jpg\";\n\n      const response = await fetch(imageUrl);\n      const imageBlob = await response.blob();\n\n      // Pass the blob to the Document Sandbox and get the result\n      const result = await sandboxProxy.replaceMediaInSelection(imageBlob);\n\n      if (result.success) {\n        replaceButton.textContent = \"Media Replaced!\";\n        showMessage(\"Media replaced successfully!\", \"success\");\n        setTimeout(() => {\n          replaceButton.textContent = \"Replace Selected Media\";\n          replaceButton.disabled = false;\n        }, 2000);\n      } else {\n        replaceButton.textContent = \"Replace Selected Media\";\n        replaceButton.disabled = false;\n        showMessage(result.error);\n      }\n\n    } catch (error) {\n      console.error(\"Failed to replace media:\", error);\n      replaceButton.textContent = \"Replace Selected Media\";\n      replaceButton.disabled = false;\n      showMessage(\"An unexpected error occurred. Please try again.\");\n    }\n  }\n\n  // Add click event listener to the button\n  replaceButton.addEventListener(\"click\", replaceSelectedMedia);\n});\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"document-js\"\n    }}>{`Document JS`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnSandboxSdk from \"add-on-sdk-document-sandbox\";\nimport { editor, constants } from \"express-document-sdk\";\n\nconst { runtime } = addOnSandboxSdk.instance;\n\nruntime.exposeApi({\n  async replaceMediaInSelection(imageBlob) {\n    try {\n      // Check if there's a selection and it's a MediaContainerNode\n      if (!editor.context.hasSelection) {\n        return {\n          success: false,\n          error: \"No node selected. Please select a MediaContainerNode first.\"\n        };\n      }\n\n      const selectedNode = editor.context.selection[0];\n      if (selectedNode.type !== constants.SceneNodeType.mediaContainer) {\n        return {\n          success: false,\n          error: \"Selected node is not a MediaContainerNode. Please select an image or media container.\"\n        };\n      }\n\n      // Load the new image as a BitmapImage\n      const bitmapImage = await editor.loadBitmapImage(imageBlob);\n\n      // Replace the media using queueAsyncEdit since loadBitmapImage is async\n      editor.queueAsyncEdit(() => {\n        selectedNode.replaceMedia(bitmapImage);\n      });\n\n      return {\n        success: true\n      };\n\n    } catch (error) {\n      console.error(\"Failed to replace media:\", error);\n      return {\n        success: false,\n        error: \"Failed to replace media. Please try again.\"\n      };\n    }\n  }\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"media-node-structure\"\n    }}>{`Media Node structure`}</h3>\n    <p>{`It may be useful to know how Adobe Express represents media nodes in a document, using three Classes:`}</p>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`MediaContainerNode`}</inlineCode></strong>{`, the main container`}</li>\n    </ol>\n    <p>{`The parent node that displays media within a crop mask. It holds two children:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`maskShape`}</inlineCode>{`: a FillableNode defining the visible bounds.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`mediaRectangle`}</inlineCode>{`: the actual media (image or video). It also provides `}<inlineCode parentName=\"li\">{`replaceMedia()`}</inlineCode>{` to swap content.`}</li>\n    </ul>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`MediaRectangleNode`}</inlineCode></strong>{`, the abstract base`}</li>\n    </ol>\n    <p>{`An abstract base for uncropped, full-frame rectangular media. It canâ€™t be instantiated directly, but defines core properties (width, height, and media data) and shared behavior for positioning, rotation, and sizing.`}</p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`ImageRectangleNode`}</inlineCode></strong>{`, the concrete class`}</li>\n    </ol>\n    <p>{`A subclass of `}<inlineCode parentName=\"p\">{`MediaRectangleNode`}</inlineCode>{` for bitmap images. Created through `}<inlineCode parentName=\"p\">{`Editor.createImageContainer()`}</inlineCode>{`, it inherits all sizing and positioning features while representing the specific image content.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`MediaContainerNode\nâ”œâ”€â”€ maskShape                      > FillableNode, defines visible area\nâ””â”€â”€ mediaRectangle                 > MediaRectangleNode\n    â””â”€â”€ ImageRectangleNode         > for images\n    â””â”€â”€ UnknownMediaRectangleNode  > for other media types\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"faqs\"\n    }}>{`FAQs`}</h2>\n    <h4 {...{\n      \"id\": \"q-how-do-i-add-images-to-a-document\"\n    }}>{`Q: How do I add images to a document?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Call `}<inlineCode parentName=\"p\">{`addOnUISdk.app.document.addImage(blob, attributes, importAddOnData)`}</inlineCode>{` with image blob and optional MediaAttributes and ImportAddOnData.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-parameters-does-addimage-require\"\n    }}>{`Q: What parameters does addImage require?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` A Blob object is required. MediaAttributes (title, author) and ImportAddOnData (custom metadata) are optional.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-get-an-image-as-a-blob\"\n    }}>{`Q: How do I get an image as a blob?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`fetch(imageUrl).then(r => r.blob())`}</inlineCode>{` to convert images to blob format.`}</p>\n    <h4 {...{\n      \"id\": \"q-can-i-use-local-image-files\"\n    }}>{`Q: Can I use local image files?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Yes, use relative paths from add-on root with fetch() to load local images.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-add-animated-gifs\"\n    }}>{`Q: How do I add animated GIFs?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`addOnUISdk.app.document.addAnimatedImage(blob, attributes, importAddOnData)`}</inlineCode>{` instead of addImage().`}</p>\n    <h4 {...{\n      \"id\": \"q-why-doesnt-addimage-work-with-gifs\"\n    }}>{`Q: Why doesn't addImage work with GIFs?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` addImage() converts animations to static images; use addAnimatedImage() to preserve animation.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-image-formats-are-supported\"\n    }}>{`Q: What image formats are supported?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` AI, GIF, JPEG, JPG, PNG, PSD, PSDT, and WEBP. 8000px or 80MB.`}</p>\n    <h4 {...{\n      \"id\": \"q-are-there-gif-size-limitations\"\n    }}>{`Q: Are there GIF size limitations?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Yes, refer to the FAQ section for specific GIF size and weight limitations.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-replace-media-in-an-existing-mediacontainernode\"\n    }}>{`Q: How do I replace media in an existing `}<inlineCode parentName=\"h4\">{`MediaContainerNode`}</inlineCode>{`?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use the `}<inlineCode parentName=\"p\">{`replaceMedia()`}</inlineCode>{` method on a `}<inlineCode parentName=\"p\">{`MediaContainerNode`}</inlineCode>{` with a `}<inlineCode parentName=\"p\">{`BitmapImage`}</inlineCode>{` object created via `}<inlineCode parentName=\"p\">{`Editor.loadBitmapImage()`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"q-can-i-replace-any-media-type-with-replacemedia\"\n    }}>{`Q: Can I replace any media type with `}<inlineCode parentName=\"h4\">{`replaceMedia()`}</inlineCode>{`?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Currently, `}<inlineCode parentName=\"p\">{`replaceMedia()`}</inlineCode>{` only accepts `}<inlineCode parentName=\"p\">{`BitmapImage`}</inlineCode>{` objects. The original media can be any type, but replacement must be a static image.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-attach-custom-metadata-to-imported-images\"\n    }}>{`Q: How do I attach custom metadata to imported images?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use the optional `}<inlineCode parentName=\"p\">{`importAddOnData`}</inlineCode>{` parameter with `}<inlineCode parentName=\"p\">{`nodeAddOnData`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`mediaAddOnData`}</inlineCode>{` objects to store custom metadata that can be retrieved later via document sandbox APIs.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","repeat","languages","isMDXComponent"],"sourceRoot":""}