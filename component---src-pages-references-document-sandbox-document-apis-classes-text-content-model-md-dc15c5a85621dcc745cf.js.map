{"version":3,"file":"component---src-pages-references-document-sandbox-document-apis-classes-text-content-model-md-dc15c5a85621dcc745cf.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/references/document-sandbox/document-apis/classes/TextContentModel.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><a parentName=\"p\" {...{\n        \"href\": \"../overview.md\"\n      }}>{`@express-document-sdk`}</a>{` / TextContentModel`}</p>\n    <h1 {...{\n      \"id\": \"class-textcontentmodel\"\n    }}>{`Class: TextContentModel`}</h1>\n    <p>{`Represents a complete piece of text content flow, which may be split across multiple `}<a parentName=\"p\" {...{\n        \"href\": \"TextNode.md\"\n      }}>{`TextNode`}</a>{` frames for display.\nUse this model to get or modify the text string and the style ranges applied to it.`}</p>\n    <h2 {...{\n      \"id\": \"accessors\"\n    }}>{`Accessors`}</h2>\n    <h3 {...{\n      \"id\": \"alltextnodes\"\n    }}>{`allTextNodes`}</h3>\n    <p>{`• `}<inlineCode parentName=\"p\">{`get`}</inlineCode>{` `}<strong parentName=\"p\">{`allTextNodes`}</strong>{`(): `}<inlineCode parentName=\"p\">{`Readonly`}</inlineCode>{`<`}<inlineCode parentName=\"p\">{`Iterable`}</inlineCode>{`<`}<a parentName=\"p\" {...{\n        \"href\": \"TextNode.md\"\n      }}><inlineCode parentName=\"a\">{`TextNode`}</inlineCode></a>{`, `}<inlineCode parentName=\"p\">{`any`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`any`}</inlineCode>{`>`}{`>`}</p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` This is currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until it has been declared stable. To use it, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <p>{`Get ordered list of all `}<a parentName=\"p\" {...{\n        \"href\": \"TextNode.md\"\n      }}>{`TextNode`}</a>{`s that display this text content in the scenegraph. The text content\nstarts in the first  `}<a parentName=\"p\" {...{\n        \"href\": \"TextNode.md\"\n      }}>{`TextNode`}</a>{` \"frame\", and then flows into the second node once it has filled the first one. The ending of the\ntext content may not be visible at all, if the last `}<a parentName=\"p\" {...{\n        \"href\": \"TextNode.md\"\n      }}>{`TextNode`}</a>{` \"frame\" is not large enough to accommodate it.`}</p>\n    <p>{`If there are multiple `}<a parentName=\"p\" {...{\n        \"href\": \"TextNode.md\"\n      }}>{`TextNode`}</a>{`s, all of them must be configured to use `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/AreaTextLayout.md\"\n      }}>{`AreaTextLayout`}</a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"returns\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`Readonly`}</inlineCode>{`<`}<inlineCode parentName=\"p\">{`Iterable`}</inlineCode>{`<`}<a parentName=\"p\" {...{\n        \"href\": \"TextNode.md\"\n      }}><inlineCode parentName=\"a\">{`TextNode`}</inlineCode></a>{`, `}<inlineCode parentName=\"p\">{`any`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`any`}</inlineCode>{`>`}{`>`}</p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"characterstyleranges\"\n    }}>{`characterStyleRanges`}</h3>\n    <p>{`• `}<inlineCode parentName=\"p\">{`get`}</inlineCode>{` `}<strong parentName=\"p\">{`characterStyleRanges`}</strong>{`(): readonly `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/CharacterStylesRange.md\"\n      }}><inlineCode parentName=\"a\">{`CharacterStylesRange`}</inlineCode></a>{`[]`}</p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` This is currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until it has been declared stable. To use it, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <p>{`The character styles are applied to different ranges of this text content. When setting character styles, any style\nproperties that are not provided are reset to their defaults (contrast to `}<a parentName=\"p\" {...{\n        \"href\": \"TextContentModel.md#applycharacterstyles\"\n      }}>{`applyCharacterStyles`}</a>{` which\npreserves the text's existing styles for any fields not specified). When `}<em parentName=\"p\">{`getting`}</em>{` styles, all fields are always\nprovided.`}</p>\n    <p>{`Note: existing fonts used in the document, returned by this getter, are not guaranteed to be ones the current user\nhas rights to edit with. The `}<em parentName=\"p\">{`setter`}</em>{` only accepts the AvailableFont type which has been verified to be usable.`}</p>\n    <p>{`• `}<inlineCode parentName=\"p\">{`set`}</inlineCode>{` `}<strong parentName=\"p\">{`characterStyleRanges`}</strong>{`(`}<inlineCode parentName=\"p\">{`styles`}</inlineCode>{`): `}<inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <h4 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h4>\n    <p>{`• `}<strong parentName=\"p\">{`styles`}</strong>{`: readonly `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/CharacterStylesRangeInput.md\"\n      }}><inlineCode parentName=\"a\">{`CharacterStylesRangeInput`}</inlineCode></a>{`[]`}</p>\n    <h4 {...{\n      \"id\": \"returns-1\"\n    }}>{`Returns`}</h4>\n    <p>{`readonly `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/CharacterStylesRange.md\"\n      }}><inlineCode parentName=\"a\">{`CharacterStylesRange`}</inlineCode></a>{`[]`}</p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"id\"\n    }}>{`id`}</h3>\n    <p>{`• `}<inlineCode parentName=\"p\">{`get`}</inlineCode>{` `}<strong parentName=\"p\">{`id`}</strong>{`(): `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` This is currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until it has been declared stable. To use it, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <p>{`A unique identifier for this node that stays the same when the file is closed & reopened, or if the node is\nmoved to a different part of the document.`}</p>\n    <p>{`To determine if two TextNodes are connected to the same TextContentModel,\ncheck if both models have the same id.\nComparing two models using `}<inlineCode parentName=\"p\">{`===`}</inlineCode>{` will always fail.`}</p>\n    <h4 {...{\n      \"id\": \"returns-2\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"paragraphstyleranges\"\n    }}>{`paragraphStyleRanges`}</h3>\n    <p>{`• `}<inlineCode parentName=\"p\">{`get`}</inlineCode>{` `}<strong parentName=\"p\">{`paragraphStyleRanges`}</strong>{`(): readonly `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/ParagraphStylesRange.md\"\n      }}><inlineCode parentName=\"a\">{`ParagraphStylesRange`}</inlineCode></a>{`[]`}</p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` This is currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until it has been declared stable. To use it, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <p>{`The styles applied to different paragraphs of this text content.`}</p>\n    <p>{`• `}<inlineCode parentName=\"p\">{`set`}</inlineCode>{` `}<strong parentName=\"p\">{`paragraphStyleRanges`}</strong>{`(`}<inlineCode parentName=\"p\">{`styles`}</inlineCode>{`): `}<inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` This is currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until it has been declared stable. To use it, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <p>{`Apply styles to different paragraphs of this text content. Any style properties that are not provided are reset to their defaults.\nWhen `}<strong parentName=\"p\">{`getting`}</strong>{` styles, all properties are always provided.`}</p>\n    <p>{`Paragraphs are separated by newline characters (`}<inlineCode parentName=\"p\">{`\\\\n`}</inlineCode>{`). The ranges specified here should align with\nthose boundaries. If multiple ranges provided overlap a single paragraph, the first one to overlap is applied to the\nentire paragraph.`}</p>\n    <h4 {...{\n      \"id\": \"throws\"\n    }}>{`Throws`}</h4>\n    <p>{`if the text content contains fonts unavailable to the current user and an ordered-list style is being applied.`}</p>\n    <h4 {...{\n      \"id\": \"parameters-1\"\n    }}>{`Parameters`}</h4>\n    <p>{`• `}<strong parentName=\"p\">{`styles`}</strong>{`: readonly `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/ParagraphStylesRangeInput.md\"\n      }}><inlineCode parentName=\"a\">{`ParagraphStylesRangeInput`}</inlineCode></a>{`[]`}</p>\n    <h4 {...{\n      \"id\": \"returns-3\"\n    }}>{`Returns`}</h4>\n    <p>{`readonly `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/ParagraphStylesRange.md\"\n      }}><inlineCode parentName=\"a\">{`ParagraphStylesRange`}</inlineCode></a>{`[]`}</p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"text\"\n    }}>{`text`}</h3>\n    <p>{`• `}<inlineCode parentName=\"p\">{`get`}</inlineCode>{` `}<strong parentName=\"p\">{`text`}</strong>{`(): `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <p>{`The complete text string, which may span multiple `}<a parentName=\"p\" {...{\n        \"href\": \"TextNode.md\"\n      }}>{`TextNode`}</a>{` \"frames\" in the scenegraph.`}</p>\n    <p>{`• `}<inlineCode parentName=\"p\">{`set`}</inlineCode>{` `}<strong parentName=\"p\">{`text`}</strong>{`(`}<inlineCode parentName=\"p\">{`textContent`}</inlineCode>{`): `}<inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <h4 {...{\n      \"id\": \"parameters-2\"\n    }}>{`Parameters`}</h4>\n    <p>{`• `}<strong parentName=\"p\">{`textContent`}</strong>{`: `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <h4 {...{\n      \"id\": \"returns-4\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h2>\n    <h3 {...{\n      \"id\": \"applycharacterstyles\"\n    }}>{`applyCharacterStyles()`}</h3>\n    <p>{`• `}<strong parentName=\"p\">{`applyCharacterStyles`}</strong>{`(`}<inlineCode parentName=\"p\">{`styles`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`range`}</inlineCode>{`?): `}<inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` This is currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until it has been declared stable. To use it, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <p>{`Apply one or more styles to the characters in the given range, leaving any style properties that were not specified\nunchanged. Does not modify any styles in the text outside this range. Contrast to the `}<a parentName=\"p\" {...{\n        \"href\": \"TextContentModel.md#characterstyleranges\"\n      }}>{`characterStyleRanges`}</a>{`\nsetter, which specifies new style range(s) for the entire text at once, and resets any unspecified properties back to\ndefault styles.`}</p>\n    <h4 {...{\n      \"id\": \"parameters-3\"\n    }}>{`Parameters`}</h4>\n    <p>{`• `}<strong parentName=\"p\">{`styles`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/CharacterStylesInput.md\"\n      }}><inlineCode parentName=\"a\">{`CharacterStylesInput`}</inlineCode></a></p>\n    <p>{`The styles to apply.`}</p>\n    <p>{`• `}<strong parentName=\"p\">{`range?`}</strong></p>\n    <p>{`The start and length of the character sequence to which the styles should be applied.\nThe styles will be applied to the entire text content flow if not specified.\nIf the specified range doesn't align well with the paragraph boundaries, the range will be expanded to cover the\nentire paragraphs, it overlaps.`}</p>\n    <p>{`• `}<strong parentName=\"p\">{`range.length?`}</strong>{`: `}<inlineCode parentName=\"p\">{`number`}</inlineCode></p>\n    <p>{`• `}<strong parentName=\"p\">{`range.start?`}</strong>{`: `}<inlineCode parentName=\"p\">{`number`}</inlineCode></p>\n    <h4 {...{\n      \"id\": \"returns-5\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"applyparagraphstyles\"\n    }}>{`applyParagraphStyles()`}</h3>\n    <p>{`• `}<strong parentName=\"p\">{`applyParagraphStyles`}</strong>{`(`}<inlineCode parentName=\"p\">{`styles`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`range`}</inlineCode>{`?): `}<inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`IMPORTANT:`}</strong>{` This is currently `}<strong parentName=\"p\"><em parentName=\"strong\">{`experimental only`}</em></strong>{` and should not be used in any add-ons you will be distributing until it has been declared stable. To use it, you will first need to set the `}<inlineCode parentName=\"p\">{`experimentalApis`}</inlineCode>{` flag to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../manifest/index.md#requirements\"\n      }}><inlineCode parentName=\"a\">{`requirements`}</inlineCode></a>{` section of the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{`.`}</p>\n    <p>{`Apply one or more styles to the paragraphs in the given range, leaving any style properties that were not specified\nunchanged. Does not modify any styles in the text outside this range. Contrast to the `}<a parentName=\"p\" {...{\n        \"href\": \"TextContentModel.md#paragraphstyleranges\"\n      }}>{`paragraphStyleRanges`}</a>{`\nsetter, which specifies new style range(s) for the entire text at once, and resets any unspecified properties back to\ndefault styles.`}</p>\n    <h4 {...{\n      \"id\": \"parameters-4\"\n    }}>{`Parameters`}</h4>\n    <p>{`• `}<strong parentName=\"p\">{`styles`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"../interfaces/ParagraphStylesInput.md\"\n      }}><inlineCode parentName=\"a\">{`ParagraphStylesInput`}</inlineCode></a></p>\n    <p>{`The styles to apply.`}</p>\n    <p>{`• `}<strong parentName=\"p\">{`range?`}</strong></p>\n    <p>{`The start and length of character sequence to which the styles should be applied.\nIf not specified the styles will be applied to the entire piece of text content flow.`}</p>\n    <p>{`• `}<strong parentName=\"p\">{`range.length?`}</strong>{`: `}<inlineCode parentName=\"p\">{`number`}</inlineCode></p>\n    <p>{`• `}<strong parentName=\"p\">{`range.start?`}</strong>{`: `}<inlineCode parentName=\"p\">{`number`}</inlineCode></p>\n    <h4 {...{\n      \"id\": \"returns-6\"\n    }}>{`Returns`}</h4>\n    <p><inlineCode parentName=\"p\">{`void`}</inlineCode></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","isMDXComponent"],"sourceRoot":""}