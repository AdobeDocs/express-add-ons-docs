{"version":3,"file":"component---src-pages-guides-references-apis-dnd-md-04a8866656828e086ac3.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,CAAC,EACKI,EAAYN,EAAc,aAC1BO,EAAcP,EAAc,eAC5BQ,EAAc,CAClBT,aAAAA,GAEIU,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGX,GAAKY,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOV,EAAAA,EAAAA,KAACI,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBN,EAAK,CAAEW,WAAYA,EAAYI,QAAQ,eAG5EZ,EAAAA,EAAAA,KAAA,MACE,GAAM,iBAAe,kBAEvBA,EAAAA,EAAAA,KAAA,uKACAA,EAAAA,EAAAA,KAACC,EAAS,CAACY,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,aAAaH,QAAQ,eAC3EZ,EAAAA,EAAAA,KAAA,MACE,GAAM,aAAW,cAEnBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMgB,WAAW,MAClB,UAAa,eAAa,y5CAoE9BhB,EAAAA,EAAAA,KAAA,MACE,GAAM,WAAS,YAEjBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMgB,WAAW,MAClB,UAAa,eAAa,ioCAsC9BhB,EAAAA,EAAAA,KAACE,EAAW,CAACW,MAAM,OAAOI,QAAQ,OAAOL,QAAQ,iBACjDZ,EAAAA,EAAAA,KAAA,gHACAA,EAAAA,EAAAA,KAACE,EAAW,CAACW,MAAM,OAAOI,QAAQ,UAAUL,QAAQ,iBACpDZ,EAAAA,EAAAA,KAAA,uDAAiDA,EAAAA,EAAAA,KAAA,KAAGgB,WAAW,IAC3D,KAAQ,0BAAwB,gBACX,gGAAgGhB,EAAAA,EAAAA,KAAA,UAAQgB,WAAW,KAAG,4BAAsC,MAAMhB,EAAAA,EAAAA,KAAA,UAAQgB,WAAW,KAAG,6BAAuC,MAAMhB,EAAAA,EAAAA,KAAA,UAAQgB,WAAW,KAAG,SAAmB,SAAShB,EAAAA,EAAAA,KAAA,UAAQgB,WAAW,KAAG,UAAoB,aAG9V,CAEAV,EAAWY,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/references/apis/dnd.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/express-add-ons-docs/express-add-ons-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"drag-and-drop\"\n    }}>{`Drag and Drop`}</h1>\n    <p>{`The interfaces and methods outlined here support the add-on Drag and Drop functionality. See the example code for how to implement it in your own add-on.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"interface\"\n    }}>{`Interface`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`interface DragCompletionData {\n  /**\n   * Blob (image/video) to be added to the document\n   */\n  blob: Blob;\n}\n\n/**\n * Callback to provide the preview image\n * @returns URL or DataURL\n **/\ntype DragPreviewCallback = (element: HTMLElement) => URL;\n\n/**\n * Callback to provide the content (image/video) to be added to the document\n **/\ntype DragCompletionCallback = (\n  element: HTMLElement\n) => Promise<DragCompletionData[]>;\n\ninterface DragCallbacks {\n  /**\n   * Callback to provide the preview image\n   */\n  previewCallback: DragPreviewCallback;\n\n  /**\n   * Callback to provide the content to be added to the document\n   */\n  completionCallback: DragCompletionCallback;\n}\n\ninterface Application {\n  /**\n   * Enable drag to document functionality for an element\n   */\n  enableDragToDocument(\n    element: HTMLElement,\n    dragCallbacks: DragCallbacks\n  ): void;\n}\n\n/**\n * \"dragstart\" event is triggered when the user starts dragging an item for which drag behavior is enabled\n *\n * \"dragend\" event is triggered when the drag operation ends\n */\n\ninterface DragStartEventData {\n  /**\n   * Element for which the drag event started\n   */\n  element: HTMLElement;\n}\n\ninterface DragEndEventData {\n  /**\n   * Drop occurred/Drag ended at invalid position\n   */\n  dropCancelled: boolean;\n\n  /**\n   * Element for which the drag event ended\n   */\n  element: HTMLElement;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\n// Enable drag support for an element\nfunction makeDraggableUsingUrl(elementId: string, previewUrl: string) {\n  const image = document.getElementById(elementId);\n\n  const dragCallbacks = {\n    previewCallback: (image: HTMLElement) => {\n      return new URL(previewUrl);\n    },\n    completionCallback: async (image: HTMLElement) => {\n      const imageBlob = await fetch(image.src).then((response) =>\n        response.blob()\n      );\n      return [{ blob: imageBlob }];\n    },\n  };\n\n  try {\n    AddOnSdk.app.enableDragToDocument(image, dragCallbacks);\n  } catch (error) {\n    console.log(\"Failed to enable DragToDocument:\", error);\n  }\n}\n\nAddOnSdk.app.on(\"dragstart\", (eventData: DragStartEventData) => {\n  console.log(\"The drag event has started for\", eventData.element);\n});\n\nAddOnSdk.app.on(\"dragend\", (eventData: DragEndEventData) => {\n  if (!eventData.dropCancelled) {\n    console.log(\"The drag event has ended for\", eventData.element);\n  } else {\n    console.log(\"The drag event was cancelled for\", eventData.element);\n  }\n});\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`Please note, the maximum dimension of an object dropped on to the canvas in Express is 8000x8000. `}</p>\n    <InlineAlert slots=\"text\" variant=\"success\" mdxType=\"InlineAlert\" />\n    <p>{`Many of the samples we've included in the `}<a parentName=\"p\" {...{\n        \"href\": \"guides/develop/samples\"\n      }}>{`code samples`}</a>{` implement the Drag and Drop APIs, so please use them as a reference. This includes the the `}<strong parentName=\"p\">{`import-images-from-local`}</strong>{`, `}<strong parentName=\"p\">{`import-images-using-oauth`}</strong>{`, `}<strong parentName=\"p\">{`giphy`}</strong>{` and `}<strong parentName=\"p\">{`qrcode`}</strong>{` samples.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","CodeBlock","InlineAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","_extends","mdxType","slots","repeat","languages","parentName","variant","isMDXComponent"],"sourceRoot":""}