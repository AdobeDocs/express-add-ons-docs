{"version":3,"file":"component---src-pages-references-document-sandbox-communication-index-md-3abd1f59158484faa4d4.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/references/document-sandbox/communication/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"communication-apis\"\n    }}>{`Communication APIs`}</h1>\n    <p>{`The communication APIs allow you to communicate between the document model sandbox (referred to as simply \"document sandbox\" throughout the rest of this guide), and the iframe where your add-on is running specifically via the add-on SDK methods available for the document sandbox.`}</p>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`The document sandbox and iframe runtime are two different runtime execution environments which are present on different threads in the browser. The communication APIs are based on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/GoogleChromeLabs/comlink\"\n      }}>{`Comlink library`}</a>{` and provide a mechanism to allow the JavaScript code executing in each to interact. Developers can call the apis exposed in one environment (ie: document sandbox) from another environment (ie: iframe where their add-on is running) bidirectionally.`}</p>\n    <h2 {...{\n      \"id\": \"accessing-the-apis\"\n    }}>{`Accessing the APIs`}</h2>\n    <p>{`A default exported module from `}<inlineCode parentName=\"p\">{`addOnSandboxSdk`}</inlineCode>{` is provided to enable the communication between the iframe and the document sandbox via its' `}<inlineCode parentName=\"p\">{`instance.runtime`}</inlineCode>{` object. You can simply import the module into your script file code for use, and create a reference to the `}<inlineCode parentName=\"p\">{`runtime`}</inlineCode>{` object. For instance:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnSandboxSdk from \"add-on-sdk-document-sandbox\"; // a default import\n\nconst { runtime } = addOnSandboxSdk.instance; // runtime object provides direct access to the communication APIs\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`runtime`}</inlineCode>{` object can then be used to access the communication methods which allow you to communicate between the two execution environments: `}<inlineCode parentName=\"p\">{`exposeApi()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`apiProxy()`}</inlineCode>{`. The examples below show the methods in use from both the `}<inlineCode parentName=\"p\">{`index.html`}</inlineCode>{` where the iframe is running with your add-on code, and the document sandbox environment running the contents of `}<inlineCode parentName=\"p\">{`code.js`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"expose-apis-from-the-script\"\n    }}>{`Expose APIs from the script`}</h3>\n    <p>{`This example shows how to expose APIs from the document sandbox SDK (via `}<inlineCode parentName=\"p\">{`code.js`}</inlineCode>{`) for use by the UI (via `}<inlineCode parentName=\"p\">{`index.html`}</inlineCode>{`).`}</p>\n    <h4 {...{\n      \"id\": \"codejs\"\n    }}><inlineCode parentName=\"h4\">{`code.js`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnSandboxSdk from \"add-on-sdk-document-sandbox\"; \n\nconst { runtime } = addOnSandboxSdk.instance; \n\nconst sandboxApi = {\n    performWorkOnDocument: function (data, someFlag) {\n        // call the Document APIs\n    },\n    getDataFromDocument: function () {\n        // get some data from document\n    },\n};\n// expose these apis to be directly consumed in the UI (ie: index.html file).\nruntime.exposeApi(sandboxApi);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"indexhtml\"\n    }}>{`index.html`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(async () => {\n    const { runtime } = addOnUISdk.instance;\n\n    // Wait for the promise to resolve to get a proxy to call APIs defined in the document sandbox\n    const sandboxProxy = await runtime.apiProxy(\"documentSandbox\");\n\n    await sandboxProxy.performWorkOnDocument(\n        {\n            pageNumber: 1,\n            op: \"change_background_color\",\n            data: {\n                toColor: \"blue\",\n            },\n        }, \n        true\n    );\n\n    console.log(await sandboxProxy.getDataFromDocument());\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"expose-apis-from-the-ui\"\n    }}>{`Expose APIs from the UI`}</h3>\n    <p>{`This example shows how to expose APIs from the UI (via `}<inlineCode parentName=\"p\">{`index.html`}</inlineCode>{`) for use in the document sandbox (via `}<inlineCode parentName=\"p\">{`code.js`}</inlineCode>{`).`}</p>\n    <h4 {...{\n      \"id\": \"indexhtml-1\"\n    }}><inlineCode parentName=\"h4\">{`index.html`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`addOnUISdk.ready.then(async () => {\n    console.log(\"addOnUISdk is ready for use.\");\n\n    const { runtime } = addOnUISdk.instance;\n    const uiApi = {\n        performWorkOnUI: function (data, someFlag) {\n            // Do some ui operation\n        },\n        getDataFromUI: async function () {\n            let resolver = undefined;\n            \n            const promise = new Promise((resolve) => {\n                resolver = resolve;\n            });\n            setTimeout(() => {\n                resolver(\"button_color_blue\");\n            }, 10);\n            return await promise;\n        },\n    };\n    // Expose the UI Apis to be used in the script code (ie: code.js)\n    runtime.exposeApi(uiApi);\n});\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"codejs-1\"\n    }}><inlineCode parentName=\"h4\">{`code.js`}</inlineCode></h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnSandboxSdk from \"add-on-sdk-document-sandbox\"; // default import\n\nconst { runtime } = addOnSandboxSdk.instance;\n\nasync function callUIApis() {\n    // Get a proxy to the APIs defined in the UI\n    const uiApis = await runtime.apiProxy(\"panel\");\n    await uiApis.performWorkOnUI(\n        {\n            buttonTextFont: 20,\n            buttonColor: \"Green\"\n        },\n        true\n    );\n    \n    const result = await uiApis.getDataFromUI();\n    console.log(\"Data from UI: \" + result);\n}\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`DEBUGGING:`}</strong>{` Since the script code runs in a separate context from your add-on UI, the only support for debugging is via the `}<inlineCode parentName=\"p\">{`console.*`}</inlineCode>{` methods.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","isMDXComponent"],"sourceRoot":""}