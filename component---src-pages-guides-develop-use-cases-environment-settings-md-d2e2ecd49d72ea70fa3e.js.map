{"version":3,"file":"component---src-pages-guides-develop-use-cases-environment-settings-md-d2e2ecd49d72ea70fa3e.js","mappings":"0TAMaA,EAAe,CAAC,EAKvBC,GAJgBC,EAIY,cAJJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,GAHsBD,MAKtB,MAAMK,EAAc,CAClBP,gBAEIQ,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIR,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,KAACE,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBJ,EAAK,CAAES,WAAYA,EAAYI,QAAQ,eAG5EV,EAAAA,EAAAA,KAAA,MACE,GAAM,wBAAsB,yBAE9BA,EAAAA,EAAAA,KAAA,MACE,GAAM,mBAAiB,oBAEzBA,EAAAA,EAAAA,KAAA,uWACAA,EAAAA,EAAAA,KAACL,EAAW,CAACgB,MAAM,OAAOC,QAAQ,OAAOF,QAAQ,iBACjDV,EAAAA,EAAAA,KAAA,+OAAyOA,EAAAA,EAAAA,KAAA,KAAGa,WAAW,IACnP,KAAQ,6DAA2D,iCAC7B,MAC1Cb,EAAAA,EAAAA,KAAA,MACE,GAAM,WAAS,YAEjBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eAAa,saAa9Bb,EAAAA,EAAAA,KAAA,MACE,GAAM,iDAA+C,oDAEvDA,EAAAA,EAAAA,KAAA,oMAA8LA,EAAAA,EAAAA,KAAA,KAAGa,WAAW,IACxM,KAAQ,+DACPb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAG,qBAAmC,WAAe,2JACjFb,EAAAA,EAAAA,KAAA,MACE,GAAM,aAAW,YAEnBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eAAa,ijBA0BlC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/develop/use_cases/environment_settings.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"environment-settings\"\n    }}>{`Environment Settings`}</h1>\n    <h2 {...{\n      \"id\": \"detecting-theme\"\n    }}>{`Detecting Theme`}</h2>\n    <p>{`When you want to detect the theme of the environment where your add-on is running or if you want to be notified if it changes, you can use the following example. This is useful for knowing what theme is currently set in Adobe Express, so you can use the same in your add-on UI or keep it in synch when the user changes their Adobe Express theme.`}</p>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`Currently, Adobe Express only supports a \"light\" theme, though this will be changing to include support for a \"dark\" theme in the future. See the snippet below for an example of how to use and detect the theme, as well as the `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/addonsdk/app-ui.md#theme\"\n      }}>{`related SDK Reference section`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\nfunction applyTheme(theme) {\n    document.querySelector(\"sp-theme\").setAttribute(\"color\", theme);\n}\napplyTheme(addOnUISdk.app.ui.theme);\naddOnUISdk.app.on(\"themechange\", (data) => { applyTheme(data.theme); });\n\naddOnUISdk.app.on(\"themechange\", (data) => {\n    applyTheme(data.theme == \"dark\" ? darkTheme : lightTheme);\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"detecting-locale-supported-locales-and-format\"\n    }}>{`Detecting Locale, Supported Locales, and Format`}</h2>\n    <p>{`If you want to find out the user's current locale, the list of supported locales, or detect when the locale changes (e.g., to set the language in your add-on), you can do so with the `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/addonsdk/app-ui.md#locale\"\n      }}><inlineCode parentName=\"a\">{`addOnUISdk.app.ui`}</inlineCode>{` object`}</a>{` in the add-on SDK. Similarly, you can get and detect a change in the Format used display dates, times, numbers, etc. A simple example is shown below.`}</p>\n    <h3 {...{\n      \"id\": \"example-1\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\nfunction setLanguage(language) { \n  /* Set the language in your UI strings based on the change detected */ \n}\n\naddOnUISdk.ready.then(() => {\n  console.log(addOnUISdk.app.ui.locales);\n  setLanguage(addOnUISdk.app.ui.locale);\n\n  console.log(addOnUISdk.app.ui.format);\n\n  addOnUISdk.app.on(\"localechange\", data => {\n    setLanguage(data.locale);\n  });\n\n  addOnUISdk.app.on(\"formatchange\", data => {\n    console.log(\"New format\", data.format);\n  });\n\n});\n\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","slots","variant","parentName","isMDXComponent"],"sourceRoot":""}