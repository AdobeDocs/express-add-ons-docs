{"version":3,"file":"component---src-pages-guides-references-apis-export-md-358cbe465dd8b7f28a6f.js","mappings":"kRAMMA,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,CAAC,EACKI,EAAYN,EAAc,aAC1BO,EAAcP,EAAc,eAC5BQ,EAAc,CAAC,EACfC,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGX,GAAKY,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOV,EAAAA,EAAAA,KAACI,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBN,EAAK,CAAEW,WAAYA,EAAYI,QAAQ,eAG5EZ,EAAAA,EAAAA,KAAA,MACE,GAAM,UAAQ,WAEhBA,EAAAA,EAAAA,KAAA,iDAA2CA,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,OAAiB,MAAMb,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,OAAiB,MAAMb,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,OAAiB,SAASb,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,OAAiB,sLAC5Nb,EAAAA,EAAAA,KAACC,EAAS,CAACa,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,aAAaJ,QAAQ,eAC3EZ,EAAAA,EAAAA,KAAA,MACE,GAAM,aAAW,cAEnBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eAAa,21EAqI9Bb,EAAAA,EAAAA,KAAA,MACE,GAAM,WAAS,YAEjBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eAAa,urBAmB9Bb,EAAAA,EAAAA,KAACE,EAAW,CAACY,MAAM,OAAOG,QAAQ,UAAUL,QAAQ,iBACpDZ,EAAAA,EAAAA,KAAA,iCAA2BA,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,iBAA2B,SAASb,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,OAAiB,gFAC5Hb,EAAAA,EAAAA,KAAA,MACE,GAAM,2BAAyB,4BAEjCA,EAAAA,EAAAA,KAAA,wGAKAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,OAAK,uCAI/B,CAEAP,EAAWY,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/references/apis/export.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/express-add-ons-docs/express-add-ons-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"export\"\n    }}>{`Export`}</h1>\n    <p>{`Export renditions of your design in `}<strong parentName=\"p\">{`jpg`}</strong>{`, `}<strong parentName=\"p\">{`png`}</strong>{`, `}<strong parentName=\"p\">{`pdf`}</strong>{` and `}<strong parentName=\"p\">{`mp4`}</strong>{` formats. Choose to export a single page or the whole document by specifying in the rendition options, along with a variety of other export configuration options outlined below.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"JavaScript\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"interface\"\n    }}>{`Interface`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`interface Document {\n  /**\n  * Create renditions  \n  * @param renditionOptions - page rendition options\n  * @returns a promise of type array of page rendition  \n  */\n  createRenditions(renditionOptions: RenditionOptions): Promise<Rendition[]>;\n}\n \n\ninterface RenditionOptions {\n  /**\n   * Range of the document to get the rendition\n   */\n  range: Range;\n \n  /**\n   * Format of the rendition\n   */\n  format: RenditionFormat;\n}\n\nexport enum Range {\n    /**\n     * Generate rendition for the current page\n     */\n    currentPage = \"currentPage\",\n\n    /**\n     * Generate rendition for all the pages\n     */\n    entireDocument = \"entireDocument\"\n}\n\nenum Range {\n  /**\n   * Generate rendition for the current page\n   */\n  currentPage,\n \n  /**\n   * Generate rendition for all the pages\n   */\n  entireDocument\n}\n \nenum RenditionFormat {\n  /**\n   * PNG format\n   */\n  png = \"image/png\",\n \n  /**\n   * JPG format\n   */\n  jpg = \"image/jpeg\",\n \n  /**\n   * MP4 format\n   */\n  mp4 = \"video/mp4\",\n \n  /**\n   * PDF format\n   */\n  pdf = \"application/pdf\"\n}\n \ninterface JpgRenditionOptions extends RenditionOptions {\n  /**\n   * JPG rendition format\n   */\n  format: RenditionFormat.jpg;\n \n  /**\n   * The background color to sit behind any transparent areas.\n   * By default it is derived from the entity for which the rendition needs to be created.\n   * Integer in 0xRRGGBB format.\n   */\n  backgroundColor?: number;\n \n  /**\n   * A number between 0 and 1, indicating image quality. Default is 1.0\n   */\n  quality?: number;\n}\n \ninterface PngRenditionOptions extends RenditionOptions {\n  /**\n   * PNG rendition format\n   */\n  format: RenditionFormat.png;\n \n  /**\n   * The background color to sit behind any transparent areas.\n   * By default it is derived from the entity for which the rendition needs to be created.\n   * Integer in 0xAARRGGBB format\n   */\n  backgroundColor?: number;\n}\n\ninterface Rendition {\n  /**\n   * Type of Rendition\n   */\n  type: RenditionType;\n  \n  /**\n   * Blob containing the rendition\n   */\n  blob: Blob;\n}\n \nenum RenditionType {\n  /**\n   * Rendition of the whole page\n   */\n  page = \"page\"\n}\n \ninterface PageRendition extends Rendition {\n  /**\n   * Page rendition type\n   */\n  type: RenditionType.page;\n \n  /**\n   * Page title\n   */\n  title: string;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\n// Display preview of all pages in the Add-on UI\nasync function displayPreview() {\n  try {\n    const renditionOptions: PngRenditionOptions = {range: Range.entireDocument, format: RenditionFormat.png, backgroundColor: 0x7FAA77FF};\n    const renditions = await AddOnSdk.app.document.createRenditions(renditionOptions);\n    renditions.forEach(rendition => {\n      const image = document.createElement(\"img\");\n      image.src = URL.createObjectURL(rendition.blob);\n      document.body.appendChild(image);\n    });\n  }\n  catch(error) {\n    console.log(\"Failed to create renditions:\", error);\n  }\n}\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"success\" mdxType=\"InlineAlert\" />\n    <p>{`Please refer to the `}<strong parentName=\"p\">{`export-sample`}</strong>{` and `}<strong parentName=\"p\">{`pix`}</strong>{` add-on in the code samples for more details on how to use the Export APIs.`}</p>\n    <h3 {...{\n      \"id\": \"rendition-response-json\"\n    }}>{`Rendition Response JSON`}</h3>\n    <p>{`\\`\\`json\nresponse:\nblob: Blob {size: 357080, type: 'image/png'}\ntitle: \"\"\ntype: \"page\"`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\nexport const _frontmatter = {}\n`}</code></pre>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["makeShortcode","name","props","console","warn","mdx","CodeBlock","InlineAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","_extends","mdxType","parentName","slots","repeat","languages","variant","isMDXComponent"],"sourceRoot":""}