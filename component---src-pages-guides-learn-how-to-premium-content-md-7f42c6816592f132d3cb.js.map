{"version":3,"file":"component---src-pages-guides-learn-how-to-premium-content-md-7f42c6816592f132d3cb.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/learn/how_to/premium_content.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport '/src/styles.css';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"manage-premium-content\"\n    }}>{`Manage Premium Content`}</h1>\n    <p>{`When exporting Adobe Express documents, you should ensure proper handling of Premium content.`}</p>\n    <p>{`Let's go through all the available options to manage the rendition of Premium content in case your add-on allows users to export or download it.`}</p>\n    <h2 {...{\n      \"id\": \"show-a-premium-content-error-with-the-upgrade-option\"\n    }}>{`Show a Premium Content error with the \"Upgrade\" option`}</h2>\n    <p>{`One way to handle premium content is to display a warning message when the user is not entitled to export or download it, and include a button to allow them to upgrade. Please note that you can detect in advance if the user is entitled to Premium content (via `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-currentUser.md#isPremiumUser\"\n      }}><inlineCode parentName=\"a\">{`isPremiumUser()`}</inlineCode></a>{`), and whether the page contains Premium content (via `}<a parentName=\"p\" {...{\n        \"href\": \"/express-add-ons-docs/references/addonsdk/app-document.md#pagemetadata\"\n      }}><inlineCode parentName=\"a\">{`hasPremiumContent`}</inlineCode></a>{`) in the first place. A try/catch block intercepting the `}<inlineCode parentName=\"p\">{`\"USER_NOT_ENTITLED_TO_PREMIUM_CONTENT\"`}</inlineCode>{` string in the error message as the primary way to deal with it is no longer recommended.`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\nconst { app, constants } = addOnUISdk;\nconst { ButtonType, Range, RenditionFormat } = constants;\n\nconst showPremiumContentError = async () => {\n  // Show a modal dialog with an error message\n  const { buttonType } = await window.addOnUISdk.app.showModalDialog({\n    variant: \"error\",\n    title: \"Export failed\",\n    description:\n      \"Sorry, we were not able to export your design. \" +\n      \"Some assets are only included in the Premium plan.\" +\n      \"Try replacing with something else \" +\n      \"or upgrading Adobe Express to a Premium plan.\",\n    buttonLabels: { secondary: \"Upgrade\" },\n  });\n\n  // The User is still not premium\n  if (buttonType === ButtonType.cancel) return false;\n  if (buttonType === ButtonType.secondary) {\n    // Original flow (don't use anymore)\n    // ❌ window.open(\n    //     \"https://www.adobe.com/go/express_addons_pricing\",\n    //     \"_blank\"\n    //   );\n    // 👇 Use startPremiumUpgradeIfFreeUser() instead\n    const hasUpgradedToPremium = await app.startPremiumUpgradeIfFreeUser();\n    return hasUpgradedToPremium;\n  }\n};\n\n// Check if the page range is safe to export\nconst isRangeSafeToExport = async (range) => {\n  const userIsPremium = await app.currentUser.isPremiumUser();\n  const pages = await app.document.getPagesMetadata({ range });\n  const containsPremiumContent = pages.some((page) => page.hasPremiumContent);\n  return (containsPremiumContent && userIsPremium) || !containsPremiumContent;\n};\n\nconst exportDocument = async () => {\n  // 👇 Testing purposes only! 👇\n  app.devFlags.simulateFreeUser = true; // 👈 Remove in production!\n\n  let isSafeToExport = await isRangeSafeToExport(Range.entireDocument);\n  if (!isSafeToExport) {\n    const isNowPremiumUser = await showPremiumContentError();\n    isSafeToExport = isNowPremiumUser;\n  }\n\n  if (isSafeToExport) {\n    try {\n      const renditions = await app.document.createRenditions({\n        range: Range.entireDocument,\n        format: RenditionFormat.png,\n      });\n      renditions.forEach((rendition) => {\n        // do your thing w/ the renditions\n      });\n    } catch (err) {\n      // did someone just add premium content in the split second\n      // between our original check? did the user just downgrade?\n      if (err.message?.includes(\"USER_NOT_ENTITLED_TO_PREMIUM_CONTENT\")) {\n        return await exportDocument(); // try again\n      }\n    }\n  }\n};\n\ndocument.querySelector(\"#export\").onclick = exportDocument;\n`}</code></pre>\n    <p>{`Please note that `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/addonsdk-app.md#startpremiumupgradeiffreeuser\"\n      }}><inlineCode parentName=\"a\">{`startPremiumUpgradeIfFreeUser()`}</inlineCode></a>{` allows a more streamlined user experience for upgrading to premium content, compared to the older method of redirecting to the Adobe Express pricing page, which is now deprecated.`}</p>\n    <h2 {...{\n      \"id\": \"provide-visual-cues-in-the-ui\"\n    }}>{`Provide visual cues in the UI`}</h2>\n    <p>{`Alternatively, you can provide visual cues directly in the add-on UI to show that users are not entitled to export/download premium content. This can be done in various ways, for instance, by disabling the export/download button, replacing it with an upgrade button, or appending a brief explanation, tooltip, or icon. This would inform users upfront that they are not entitled to export/download premium content, preventing them from facing the warning popup after attempting to do so.`}</p>\n    <h2 {...{\n      \"id\": \"allow-only-the-preview-of-premium-content\"\n    }}>{`Allow only the preview of Premium Content`}</h2>\n    <p>{`As mentioned in `}<a parentName=\"p\" {...{\n        \"href\": \"./create_renditions.md\"\n      }}>{`Creating Renditions`}</a>{`, you can allow users to preview Premium content within the iframe by setting the `}<inlineCode parentName=\"p\">{`renditionIntent`}</inlineCode>{` to the constant `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/addonsdk-constants.md\"\n      }}><inlineCode parentName=\"a\">{`RenditionIntent.preview`}</inlineCode></a>{` as the second parameter of the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#createrenditions\"\n      }}><inlineCode parentName=\"a\">{`addOnUISdk.app.document.createRendition()`}</inlineCode></a>{` method. Remember to also add the `}<a parentName=\"p\" {...{\n        \"href\": \"./create_renditions.md#the-preview-intent\"\n      }}><inlineCode parentName=\"a\">{`\"renditionPreview\"`}</inlineCode></a>{` permission to your add-on's `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{` file.`}</p>\n    <InlineAlert slots=\"header, text, text1, text2\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`Prevent previews download`}</p>\n    <p>{`Your add-on must not allow these previewed images to be downloaded or persisted on a backend (for any longer than necessary to serve the result back to the user). To that end, be sure that users cannot:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`right-click -> save as`}</strong>{`: To prevent this, reject the `}<inlineCode parentName=\"li\">{`contextmenu`}</inlineCode>{` event.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`drag the image off the panel`}</strong>{`: To prevent this, you can reject the `}<inlineCode parentName=\"li\">{`dragstart`}</inlineCode>{` event.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Note:`}</strong>{` These behaviors are enabled by default if you use an `}<inlineCode parentName=\"p\">{`<img>`}</inlineCode>{` tag. If you apply the image using `}<inlineCode parentName=\"p\">{`background-image`}</inlineCode>{` CSS, these behaviors aren't added.`}</p>\n    <h3 {...{\n      \"id\": \"example-1\"\n    }}>{`Example`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, TypeScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"javascript\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\n\n// Wait for the SDK to be ready\nawait addOnUISdk.ready;\n\n// Display preview of all pages in the AddOn UI\nasync function displayPreview() {\n  try {\n    const renditionOptions = {\n      range: addOnUISdk.constants.Range.entireDocument,\n      format: addOnUISdk.constants.RenditionFormat.png,\n      backgroundColor: 0x7faa77ff,\n    };\n    const renditions = await addOnUISdk.app.document.createRenditions(\n      renditionOptions,\n      addOnUISdk.constants.RenditionIntent.preview\n    );\n    renditions.forEach((rendition) => {\n      const image = document.createElement(\"img\");\n      image.src = URL.createObjectURL(rendition.blob);\n      document.body.appendChild(image);\n    });\n  } catch (error) {\n    console.log(\"Failed to create renditions:\", error);\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"typescript\"\n    }}>{`TypeScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\n\n// Wait for the SDK to be ready\nawait addOnUISdk.ready;\n\n// Display preview of all pages in the AddOn UI\nasync function displayPreview() {\n  try {\n    const renditionOptions: PngRenditionOptions = {\n      range: addOnUISdk.constants.Range.entireDocument,\n      format: addOnUISdk.constants.RenditionFormat.png,\n      backgroundColor: 0x7faa77ff,\n    };\n    const renditions = await addOnUISdk.app.document.createRenditions(\n      renditionOptions,\n      addOnUISdk.constants.RenditionIntent.preview\n    );\n    renditions.forEach((rendition) => {\n      const image = document.createElement(\"img\");\n      image.src = URL.createObjectURL(rendition.blob);\n      document.body.appendChild(image);\n    });\n  } catch (error) {\n    console.log(\"Failed to create renditions:\", error);\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"faqs\"\n    }}>{`FAQs`}</h2>\n    <h4 {...{\n      \"id\": \"q-how-do-i-check-if-a-user-has-premium-access\"\n    }}>{`Q: How do I check if a user has premium access?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Call `}<inlineCode parentName=\"p\">{`await addOnUISdk.app.currentUser.isPremiumUser()`}</inlineCode>{` to check premium user status.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-check-if-a-page-contains-premium-content\"\n    }}>{`Q: How do I check if a page contains premium content?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`page.hasPremiumContent`}</inlineCode>{` property from `}<inlineCode parentName=\"p\">{`getPagesMetadata()`}</inlineCode>{` results.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-handle-premium-upgrade-flow\"\n    }}>{`Q: How do I handle premium upgrade flow?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Call `}<inlineCode parentName=\"p\">{`await addOnUISdk.app.startPremiumUpgradeIfFreeUser()`}</inlineCode>{` instead of redirecting to pricing page.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-allow-preview-only-of-premium-content\"\n    }}>{`Q: How do I allow preview-only of premium content?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`RenditionIntent.preview`}</inlineCode>{` and add `}<inlineCode parentName=\"p\">{`\"renditionPreview\": true`}</inlineCode>{` to manifest requirements.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-error-indicates-premium-content-restriction\"\n    }}>{`Q: What error indicates premium content restriction?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Look for `}<inlineCode parentName=\"p\">{`\"USER_NOT_ENTITLED_TO_PREMIUM_CONTENT\"`}</inlineCode>{` in error messages.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-should-i-prevent-preview-downloads\"\n    }}>{`Q: How should I prevent preview downloads?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Reject `}<inlineCode parentName=\"p\">{`contextmenu`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`dragstart`}</inlineCode>{` events, or use CSS background-image instead of img tags.`}</p>\n    <h4 {...{\n      \"id\": \"q-should-i-still-use-trycatch-for-premium-errors\"\n    }}>{`Q: Should I still use try/catch for premium errors?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Check user status and page content first; use try/catch only as fallback for edge cases.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-are-good-ui-patterns-for-premium-content\"\n    }}>{`Q: What are good UI patterns for premium content?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Disable export buttons, show upgrade buttons, add tooltips, or display premium content indicators.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","repeat","languages","isMDXComponent"],"sourceRoot":""}