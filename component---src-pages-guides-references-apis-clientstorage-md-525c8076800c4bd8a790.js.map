{"version":3,"file":"component---src-pages-guides-references-apis-clientstorage-md-525c8076800c4bd8a790.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,CAAC,EACKI,EAAcN,EAAc,eAC5BO,EAAYP,EAAc,aAC1BQ,EAAc,CAClBT,aAAAA,GAEIU,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGX,GAAKY,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOV,EAAAA,EAAAA,KAACI,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBN,EAAK,CAAEW,WAAYA,EAAYI,QAAQ,eAG5EZ,EAAAA,EAAAA,KAAA,MACE,GAAM,uBAAqB,wBAE7BA,EAAAA,EAAAA,KAAA,iBAAWA,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAG,iBAA+B,kGACpEb,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAG,iBAA+B,uBAAuBb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAG,uBAAqC,6NAA6Nb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAG,iBAA+B,uKACxab,EAAAA,EAAAA,KAACC,EAAW,CAACa,MAAM,OAAOC,QAAQ,OAAOH,QAAQ,iBACjDZ,EAAAA,EAAAA,KAAA,2KAAqKA,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAG,iBAA+B,iBAAiBb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAG,gBAA8B,OACvSb,EAAAA,EAAAA,KAACE,EAAS,CAACY,MAAM,gBAAgBE,OAAO,IAAIC,UAAU,aAAaL,QAAQ,eAC3EZ,EAAAA,EAAAA,KAAA,MACE,GAAM,aAAW,cAEnBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eAAa,4rCAwC9Bb,EAAAA,EAAAA,KAAA,MACE,GAAM,WAAS,YAEjBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eAAa,40CAwD9Bb,EAAAA,EAAAA,KAAA,MACE,GAAM,UAAQ,WAEhBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,OAAK,MAC3Bb,EAAAA,EAAAA,KAACC,EAAW,CAACa,MAAM,OAAOC,QAAQ,UAAUH,QAAQ,iBACpDZ,EAAAA,EAAAA,KAAA,iBAAWA,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,sBAAgC,qFAGrE,CAEAP,EAAWY,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/references/apis/clientstorage.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/express-add-ons-docs/express-add-ons-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"client-side-storage\"\n    }}>{`Client-Side Storage`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ClientStorage`}</inlineCode>{` API allows you to store, retrieve and delete persistent data in the user's current browser. `}</p>\n    <p><inlineCode parentName=\"p\">{`ClientStorage`}</inlineCode>{` is similar to the `}<inlineCode parentName=\"p\">{`Window.localStorage`}</inlineCode>{` API, but is asynchronous, supports multiple datatypes, (i.e., objects, arrays, strings, numbers, booleans, null, undefined and Uint8Array) and has a larger storage limit. Each add-on can store up to 10 mb of data in `}<inlineCode parentName=\"p\">{`ClientStorage`}</inlineCode>{`, per user. Post 10 mb, any data additions will throw a quota error. However, an add-on developer can write code to delete old data so that new data can be added.`}</p>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`Note that since the data will be stored in the userâ€™s current browser, user actions such as clearing the browser cache would clear all of the data storage in `}<inlineCode parentName=\"p\">{`ClientStorage`}</inlineCode>{` (similar to `}<inlineCode parentName=\"p\">{`localStorage`}</inlineCode>{`).`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"JavaScript\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"interface\"\n    }}>{`Interface`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`interface AddOn {\n  /**\n   * Data storage on the user's local machine.\n   * This data is not synchronized across users\n   */\n  clientStorage: ClientStorage;\n}\n\ninterface ClientStorage {\n  /**\n   * Retrieve a value from ClientStorage for given key.\n   * If no value has been stored for that key, this function will asynchronously return undefined.\n   */\n  async getItem(key: string): Promise<unknown | undefined>;\n\n  /**\n   * Set a value to ClientStorage with the given key.\n   * The returned promise will resolve if storage is successful or reject with an error message if storage failed.\n   */\n  async setItem(key: string, value: any): Promise<void>;\n\n  /**\n   * Remove the stored key/value pair from ClientStorage for given key.\n   * If no such key is stored, this function will return normally but will otherwise do nothing.\n   */\n  async removeItem(key: string): Promise<void>;\n\n  /**\n   * Retrieve a list of all keys stored to ClientStorage.\n   * Use this to enumerate the full contents of the ClientStorage API.\n   */\n  async keys(): Promise<string[]>;\n\n   /**\n     * Delete all data present in ClientStorage for an Add-on.\n     */\n    clear(): Promise<void>;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n\n// Wait for the SDK to be ready\nawait AddOnSdk.ready;\n\n// Reference to the client storage of the add-on\nconst { clientStorage } = AddOnSdk.instance;\n\n// Get add-on data\nasync function getData(key) {\n  try {\n    return await clientStorage.getItem(key);\n  } catch (error) {\n    console.log(\"Failed to get the value from the ClientStorage.\");\n  }\n}\n\n// Add/update add-on data\nasync function setData(key, value) {\n  try {\n    await clientStorage.setItem(key, value);\n  } catch (error) {\n    console.log(\"Failed to set the value to the ClientStorage.\");\n  }\n}\n\n// Delete add-on data for a key\nasync function deleteData(key) {\n  try {\n    await clientStorage.removeItem(key);\n  } catch (error) {\n    console.log(\"Failed to delete the value from the ClientStorage.\");\n  }\n}\n\n// Delete ALL add-on data for this user\nasync function clearData() {\n  try {\n    await clientStorage.clear();\n  }\n  catch(error) {\n    console.log(\"Failed to clear the data from the ClientStorage.\");\n  }\n}\n\n// Get all stored keys\nasync function getKeys() {\n  try {\n    const keys = await clientStorage.keys();\n    keys.forEach((key) => console.log(key));\n  } catch (error) {\n    console.log(\"Failed to get the keys from the ClientStorage.\");\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"output\"\n    }}>{`Output`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{``}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"success\" mdxType=\"InlineAlert\" />\n    <p>{`The `}<strong parentName=\"p\">{`use-client-storage`}</strong>{` sample can also be used as a reference for implementing the Client Storage APIs.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","_extends","mdxType","parentName","slots","variant","repeat","languages","isMDXComponent"],"sourceRoot":""}