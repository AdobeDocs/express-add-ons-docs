{"version":3,"file":"component---src-pages-guides-develop-how-to-use-text-md-84ac43447fec2e5920e3.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/develop/how_to/use_text.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"use-text\"\n    }}>{`Use Text`}</h1>\n    <p>{`Text is an essential part of any design. Let's explore how to use all the available APIs to create and style it.`}</p>\n    <h2 {...{\n      \"id\": \"create-text\"\n    }}>{`Create Text`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`editor.createText()`}</inlineCode>{` method doesn't accept any parameters and returns a brand new `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextNode.md\"\n      }}><inlineCode parentName=\"a\">{`TextNode`}</inlineCode></a>{`. The actual textual content starts as empty and is found in its `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#text\"\n      }}><inlineCode parentName=\"a\">{`fullContent.text`}</inlineCode></a>{` property.`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Create a new TextNode\nconst textNode = editor.createText();\n\n// Set the text content\ntextNode.fullContent.text = \"Hello,\\\\nWorld!\";\n\n// Center the text on the page\nconst insertionParent = editor.context.insertionParent;\ntextNode.setPositionInParent(\n  { x: insertionParent.width / 2, y: insertionParent.height / 2 },\n  { x: 0, y: 0 }\n);\n\n// Add the TextNode to the document\ninsertionParent.children.append(textNode);\n\n// Get the text content\nconsole.log(\"Text: \", textNode.fullContent.text);\n`}</code></pre>\n    <p>{`The text is created with the default styles (Source Sans 3, 100pt, black). Use `}<inlineCode parentName=\"p\">{`\\\\n`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`\\\\r`}</inlineCode>{` to add a line break.`}</p>\n    <h2 {...{\n      \"id\": \"replace-text\"\n    }}>{`Replace Text`}</h2>\n    <p>{`The text content of a `}<inlineCode parentName=\"p\">{`TextNode`}</inlineCode>{` can be replaced by setting the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#text\"\n      }}><inlineCode parentName=\"a\">{`fullContent.text`}</inlineCode></a>{` property.`}</p>\n    <h3 {...{\n      \"id\": \"example-1\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst selectedTextNode = editor.context.selection[0];\nselectedTextNode.fullContent.text = \"Something else\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"apply-character-styles\"\n    }}>{`Apply Character Styles`}</h2>\n    <p>{`Text styles can be applied to a `}<inlineCode parentName=\"p\">{`TextNode`}</inlineCode>{` using the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#applycharacterstyles\"\n      }}><inlineCode parentName=\"a\">{`fullContent.applyCharacterStyles()`}</inlineCode></a>{` method, which applies one or more styles to the characters in the given range, leaving any style properties that were not specified unchanged.`}</p>\n    <p>{`The styles are defined by the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/interfaces/CharacterStylesInput.md\"\n      }}><inlineCode parentName=\"a\">{`CharacterStylesInput`}</inlineCode></a>{` interface; the properties that can be set are:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`color`}</li>\n      <li parentName=\"ul\">{`font (please see the `}<a parentName=\"li\" {...{\n          \"href\": \"#use-fonts\"\n        }}>{`Use Fonts`}</a>{` section)`}</li>\n      <li parentName=\"ul\">{`fontSize`}</li>\n      <li parentName=\"ul\">{`letterSpacing`}</li>\n      <li parentName=\"ul\">{`underline`}</li>\n    </ul>\n    <p>{`The range is an object with the `}<inlineCode parentName=\"p\">{`start`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`length`}</inlineCode>{` properties.`}</p>\n    <InlineAlert slots=\"header, text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`Style Ranges and Text edits`}</p>\n    <p>{`For the moment, replacing the `}<inlineCode parentName=\"p\">{`fullContent.text`}</inlineCode>{` will result in applying the style from the first range to the whole text. This behavior is subject to change in future releases.`}</p>\n    <p>{`Please note that `}<inlineCode parentName=\"p\">{`applyCharacterStyles()`}</inlineCode>{` is only one way to set styles; you can also use the `}<inlineCode parentName=\"p\">{`characterStyleRanges`}</inlineCode>{` property, which supports both getting and setting styles, as described `}<a parentName=\"p\" {...{\n        \"href\": \"#example-set-all-styles\"\n      }}>{`here`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-set-styles-in-a-range\"\n    }}>{`Example: Set Styles in a range`}</h3>\n    <p>{`Let's change the styles for the first three characters of a TextNode.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\n\n// Apply character styles to the first three letters\ntextNode.fullContent.applyCharacterStyles(\n  {\n    color: { red: 0, green: 0.4, blue: 0.8, alpha: 1 },\n    fontSize: 240,\n    letterSpacing: 10,\n    underline: true,\n  },\n  {\n    start: 0,\n    length: 3,\n  }\n);\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`applyCharacterStyles()`}</inlineCode>{` method is not the only one that allows you to set styles; you can also use the `}<inlineCode parentName=\"p\">{`characterStyleRanges`}</inlineCode>{` property, which supports both getting and setting styles.`}</p>\n    <h3 {...{\n      \"id\": \"example-get-all-styles\"\n    }}>{`Example: Get all Styles`}</h3>\n    <p>{`To get the complete list of text character styles, you can use the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#characterstyleranges\"\n      }}><inlineCode parentName=\"a\">{`fullContent.characterStyleRanges`}</inlineCode></a>{` property, which returns an array of `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/interfaces/CharacterStylesRange.md\"\n      }}><inlineCode parentName=\"a\">{`CharacterStylesRange`}</inlineCode></a>{` elements.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\n// Get the array of character styles\nconst existingStyles = contentModel.characterStyleRanges;\n\n// Edit some properties\nexistingStyles[0].fontSize = 10;\n\n// Reassign the array to apply the style changes\ncontentModel.characterStyleRanges = existingStyles;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-set-all-styles\"\n    }}>{`Example: Set all Styles`}</h3>\n    <p>{`You can also use the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#characterstyleranges\"\n      }}><inlineCode parentName=\"a\">{`characterStyleRanges`}</inlineCode></a>{` property to set individual ranges or them all. It's always best to get the array, modify it, and then reassign it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\n// Get the array of character styles\nconst existingStyles = contentModel.characterStyleRanges;\n\n// Edit some properties: the font size of all styles\nexistingStyles.forEach((style) => {\n  style.fontSize = 50;\n});\n// Alternatively, you could set the properties for a specific style range\n// existingStyles[0].fontSize = 50;\n\n// Reassign the array to apply the style changes\ncontentModel.characterStyleRanges = existingStyles;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-reapply-styles\"\n    }}>{`Example: Reapply Styles`}</h3>\n    <p>{`In the current release, automatic preservation of the Character Style configuration is not available when editing a TextNode’s content via the `}<inlineCode parentName=\"p\">{`fullContent.text`}</inlineCode>{`. As a temporary solution, you can save the existing character style ranges before updating the text and reapply them afterward to maintain your custom styles.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\n// Save existing character style ranges\nconst savedStyles = contentModel.characterStyleRanges;\n\n// Replace the text content\ncontentModel.text = \"Updated text content\\\\nwith preserved styles\";\n\n// Reapply the saved character styles\ncontentModel.characterStyleRanges = savedStyles;\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`If the text content differs too much from the original, the character style ranges might not be reapplied correctly. This is a temporary solution until automatic preservation of character styles is available.`}</p>\n    <h2 {...{\n      \"id\": \"use-fonts\"\n    }}>{`Use Fonts`}</h2>\n    <p>{`In the Adobe Express Document API, Fonts are part of the Character Styles; we're treating them separately here for clarity. Similarly to the color and other properties, you can use individual `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/interfaces/CharacterStylesRange.md\"\n      }}><inlineCode parentName=\"a\">{`CharacterStylesRange`}</inlineCode></a>{` items from the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#characterstyleranges\"\n      }}><inlineCode parentName=\"a\">{`CharacterStyleRanges`}</inlineCode></a>{` array as Font getters and setters, or use the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#applycharacterstyles\"\n      }}><inlineCode parentName=\"a\">{`applyCharacterStyles()`}</inlineCode></a>{` method to apply a Font style to a specific range.`}</p>\n    <p>{`The only caveat is that you cannot set the font as an Object literal, like, e.g., colors; fonts must be of type `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/AvailableFont.md\"\n      }}><inlineCode parentName=\"a\">{`AvailableFont`}</inlineCode></a>{`, and are instantiated from the `}<inlineCode parentName=\"p\">{`fonts`}</inlineCode>{` object (imported from the `}<inlineCode parentName=\"p\">{`\"express-document-sdk\"`}</inlineCode>{`) using the asynchronous `}<inlineCode parentName=\"p\">{`fromPostscriptName()`}</inlineCode>{` method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Always\n✅ const font = await fonts.fromPostscriptName(\"SourceSans3-Bold\");\n\n// Won't work\n❌ const font = {\n  availableForEditing: true,\n  isPremium: false,\n  family: \"Source Sans 3\",\n  postscriptName: \"SourceSans3-Bold\",\n  style: \"Bold\",\n}\n`}</code></pre>\n    <p>{`You can get PostScript names by setting different text fonts in the Adobe Express UI; then, log and inspec the `}<inlineCode parentName=\"p\">{`font`}</inlineCode>{` property of `}<inlineCode parentName=\"p\">{`characterStyleRange`}</inlineCode>{`, as seen `}<a parentName=\"p\" {...{\n        \"href\": \"#example-get-all-styles\"\n      }}>{`here`}</a>{`.`}</p>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`Remember that the `}<inlineCode parentName=\"p\">{`fromPostscriptName()`}</inlineCode>{` method is `}<strong parentName=\"p\">{`asynchronous`}</strong>{`. The promise resolves to an `}<inlineCode parentName=\"p\">{`AvailableFont`}</inlineCode>{` instance only for fonts that the user has permission to use for editing content; otherwise, it will resolve to `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"example-set-fonts-in-a-range\"\n    }}>{`Example: Set Fonts in a range.`}</h3>\n    <p>{`Let's now change the font of the first three characters in a TextNode. Please note that although you're allowed to set the font as the only style, the font object itself must contain all the properties, as the following code snippet demonstrates.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, fonts } from \"express-document-sdk\"; // 👈 fonts import\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\n\n// Getting a new font object\nconst lato = await fonts.fromPostscriptName(\"Lato-Light\");\nif (!lato) return; // in case the user isn't entitled to use this font\n\n// ⚠️ Queueing the edit\neditor.queueAsyncEdit(() => {\n  textNode.fullContent.applyCharacterStyles(\n    { font: lato, fontSize: 24 },\n    { start: 0, length: 3 }\n  );\n});\n`}</code></pre>\n    <InlineAlert slots=\"header, text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`Asynchronous operations`}</p>\n    <p>{`Queuing the `}<inlineCode parentName=\"p\">{`applyCharacterStyles()`}</inlineCode>{` method is necessary because `}<inlineCode parentName=\"p\">{`fromPostscriptName()`}</inlineCode>{` is asynchronous. This ensures the edit is properly tracked for saving and undo. You can read more about this in the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/Editor.md#queueasyncedit\"\n      }}>{`queueAsyncEdit()`}</a>{` reference.`}</p>\n    <h3 {...{\n      \"id\": \"example-get-all-fonts\"\n    }}>{`Example: Get all Fonts`}</h3>\n    <p>{`A font, regardless of whether accessed via `}<inlineCode parentName=\"p\">{`CharacterStylesRange`}</inlineCode>{` or executing `}<inlineCode parentName=\"p\">{`fromPostscriptName()`}</inlineCode>{`, exposes the following properties:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isPremium`}</inlineCode>{`: boolean, indicating whether the font is a Premium Adobe font.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`availableForEditing`}</inlineCode>{`: boolean, indicating whether the user has access or licensing permissions to create or edit content with this font.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`family`}</inlineCode>{`: string, the font family name, as you would find in the Text panel's UI.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`postscriptName`}</inlineCode>{`: string, the PostScript name of the font.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`style`}</inlineCode>{`: string, the style of the font (e.g., \"Regular\", \"Bold\", \"Italic\").`}</li>\n    </ul>\n    <p>{`You can log `}<inlineCode parentName=\"p\">{`font`}</inlineCode>{` and inspect it to find the actual PostScript name.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\n// Get the array of character styles\nconst existingStyles = contentModel.characterStyleRanges;\n\n// Log the font of the first style\nconsole.log(existingStyles[0].font);\n// {\n//   isPremium: false\n//   availableForEditing: true\n//   family: \"Source Sans 3\"\n//   postscriptName: \"SourceSans3-Regular\"\n//   style: \"Regular\"\n// }\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-set-all-fonts\"\n    }}>{`Example: Set all Fonts`}</h3>\n    <p>{`Similarly to what we've seen with `}<a parentName=\"p\" {...{\n        \"href\": \"#example-set-all-styles\"\n      }}>{`other styles`}</a>{`, you can set the font in a range by reassigning the `}<inlineCode parentName=\"p\">{`characterStyleRanges`}</inlineCode>{` array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, fonts } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\nconst sourceSansBold = await fonts.fromPostscriptName(\"SourceSans3-Bold\");\nif (!sourceSansBold) return;\n\n// Get the array of character styles\nconst existingStyles = contentModel.characterStyleRanges;\n\n// Set the font for all styles\nexistingStyles.forEach((style) => {\n  style.font = sourceSansBold;\n});\n// Alternatively, you could set the font for a specific style range\n// existingStyles[0].font = sourceSansBold;\n\n// Reassign the array to apply the style changes\neditor.queueAsyncEdit(() => {\n  contentModel.characterStyleRanges = existingStyles;\n});\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`Since we're dealing with asynchronous operations, we're queuing the edit to ensure it's properly tracked for saving and undo, as we did for `}<a parentName=\"p\" {...{\n        \"href\": \"#example-set-all-styles\"\n      }}>{`setting other styles`}</a></p>\n    <h2 {...{\n      \"id\": \"apply-paragraph-styles\"\n    }}>{`Apply Paragraph Styles`}</h2>\n    <p>{`Paragraph styles can be applied to a TextNode using the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#applyparagraphstyles\"\n      }}><inlineCode parentName=\"a\">{`fullContent.applyParagraphStyles()`}</inlineCode></a>{` method. This method applies one or more style properties to entire paragraphs within the specified range, while leaving any style properties that are not provided unchanged. In contrast to directly setting the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#paragraphstyleranges\"\n      }}><inlineCode parentName=\"a\">{`paragraphStyleRanges`}</inlineCode></a>{` property—which resets any unspecified properties to their defaults—using `}<inlineCode parentName=\"p\">{`applyParagraphStyles()`}</inlineCode>{` lets you update only the desired aspects of the style.`}</p>\n    <p>{`The available properties are defined by the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/interfaces/ParagraphStylesInput.md\"\n      }}><inlineCode parentName=\"a\">{`ParagraphStylesInput`}</inlineCode></a>{` interface and include:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`lineSpacing`}</strong>{`: Specifies the spacing between lines (leading), expressed as a multiple of the font’s default spacing (e.g. 1.5 means 150% of normal).`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`spaceBefore`}</strong>{`: Sets the space (in points) before a paragraph.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`spaceAfter`}</strong>{`: Sets the space (in points) after a paragraph.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`list`}</strong>{`: Configures list styles (ordered or unordered) for the paragraph. When specifying list styles, you provide the settings via either the `}<a parentName=\"li\" {...{\n          \"href\": \"../../../references/document-sandbox/document-apis/interfaces/OrderedListStyleInput.md\"\n        }}><inlineCode parentName=\"a\">{`OrderedListStyleInput`}</inlineCode></a>{` or `}<a parentName=\"li\" {...{\n          \"href\": \"../../../references/document-sandbox/document-apis/interfaces/UnorderedListStyleInput.md\"\n        }}><inlineCode parentName=\"a\">{`UnorderedListStyleInput`}</inlineCode></a>{` interface.`}</li>\n    </ul>\n    <p>{`Paragraphs are defined by newline characters (`}<inlineCode parentName=\"p\">{`\\\\n`}</inlineCode>{`), so the style ranges should align with these boundaries. The method accepts an optional range—an object with `}<inlineCode parentName=\"p\">{`start`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`length`}</inlineCode>{` properties—that determines which portion of the text content will be updated. If no range is provided, the styles will be applied to the entire text content flow.`}</p>\n    <InlineAlert slots=\"header, text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`Style Ranges and Text Edits`}</p>\n    <p>{`For the moment, replacing the `}<inlineCode parentName=\"p\">{`fullContent.text`}</inlineCode>{` will result in applying the style from the first range to the whole text. This behavior is subject to change in future releases.`}</p>\n    <h3 {...{\n      \"id\": \"example-set-styles-in-a-range-1\"\n    }}>{`Example: Set Styles in a Range`}</h3>\n    <p>{`In this example, we modify the styles for a specific paragraph (the first 20 characters) by updating the line spacing and adding an ordered list style.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor, constants } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\n\n// Apply paragraph styles to the specified range (e.g., the first paragraph)\ntextNode.fullContent.applyParagraphStyles(\n  {\n    lineSpacing: 1.5, // 150% of normal line spacing\n    spaceBefore: 12, // 12 points before the paragraph\n    spaceAfter: 8, // 8 points after the paragraph\n    list: {\n      type: constants.ParagraphListType.ordered,\n      numbering: constants.OrderedListNumbering.doubleZeroPrefixNumeric,\n      prefix: \"\",\n      postfix: \".\",\n      indentLevel: 2, // Indent level for the list\n    },\n  },\n  {\n    start: 0,\n    length: 20,\n  }\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-get-all-styles-1\"\n    }}>{`Example: Get All Styles`}</h3>\n    <p>{`To view the paragraph styles currently applied to a TextNode, you can access the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#paragraphstyleranges\"\n      }}><inlineCode parentName=\"a\">{`fullContent.paragraphStyleRanges`}</inlineCode></a>{` property. This property returns an array of `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/interfaces/ParagraphStylesRange.md\"\n      }}><inlineCode parentName=\"a\">{`ParagraphStylesRange`}</inlineCode></a>{` objects, each representing the style configuration for a contiguous block of text (i.e. a paragraph).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\n// Retrieve and log the paragraph style ranges\nconst paragraphStyles = contentModel.paragraphStyleRanges;\nconsole.log(\"Paragraph Styles: \", paragraphStyles);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-set-all-styles-1\"\n    }}>{`Example: Set All Styles`}</h3>\n    <p>{`You can also update paragraph styles for the entire text content by modifying the array returned by `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md#paragraphstyleranges\"\n      }}><inlineCode parentName=\"a\">{`paragraphStyleRanges`}</inlineCode></a>{`. In this example, we update the `}<inlineCode parentName=\"p\">{`spaceAfter`}</inlineCode>{` property for all paragraphs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\n// Get the current paragraph style ranges\nconst existingStyles = contentModel.paragraphStyleRanges;\n\n// Update each range (for instance, set spaceAfter to 10 points)\nexistingStyles.forEach((range) => {\n  range.spaceAfter = 10;\n});\n\n// Reassign the modified array to apply the changes\ncontentModel.paragraphStyleRanges = existingStyles;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-reapply-styles-1\"\n    }}>{`Example: Reapply Styles`}</h3>\n    <p>{`When you update the text content, paragraph boundaries may change. To preserve your custom paragraph styles, save the current style ranges, modify the text, and then reapply the saved styles.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame\nconst textNode = editor.context.selection[0];\nconst contentModel = textNode.fullContent;\n\n// Save the current paragraph style ranges\nconst savedParagraphStyles = contentModel.paragraphStyleRanges;\n\n// Replace the text content\ncontentModel.text = \"New text content\\\\nwith updated paragraphs\";\n\n// Reapply the saved paragraph styles\ncontentModel.paragraphStyleRanges = savedParagraphStyles;\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`If the updated text does not match the original paragraph boundaries, some styles may not be reapplied as expected. This is a temporary limitation until automatic preservation of paragraph styles is implemented.`}</p>\n    <h2 {...{\n      \"id\": \"deal-with-text-flow\"\n    }}>{`Deal with Text Flow`}</h2>\n    <p>{`With the introduction of \"Text Flow\" in Adobe Express (allowing content to move freely between multiple text frames), the concept of a text node had to be separated from text content.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`fullContent`}</inlineCode>{` property `}<em parentName=\"p\">{`points to`}</em>{` a `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/document-sandbox/document-apis/classes/TextContentModel.md\"\n      }}><inlineCode parentName=\"a\">{`TextContentModel`}</inlineCode></a>{` object, which contains the actual text content that multiple `}<inlineCode parentName=\"p\">{`TextNode`}</inlineCode>{` instances can share.`}</p>\n    <h3 {...{\n      \"id\": \"example-2\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport { editor } from \"express-document-sdk\";\n\n// Assuming the user has selected a text frame that contains\n// text spanning to multiple text nodes\nconst selectedTextNode = editor.context.selection[0];\n\n// Log all the text nodes that share the same TextContentModel\nfor (const textNode of selectedTextNode.fullContent.allTextNodes) {\n  console.log(textNode);\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","isMDXComponent"],"sourceRoot":""}