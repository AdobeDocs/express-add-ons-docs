"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[2157],{90541:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return i},default:function(){return c}});var a=n(58168),o=n(80045),s=(n(88763),n(15680)),r=n(83407);const d=["components"],i={},m={_frontmatter:i},l=r.A;function c(e){let{components:t}=e,n=(0,o.A)(e,d);return(0,s.mdx)(l,(0,a.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"store-data"},"Store Data"),(0,s.mdx)("h2",{id:"use-the-clientstorage-api"},"Use the clientStorage API"),(0,s.mdx)("p",null,"Instead of relying solely on server-side data, you can use the ",(0,s.mdx)("strong",{parentName:"p"},"asynchronous")," ",(0,s.mdx)("inlineCode",{parentName:"p"},"clientStorage")," API to store and retrieve data locally on the client-side. This can be useful for caching images, saving user preferences, or other scenarios where you want to avoid making repeated server requests."),(0,s.mdx)("p",null,"Each add-on can store up to ",(0,s.mdx)("strong",{parentName:"p"},"10MB of data as key-value pairs"),"; supported values are not limited to strings, but also include objects, arrays, numbers, booleans, ",(0,s.mdx)("inlineCode",{parentName:"p"},"null"),", ",(0,s.mdx)("inlineCode",{parentName:"p"},"undefined")," and ",(0,s.mdx)("inlineCode",{parentName:"p"},"Uint8Array"),"."),(0,s.mdx)("h3",{id:"example"},"Example"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-js"},'import addOnUISdk from "https://express.adobe.com/static/add-on-sdk/sdk.js";\n\nlet store;\n\naddOnUISdk.ready.then(async () => {\n    store = addOnUISdk.instance.clientStorage;\n}\n/**\n * Store item\n */\nasync function setItem(item: string, isComplete: boolean) {\n    await store.setItem(item, isComplete);\n    todoItemInput.value = "";\n}\n/**\n * Log all storage item values\n */\nasync function displayAllItems() {\n    const todoItems = await store.keys();\n    todoItems.forEach(async (item: string) => {\n        const itemValue = await store.getItem(item);\n        console.log("Key: " + item + " value: " + itemValue);\n    });\n}\n')),(0,s.mdx)("h2",{id:"use-cases"},"Use Cases"),(0,s.mdx)("p",null,"Local data storage can be useful in many scenarios, such as when you need to cache data from server requests, store user UI preferences, pre-populate fields on load, or save temporary data. The fact that ",(0,s.mdx)("inlineCode",{parentName:"p"},"clientStorage")," support multiple data types makes it a more versatile tool to use compared to the Browser's ",(0,s.mdx)("inlineCode",{parentName:"p"},"localStorage"),"."),(0,s.mdx)("p",null,"Please, refer to the ",(0,s.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/instance-clientStorage.md"},"SDK Reference section for clientStorage")," for a complete list of methods, and the ",(0,s.mdx)("a",{parentName:"p",href:"../samples.md#use-client-storage"},"use-client-storage sample add-on")," for more details."))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-learn-how-to-local-data-management-md-ad65a5e1687432397f54.js.map