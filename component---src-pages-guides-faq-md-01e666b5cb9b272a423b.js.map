{"version":3,"file":"component---src-pages-guides-faq-md-01e666b5cb9b272a423b.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/faq.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/express-add-ons-docs/express-add-ons-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"faq\"\n    }}>{`FAQ`}</h1>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><em parentName=\"p\">{`How do I run on a different port than the default (ie: 8080 for example)?`}</em></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{` npm run start -- --port 8080\n`}</code></pre>\n      </li>\n    </ol>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><em parentName=\"p\">{`How do I save the state of my add-on?`}</em></p>\n        <p parentName=\"li\">{`  The add-on's state is reset quite frequently (changing panels, changing viewport widths etc), so one may want to save state to `}<a parentName=\"p\" {...{\n            \"href\": \"./3-WritingCode/api-reference.md\"\n          }}>{`ClientStorage`}</a>{` and use that to restore state when the add-on loads. For example, if the user has to navigate into a deep folder hierarchy, they may not want to repeat that again just because they clicked the media panel to add a shape. Or if they are editing a form (e.g., an AI prompt), they may not want to lose that content when they navigated to another panel for a moment. When it makes sense to store a lot of UI state (and when it doesn't) is highly dependent upon the add-on's use case.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><em parentName=\"p\">{`How do I use top level `}<inlineCode parentName=\"em\">{`await`}</inlineCode>{` while using webpack?`}</em></p>\n        <p parentName=\"li\">{`  Set `}<inlineCode parentName=\"p\">{`experiments: { topLevelAwait: true}`}</inlineCode>{` in the webpack config file (otherwise you'll get a build error).`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><em parentName=\"p\">{`How do I setup webpack to copy new files or folders into `}<inlineCode parentName=\"em\">{`dist`}</inlineCode>{`?`}</em></p>\n        <p parentName=\"li\">{`If you add any folders, (like images for example), to your `}<inlineCode parentName=\"p\">{`src`}</inlineCode>{`, you can update the `}<inlineCode parentName=\"p\">{`webpack.config.js`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`CopyWebpackPlugin`}</inlineCode>{` section within to ensure those new resources added are copied into the `}<inlineCode parentName=\"p\">{`dist`}</inlineCode>{` folder. For instance, in the following, the 3rd line was added to ensure any `}<inlineCode parentName=\"p\">{`.jpg`}</inlineCode>{` files in the `}<inlineCode parentName=\"p\">{`src/images`}</inlineCode>{` folder get copied over:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{` new CopyWebpackPlugin({\n    patterns: [\n          { from: \"src/*.json\", to: \"[name][ext]\" },\n          { from: \"src/*.png\", to: \"[name][ext]\" },\n          { from: \"src/images/*.jpg\", to: \"images/[name][ext]\" },\n    ],\n });\n \n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><em parentName=\"p\">{`My form submission doesn't work and console shows error \"Blocked form submission to \" \" because the form's frame is sandboxed and the 'allow-forms' permission is not set.\"`}</em></p>\n        <p parentName=\"li\">{`  You can call `}<inlineCode parentName=\"p\">{`preventDefault`}</inlineCode>{` on the submit event to prevent the browser from trying to complete the full form submission process and avoid this error, such as:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`    <form onSubmit={ evt => {                  \n          evt.preventDefault();\n    }}/>\n`}</code></pre>\n        <p parentName=\"li\">{`  NOTE:\nIf the above does not work for you, you can also handle this by adding click handler to the submit button itself instead, and in that call `}<inlineCode parentName=\"p\">{`event.preventDefault`}</inlineCode>{` on the event, such as:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`    <form onSubmit={(e) => e.preventDefault()}>\n          <input type=\"submit\" value=\"Submit\" onClick={(e) => e.preventDefault()}/>\n    </form>\n`}</code></pre>\n      </li>\n    </ol>\n    <ol {...{\n      \"start\": 6\n    }}>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><em parentName=\"p\">{`How do I enable CORS for a service that blocks my add-on requests due to the `}<inlineCode parentName=\"em\">{`null`}</inlineCode>{` origin?`}</em></p>\n        <p parentName=\"li\">{`  If the service you're consuming is endpoint you can modify the server settings for, you can set the `}<inlineCode parentName=\"p\">{`Access-Control-Allow-Origin`}</inlineCode>{` header to `}<inlineCode parentName=\"p\">{`*`}</inlineCode>{` to allow the requests to pass. If you don't have access to change the headers on the server, you can use a CORS proxy server to bypass this issue while in development. See the `}<a parentName=\"p\" {...{\n            \"href\": \"./7-Troubleshooting/cors.md\"\n          }}>{`CORS Guide`}</a>{` for more details and specific samples of each.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><em parentName=\"p\">{`The `}<inlineCode parentName=\"em\">{`Window.showOpenFilePicker()`}</inlineCode>{` API is not working from within my Add-on.`}</em>{` `}</p>\n        <p parentName=\"li\">{`  You can open the file picker using the `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` element with a `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` set to `}<inlineCode parentName=\"p\">{`file`}</inlineCode>{` to get around this.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><em parentName=\"p\">{`I receive an error when trying to run my add-on: `}<inlineCode parentName=\"em\">{`Error: EISDIR: illegal operation on a directory`}</inlineCode>{`.`}</em></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`  This usually indicates you do not have SSL configured correctly. You can fix it by clearing the configurations from the configuration file. In Windows you'll find this file at \\`C:\\\\Users\\\\{your_username}\\\\AppData\\\\Local\\\\Adobe\\\\CCWebAddOn\\\\add-on-preferences.json\\`, and on MAC, it's at \\`/Users/{user}/Library/Application Support/Adobe/CCWebAddOn\\\\add-on-preferences.json\\`. Once you find it, delete the two properties defined for \\`sslCertPath\\` and \\`sslKeyPath\\` there. After they've been deleted, you can run the commands to create a new add-on where you will be prompted to set up SSL again and then be sure to specify the correct paths to your certificate and key file. \n`}</code></pre>\n        <blockquote parentName=\"li\">\n        </blockquote>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><em parentName=\"p\">{`I receive a `}<inlineCode parentName=\"em\">{`MANIFEST_NOT_FOUND_ERROR`}</inlineCode>{` during the package verification when trying to upload my plugin package for distribution.`}</em></p>\n        <p parentName=\"li\">{`  Instead of zipping the folder containing the add-on files, please zip only the contents. In other words, manifest file should be at `}<strong parentName=\"p\">{`root`}</strong>{` level of the extracted package.`}</p>\n      </li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}