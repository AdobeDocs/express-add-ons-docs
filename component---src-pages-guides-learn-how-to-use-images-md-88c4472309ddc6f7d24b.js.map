{"version":3,"file":"component---src-pages-guides-learn-how-to-use-images-md-88c4472309ddc6f7d24b.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/guides/learn/how_to/use_images.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/github/workspace/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"use-images\"\n    }}>{`Use Images`}</h1>\n    <h2 {...{\n      \"id\": \"import-images-into-the-page\"\n    }}>{`Import Images into the page`}</h2>\n    <p>{`Add-ons are hosted in an iframe within the Adobe Express UI, and can load images as `}<inlineCode parentName=\"p\">{`<img>`}</inlineCode>{` elements like any other web application. But in order to add images into an Adobe Express document, you need to use the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#addimage\"\n      }}><inlineCode parentName=\"a\">{`addImage()`}</inlineCode></a>{` method of the `}<inlineCode parentName=\"p\">{`addOnUISdk.app.document`}</inlineCode>{` object.`}</p>\n    <p>{`It expects a `}<inlineCode parentName=\"p\">{`Blob`}</inlineCode>{` object as the first argument, and an optional `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#mediaattributes\"\n      }}><inlineCode parentName=\"a\">{`MediaAttribute`}</inlineCode></a>{` object with the image's title and author.`}</p>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(async () => {\n  try {\n    const imageUrl = \"https://placehold.co/600x400.png\";\n    const image = await fetch(imageUrl);\n    const imageBlob = await image.blob();\n\n    await addOnUISdk.app.document.addImage(\n      imageBlob, // ðŸ‘ˆ Blob object\n      {\n        title: \"Placeholder image\", // ðŸ‘ˆ Optional MediaAttributes\n        author: \"Adobe Developer\",\n      }\n    );\n  } catch (e) {\n    console.error(\"Failed to add the image\", e);\n  }\n});\n`}</code></pre>\n    <p>{`Please note that you can use `}<inlineCode parentName=\"p\">{`fetch()`}</inlineCode>{` also to get images that are local to the add-on; in this case, you can use paths relative to the add-on's root.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(async () => {\n  try {\n    const imageUrl = \"./600x400.png\";     // ðŸ‘ˆ Local image\n    const image = await fetch(imageUrl);\n    // ... same as before\n`}</code></pre>\n    <InlineAlert slots=\"header, text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`Image requirements`}</p>\n    <p>{`Please refer to `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#image-requirements\"\n      }}>{`this section`}</a>{` to know more about the file formats support and size requirements for images.`}</p>\n    <h2 {...{\n      \"id\": \"import-animated-images\"\n    }}>{`Import Animated images`}</h2>\n    <p>{`Importing a `}<inlineCode parentName=\"p\">{`GIF`}</inlineCode>{` via `}<inlineCode parentName=\"p\">{`addImage()`}</inlineCode>{` won't work as expected, as the method converts the animation into a static image before adding it to the document. You should use the `}<a parentName=\"p\" {...{\n        \"href\": \"../../../references/addonsdk/app-document.md#addanimatedimage\"\n      }}><inlineCode parentName=\"a\">{`addAnimatedImage()`}</inlineCode></a>{` method instead.`}</p>\n    <h3 {...{\n      \"id\": \"example-1\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// sandbox/code.js\nimport addOnUISdk from \"https://express.adobe.com/static/add-on-sdk/sdk.js\";\n\naddOnUISdk.ready.then(async () => {\n  try {\n    const gifImageUrl = \"https://path/to/a/file.gif\"; // ðŸ‘ˆ a GIF image\n    const gifImage = await fetch(gifImageUrl);\n    const gifImageBlob = await gifImage.blob();\n\n    await addOnUISdk.app.document.addAnimatedImage(\n      // ðŸ‘ˆ\n      gifImageBlob, // ðŸ‘ˆ Blob object\n      {\n        /* ... */\n      } // ðŸ‘ˆ Optional MediaAttributes\n    );\n  } catch (e) {\n    console.error(\"Failed to add the image\", e);\n  }\n});\n`}</code></pre>\n    <InlineAlert slots=\"header, text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`GIF Image requirements`}</p>\n    <p>{`All image formats are equal, but some formats are more equal than others. Please refer to `}<a parentName=\"p\" {...{\n        \"href\": \"../../support/faq.md#are-animated-gifs-supported-when-importing-or-dragging-content-to-the-document\"\n      }}>{`this FAQ`}</a>{` to learn more about specific GIF limitations in terms of size and weight.`}</p>\n    <h2 {...{\n      \"id\": \"faqs\"\n    }}>{`FAQs`}</h2>\n    <h4 {...{\n      \"id\": \"q-how-do-i-add-images-to-a-document\"\n    }}>{`Q: How do I add images to a document?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Call `}<inlineCode parentName=\"p\">{`addOnUISdk.app.document.addImage(blob, attributes)`}</inlineCode>{` with image blob and optional MediaAttribute.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-parameters-does-addimage-require\"\n    }}>{`Q: What parameters does addImage require?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` A Blob object is required, MediaAttribute with title and author is optional.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-get-an-image-as-a-blob\"\n    }}>{`Q: How do I get an image as a blob?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`fetch(imageUrl).then(r => r.blob())`}</inlineCode>{` to convert images to blob format.`}</p>\n    <h4 {...{\n      \"id\": \"q-can-i-use-local-image-files\"\n    }}>{`Q: Can I use local image files?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Yes, use relative paths from add-on root with fetch() to load local images.`}</p>\n    <h4 {...{\n      \"id\": \"q-how-do-i-add-animated-gifs\"\n    }}>{`Q: How do I add animated GIFs?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Use `}<inlineCode parentName=\"p\">{`addOnUISdk.app.document.addAnimatedImage(blob, attributes)`}</inlineCode>{` instead of addImage().`}</p>\n    <h4 {...{\n      \"id\": \"q-why-doesnt-addimage-work-with-gifs\"\n    }}>{`Q: Why doesn't addImage work with GIFs?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` addImage() converts animations to static images; use addAnimatedImage() to preserve animation.`}</p>\n    <h4 {...{\n      \"id\": \"q-what-image-formats-are-supported\"\n    }}>{`Q: What image formats are supported?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` AI, GIF, JPEG, JPG, PNG, PSD, PSDT, and WEBP. 8000px or 80MB.`}</p>\n    <h4 {...{\n      \"id\": \"q-are-there-gif-size-limitations\"\n    }}>{`Q: Are there GIF size limitations?`}</h4>\n    <p><strong parentName=\"p\">{`A:`}</strong>{` Yes, refer to the FAQ section for specific GIF size and weight limitations.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","isMDXComponent"],"sourceRoot":""}