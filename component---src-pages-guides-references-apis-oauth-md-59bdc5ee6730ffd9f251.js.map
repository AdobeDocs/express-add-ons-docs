{"version":3,"file":"component---src-pages-guides-references-apis-oauth-md-59bdc5ee6730ffd9f251.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,CAAC,EACKI,EAAYN,EAAc,aAC1BO,EAAcP,EAAc,eAC5BQ,EAAc,CAClBT,aAAAA,GAEIU,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGX,GAAKY,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOV,EAAAA,EAAAA,KAACI,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBN,EAAK,CAAEW,WAAYA,EAAYI,QAAQ,eAG5EZ,EAAAA,EAAAA,KAAA,MACE,GAAM,SAAO,UAEfA,EAAAA,EAAAA,KAAA,sHAAgHA,EAAAA,EAAAA,KAAA,KAAGa,WAAW,IAC1H,KAAQ,0EAAwE,+BAC5C,kDACxCb,EAAAA,EAAAA,KAAA,2MACiBA,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,iBAA2B,iBAAiBb,EAAAA,EAAAA,KAAA,KAAGa,WAAW,IAC7F,KAAQ,4DAA0D,8DAEtEb,EAAAA,EAAAA,KAAA,sEAAgEA,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,aAAuB,OAAOb,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,kBAA4B,OAAOb,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,mBAA6B,qJAC9Ib,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAG,iBAA+B,WAC3Ib,EAAAA,EAAAA,KAAA,+IAC2DA,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAG,6BAA2C,SAASb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAG,mBAAiC,WAAWb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAG,iBAA+B,0CACxQb,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,iBAAe,khBAwBhCb,EAAAA,EAAAA,KAAA,6HACAA,EAAAA,EAAAA,KAACC,EAAS,CAACa,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,aAAaJ,QAAQ,eAC3EZ,EAAAA,EAAAA,KAAA,MACE,GAAM,aAAW,cAEnBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eAAa,yzHAsH9Bb,EAAAA,EAAAA,KAAA,MACE,GAAM,WAAS,YAEjBA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eAAa,oqGAmF9Bb,EAAAA,EAAAA,KAACE,EAAW,CAACY,MAAM,OAAOG,QAAQ,UAAUL,QAAQ,iBACpDZ,EAAAA,EAAAA,KAAA,0HAAoHA,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,6BAAuC,SAASb,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,WAAqB,kCAGzO,CAEAP,EAAWY,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/references/apis/oauth.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/express-add-ons-docs/express-add-ons-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"oauth\"\n    }}>{`OAuth`}</h1>\n    <p>{`The OAuth APIs can be used to obtain the authorization \"code\" from any OAuth 2.0 provider supporting the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.oauth.com/oauth2-servers/pkce/authorization-code-exchange/\"\n      }}>{`Code Exchange authorization`}</a>{` workflow. Here are the steps to get started:`}</p>\n    <p>{`Log in to the OAuth provider's website and create an application. This must be a web application, and if an option of SPA (Single Page Application) is listed, select it.\nAs an input to the `}<strong parentName=\"p\">{`Redirect URIs`}</strong>{` field, add: `}<a parentName=\"p\" {...{\n        \"href\": \"https://new.express.adobe.com/static/oauth-redirect.html\"\n      }}>{`https://new.express.adobe.com/static/oauth-redirect.html`}</a></p>\n    <p>{`Fill out other details as necessary and save the form. A `}<strong parentName=\"p\">{`Client Id`}</strong>{` / `}<strong parentName=\"p\">{`Application Id`}</strong>{` / `}<strong parentName=\"p\">{`Application Key`}</strong>{` (varies between different OAuth providers) gets generated.\nNext you need to add the host name of the OAuth provider's authorization URL to the `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{` file.`}</p>\n    <p>{`When using multiple providers, all such hostnames must be provided.\nFor example, if the add-on uses two OAuth providers (such as `}<inlineCode parentName=\"p\">{`login.microsoftonline.com`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`www.dropbox.com`}</inlineCode>{`), its `}<inlineCode parentName=\"p\">{`manifest.json`}</inlineCode>{` should be updated according to this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"id\": \"<ADD_ON_ID>\",\n    \"name\": \"<ADD_ON_NAME>\",\n    \"version\": \"1.0.0\",\n    \"manifestVersion\": 1,\n    \"requirements\": {\n        \"apps\": [\"Express\"]\n    },\n    \"entryPoints\": [\n        {\n            \"type\": \"panel\",\n            \"id\": \"panel1\",\n            \"label\": {\n                \"default\": \"<ADD_ON_LABEL>\"\n            },\n            \"main\": \"index.html\",\n            \"permissions\": {\n                \"oauth\": [\"login.microsoftonline.com\", \"www.dropbox.com\"]\n            }\n        }\n    ]\n}\n`}</code></pre>\n    <p>{`Now the setup is complete and the OAuth APIs can be used by following the contract and usage as detailed below:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"interface\"\n    }}>{`Interface`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`interface Application {\n    /**\n     * OAuth 2.0 middleware for handling user authorization.\n     */\n    readonly oauth: OAuth;\n}\n\nexport interface OAuth {\n    /**\n     * Authorize a user using OAuth 2.0 PKCE workflow.\n     * @param request - {@link AuthorizationRequest} Payload with parameters to be used in the authorization workflow.\n     * @returns - {@link AuthorizationResponse} Response containing a ONE-TIME Authorization Code which can be used to obtain an access token.\n     */\n    authorize(request: AuthorizationRequest): Promise<AuthorizationResponse>;\n\n    /**\n     * Initiate the OAuth 2.0 PKCE authorization workflow by opening the user sign-in window.\n     * Post authorization the user is redirected to the Add-on developer provided URL.\n     * @param request - {@link AuthorizeWithOwnRedirectRequest} Payload with parameters to be used in the authorization workflow.\n     * @returns - {@link AuthorizationResult} Authorization result.\n     */\n    authorizeWithOwnRedirect(request: AuthorizeWithOwnRedirectRequest): Promise<AuthorizationResult>;\n}\n\nexport type AuthorizationRequest = {\n    /**\n     * OAuth provider's authorization URL.\n     */\n    authorizationUrl: string;\n\n    /**\n     * Client identifier of the application created at the OAuth provider.\n     */\n    clientId: string;\n\n    /**\n     * Code challenge used in Authorization Code Exchange.\n     */\n    codeChallenge: string;\n\n    /**\n     * Scope to control the application's access.\n     */\n    scope: string;\n\n    /**\n     * Additional parameters, specific to an OAuth provider which\n     * are required in the Authorization URL as query string parameters.\n     */\n    additionalParameters?: Map<string, string>;\n};\n\nexport type AuthorizeWithOwnRedirectRequest = AuthorizationRequest & {\n    /**\n     * URL where the user is redirected to after successful or failed authorization.\n     * Hosting and handling redirects to this URL should be managed by the caller.\n     */\n    redirectUri: string;\n\n    /**\n     * A value which is preserved in the authorization request,\n     * and replayed back as a query string parameter in the redirectUri.\n     * Although the primary reason for using the state parameter is to mitigate CSRF attacks,\n     * it can also be used to encode any other information.\n     */\n    state: string;\n};\n\nexport type AuthorizationResponse = {\n    /**\n     * Unique identifier for the authorization request.\n     */\n    id: string;\n\n    /**\n     * OAuth 2.0 generated authorization code which can be used\n     * ONCE to obtain an access token and a refresh token.\n     */\n    code: string;\n\n    /**\n     * URL where the user is redirected to after authorization.\n     * This is the default URL owned by Adobe and\n     * it is this URL which needs to be used to obtain access_token.\n     */\n    redirectUri: string;\n\n    /**\n     * Authorization result which denotes either success or failure,\n     * represented by {@link AuthorizationResult}.\n     */\n    result: AuthorizationResult;\n};\n\nexport type AuthorizationResult = {\n    /**\n     * Status representing success or failure in the authorization workflow.\n     */\n    status: AuthorizationStatus;\n\n    /**\n     * Description about the success or failure in the authorization workflow.\n     * In the event of a FAILED status reported by the OAuth provider during authorization,\n     * the value of this property is an object, in the form of \\\\{ [failure_title]: \\\\\"failure_description\\\\\" \\\\}\n     * While for all other statuses the value of this property is a string.\n     */\n    description: string | object;\n};\n\nexport enum AuthorizationStatus {\n    SUCCESS = \"SUCCESS\",\n    POPUP_OPENED = \"POPUP_OPENED\",\n    POPUP_BLOCKED = \"POPUP_BLOCKED\",  \n    POPUP_TIMEOUT = \"POPUP_TIMEOUT\",  \n    FAILED = \"FAILED\"\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import AddOnSdk from \"https://new.express.adobe.com/static/add-on-sdk/sdk.js\";\n \nconst DROPBOX_AUTHORIZATION_URL = \"https://www.dropbox.com/oauth2/authorize\";\nconst DROPBOX_TOKEN_URL = \"https://api.dropboxapi.com/oauth2/token\";\nconst DROPBOX_CLIENT_ID = \"<DROPBOX_CLIENT_ID>\";\nconst DROPBOX_SCOPE = \"<DROPBOX_SPACE_SEPARATED_SCOPES>\";\n \nconst ONEDRIVE_AUTHORIZATION_URL = \"https://login.microsoftonline.com/<AZURE_AD_TENANT_ID>/oauth2/v2.0/authorize\";\nconst ONEDRIVE_TOKEN_URL = \"https://login.microsoftonline.com/<AZURE_AD_TENANT_ID>/oauth2/v2.0/token\";\nconst ONEDRIVE_CLIENT_ID = \"<ONEDRIVE_CLIENT_ID>\";\nconst ONEDRIVE_SCOPE = \"<ONEDRIVE_SPACE_SEPARATED_SCOPES>\";\nconst OWN_REDIRECT_URI = \"<OWN_REDIRECT_URI>\";\n \nAddOnSdk.ready.then(() => {\n    // 'oauthUtils' is a helper javascript module (included with the OAuth template) which provides utility functions to:\n    // 1. generateChallenge()     Generate the 'code_challenge' and 'code_verifier' parameters that are essential in the OAuth 2.0 workflow.\n    // 2. generateAccessToken()   Generate an 'access_token' and a 'refresh_token' using the 'code' and 'redirectUri' received on successful authorization.\n    // 3. getAccessToken()        Get an always valid 'access_token'.\n     \n    const challenge = await oauthUtils.generateChallenge();\n     \n    await authorize(challenge);\n     \n    await authorizeWithOwnRedirect(challenge);\n});\n \nfunction authorize(challenge) {\n    const { id, code, redirectUri, result } = await oauth.authorize({\n        authorizationUrl: DROPBOX_AUTHORIZATION_URL,\n        clientId: DROPBOX_CLIENT_ID,\n        scope: DROPBOX_SCOPE,\n        codeChallenge: challenge.codeChallenge\n    });\n \n    const { status, description } = result;\n    if (status !== \"SUCCESS\") {\n        throw new Error(\\`Status: \\${status} | Description: \\${description}\\`);\n    }\n \n    await oauthUtils.generateAccessToken({\n        id,\n        clientId: DROPBOX_CLIENT_ID,\n        codeVerifier: challenge.codeVerifier,\n        code,\n        tokenUrl: DROPBOX_TOKEN_URL,\n        redirectUri\n    });\n \n    const accessToken = await oauthUtils.getAccessToken(id);\n}\n \nfunction authorizeWithOwnRedirect(challenge) {\n    const result = await oauth.authorizeWithOwnRedirect({\n        authorizationUrl: ONEDRIVE_AUTHORIZATION_URL,\n        clientId: ONEDRIVE_CLIENT_ID,\n        scope: ONEDRIVE_SCOPE,\n        codeChallenge: challenge.codeChallenge,\n        redirectUri: OWN_REDIRECT_URI,\n        state: <ANY_STRING_THAT_WILL_BE_REPLAYED_AT_REDIRECT>\n    });\n \n    const { status, description } = result;\n    if (status !== \"POPUP_OPENED\") {\n        throw new Error(\\`Status: \\${status} | Description: \\${description}\\`);\n    }\n \n    // Handle post-redirection after successful authorization\n    // and retrieve the authorization \"code\" for generating access_token.\n \n    const id = <ANY_UNIQUE_STRING>;\n    await oauthUtils.generateAccessToken({\n        id,\n        clientId: ONEDRIVE_CLIENT_ID,\n        codeVerifier: challenge.codeVerifier,\n        code,\n        tokenUrl: ONEDRIVE_TOKEN_URL,\n        OWN_REDIRECT_URI\n    });\n \n    const accessToken = await oauthUtils.getAccessToken(id);\n}\n`}</code></pre>\n    <InlineAlert slots=\"text\" variant=\"success\" mdxType=\"InlineAlert\" />\n    <p>{`We have provided two samples that can be used as a reference for implementing the OAuth APIs. Please see the `}<strong parentName=\"p\">{`import-images-using-oauth`}</strong>{` and `}<strong parentName=\"p\">{`Dropbox`}</strong>{` samples for specific details.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","CodeBlock","InlineAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","_extends","mdxType","parentName","slots","repeat","languages","variant","isMDXComponent"],"sourceRoot":""}