{"version":3,"file":"component---src-pages-guides-develop-index-md-f783a8f907d85084d604.js","mappings":"2OAOsBA,E,wEADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAIY,cAJJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5BM,EAAAA,EAAAA,KAAA,MAASH,EAClB,GAEMI,EAAc,CAClBN,aAAAA,GAEIO,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGT,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,KAACE,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBJ,EAAK,CAAES,WAAYA,EAAYI,QAAQ,eAG5EV,EAAAA,EAAAA,KAAA,MACE,GAAM,cAAY,eAEpBA,EAAAA,EAAAA,KAAA,MACE,GAAM,qBAAmB,sBAE3BA,EAAAA,EAAAA,KAAA,iNACAA,EAAAA,EAAAA,KAACJ,EAAW,CAACe,MAAM,OAAOC,QAAQ,UAAUF,QAAQ,iBACpDV,EAAAA,EAAAA,KAAA,iEAA2DA,EAAAA,EAAAA,KAAA,UAAQa,WAAW,MAAIb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,UAAQ,gBAAsC,0DAA0Db,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,WAAqB,QAAQb,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,SAAmB,MAC7Sb,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eAAa,2kBAuB9Bb,EAAAA,EAAAA,KAAA,MACE,GAAM,qBAAmB,sBAE3BA,EAAAA,EAAAA,KAAA,wDAAkDA,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,OAAiB,MAAMb,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,OAAiB,MAAMb,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,OAAiB,SAASb,EAAAA,EAAAA,KAAA,UAAQa,WAAW,KAAG,OAAiB,4GAA4Gb,EAAAA,EAAAA,KAAA,cAAYa,WAAW,KAAG,oBAAkC,sCAC3Yb,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMa,WAAW,MAClB,UAAa,eAAa,0JAO9Bb,EAAAA,EAAAA,KAAA,MACE,GAAM,gCAA8B,kCAEtCA,EAAAA,EAAAA,KAAA,MACE,GAAM,cAAY,eAEpBA,EAAAA,EAAAA,KAAA,MACE,GAAM,iBAAe,kBAEvBA,EAAAA,EAAAA,KAAA,MACE,GAAM,uBAAqB,wBAE7BA,EAAAA,EAAAA,KAAA,MACE,GAAM,2BAAyB,2BAIrC,CAEAI,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/develop/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/express-add-ons-docs/express-add-ons-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"using-sdks\"\n    }}>{`Using SDKs`}</h1>\n    <h2 {...{\n      \"id\": \"importing-content\"\n    }}>{`Importing Content`}</h2>\n    <p>{`APIs are available for importing images and videos to your document, for instance after you've connected to a 3rd party service via OAuth and want to allow the user to use the images retrieved.  `}</p>\n    <InlineAlert slots=\"text\" variant=\"warning\" mdxType=\"InlineAlert\" />\n    <p>{`Please note, the supported file types are currently `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`png/jpg/mp4`}</inlineCode></strong>{`. and the size of the imported images must not exceed `}<strong parentName=\"p\">{`8000 px`}</strong>{` or `}<strong parentName=\"p\">{`40 MB`}</strong>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Reference to the active document\nconst { document } = AddOnSDKAPI.app;\n\n// Add image via blob to the current page\nasync function addImageFromBlob(blob) {\n  try {\n    await document.addImage(blob);\n  } catch (error) {\n    console.log(\"Failed to add the image to the Page.\");\n  }\n}\n\n// Add image via url to the current page\nasync function addImageFromURL(url) {\n  try {\n    const blob = await fetch(url).then((response) => response.blob());\n    await document.addImage(blob);\n  } catch (error) {\n    console.log(\"Failed to add the image to the Page.\");\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"exporting-content\"\n    }}>{`Exporting Content`}</h2>\n    <p>{`Export renditions of a page or document in `}<strong parentName=\"p\">{`jpg`}</strong>{`, `}<strong parentName=\"p\">{`png`}</strong>{`, `}<strong parentName=\"p\">{`pdf`}</strong>{` and `}<strong parentName=\"p\">{`mp4`}</strong>{` formats. Specify a range and format to define exactly what you want to export, and pass them in to the `}<inlineCode parentName=\"p\">{`createRenditions`}</inlineCode>{` API to generate your renditions.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const preview = await AddOnSDKAPI.app.document.createRenditions({\n    range: range,\n    format: \"image/jpeg\",\n});\nexportUtils.addImg(preview);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"authenticating-with-oauth-20\"\n    }}>{`Authenticating with OAuth 2.0`}</h2>\n    <h2 {...{\n      \"id\": \"using-data\"\n    }}>{`Using Data`}</h2>\n    <h2 {...{\n      \"id\": \"drag-and-drop\"\n    }}>{`Drag and Drop`}</h2>\n    <h2 {...{\n      \"id\": \"theming-your-add-on\"\n    }}>{`Theming your add-on`}</h2>\n    <h2 {...{\n      \"id\": \"locale-and-localization\"\n    }}>{`Locale and Localization`}</h2>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","_extends","mdxType","slots","variant","parentName","isMDXComponent"],"sourceRoot":""}