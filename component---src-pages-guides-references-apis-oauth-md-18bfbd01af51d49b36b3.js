"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[6531],{32276:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return d},default:function(){return m}});var o=t(87462),i=t(63366),a=(t(15007),t(64983)),r=t(91515),s=["components"],d={},h=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.mdx)("div",n)}},u=h("CodeBlock"),c=h("InlineAlert"),l={_frontmatter:d},p=r.Z;function m(e){var n=e.components,t=(0,i.Z)(e,s);return(0,a.mdx)(p,(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"oauth"},"OAuth"),(0,a.mdx)("h2",{id:"overview"},"Overview"),(0,a.mdx)("p",null,'The OAuth APIs can be used to obtain the authorization "code" from any OAuth 2.0 provider supporting the ',(0,a.mdx)("a",{parentName:"p",href:"https://www.oauth.com/oauth2-servers/pkce/authorization-code-exchange/"},"Code Exchange authorization")," workflow. Here are the steps to get started:"),(0,a.mdx)("p",null,"Log in to the OAuth provider's website and create an application. This must be a web application, and if an option of SPA (Single Page Application) is listed, select it.\nAs an input to the ",(0,a.mdx)("strong",{parentName:"p"},"Redirect URIs")," field, add: ",(0,a.mdx)("a",{parentName:"p",href:"https://new.express.adobe.com/static/oauth-redirect.html"},"https://new.express.adobe.com/static/oauth-redirect.html")),(0,a.mdx)("p",null,"Fill out other details as necessary and save the form. A ",(0,a.mdx)("strong",{parentName:"p"},"Client Id")," / ",(0,a.mdx)("strong",{parentName:"p"},"Application Id")," / ",(0,a.mdx)("strong",{parentName:"p"},"Application Key")," (varies between different OAuth providers) gets generated.\nNext you need to add the host name of the OAuth provider's authorization URL to the ",(0,a.mdx)("inlineCode",{parentName:"p"},"manifest.json")," file."),(0,a.mdx)("p",null,"When using multiple providers, all hostnames must be provided. For example, if the add-on uses two OAuth providers (such as ",(0,a.mdx)("inlineCode",{parentName:"p"},"login.microsoftonline.com")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"www.dropbox.com"),"), its ",(0,a.mdx)("inlineCode",{parentName:"p"},"manifest.json")," should be updated according to this:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-json"},'{\n    "id": "<ADD_ON_ID>",\n    "name": "<ADD_ON_NAME>",\n    "version": "1.0.0",\n    "manifestVersion": 1,\n    "requirements": {\n        "apps": ["Express"]\n    },\n    "entryPoints": [\n        {\n            "type": "panel",\n            "id": "panel1",\n            "label": {\n                "default": "<ADD_ON_LABEL>"\n            },\n            "main": "index.html",\n            "permissions": {\n                "oauth": ["login.microsoftonline.com", "www.dropbox.com"]\n            }\n        }\n    ]\n}\n')),(0,a.mdx)("p",null,"Now the setup is complete and the OAuth APIs can be used by following the contract and usage as detailed below:"),(0,a.mdx)(u,{slots:"heading, code",repeat:"2",languages:"JavaScript",mdxType:"CodeBlock"}),(0,a.mdx)("h3",{id:"interface"},"Interface"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-js"},'interface Application {\n    /**\n     * OAuth 2.0 middleware for handling user authorization.\n     */\n    readonly oauth: OAuth;\n}\n\nexport interface OAuth {\n    /**\n     * Authorize a user using OAuth 2.0 PKCE workflow.\n     * @param request - {@link AuthorizationRequest} Payload with parameters to be used in the authorization workflow.\n     * @returns - {@link AuthorizationResponse} Response containing a ONE-TIME Authorization Code which can be used to obtain an access token.\n     */\n    authorize(request: AuthorizationRequest): Promise<AuthorizationResponse>;\n\n    /**\n     * Initiate the OAuth 2.0 PKCE authorization workflow by opening the user sign-in window.\n     * Post authorization the user is redirected to the Add-on developer provided URL.\n     * @param request - {@link AuthorizeWithOwnRedirectRequest} Payload with parameters to be used in the authorization workflow.\n     * @returns - {@link AuthorizationResult} Authorization result.\n     */\n    authorizeWithOwnRedirect(request: AuthorizeWithOwnRedirectRequest): Promise<AuthorizationResult>;\n}\n\nexport type AuthorizationRequest = {\n    /**\n     * OAuth provider\'s authorization URL.\n     */\n    authorizationUrl: string;\n\n    /**\n     * Client identifier of the application created at the OAuth provider.\n     */\n    clientId: string;\n\n    /**\n     * Code challenge used in Authorization Code Exchange.\n     */\n    codeChallenge: string;\n\n    /**\n     * Scope to control the application\'s access.\n     */\n    scope: string;\n\n    /**\n     * Additional parameters, specific to an OAuth provider which\n     * are required in the Authorization URL as query string parameters.\n     */\n    additionalParameters?: Map<string, string>;\n};\n\nexport type AuthorizeWithOwnRedirectRequest = AuthorizationRequest & {\n    /**\n     * URL where the user is redirected to after successful or failed authorization.\n     * Hosting and handling redirects to this URL should be managed by the caller.\n     */\n    redirectUri: string;\n\n    /**\n     * A value which is preserved in the authorization request,\n     * and replayed back as a query string parameter in the redirectUri.\n     * Although the primary reason for using the state parameter is to mitigate CSRF attacks,\n     * it can also be used to encode any other information.\n     */\n    state: string;\n};\n\nexport type AuthorizationResponse = {\n    /**\n     * Unique identifier for the authorization request.\n     */\n    id: string;\n\n    /**\n     * OAuth 2.0 generated authorization code which can be used\n     * ONCE to obtain an access token and a refresh token.\n     */\n    code: string;\n\n    /**\n     * URL where the user is redirected to after authorization.\n     * This is the default URL owned by Adobe and\n     * it is this URL which needs to be used to obtain access_token.\n     */\n    redirectUri: string;\n\n    /**\n     * Authorization result which denotes either success or failure,\n     * represented by {@link AuthorizationResult}.\n     */\n    result: AuthorizationResult;\n};\n\nexport type AuthorizationResult = {\n    /**\n     * Status representing success or failure in the authorization workflow.\n     */\n    status: AuthorizationStatus;\n\n    /**\n     * Description about the success or failure in the authorization workflow.\n     * In the event of a FAILED status reported by the OAuth provider during authorization,\n     * the value of this property is an object, in the form of \\{ [failure_title]: \\"failure_description\\" \\}\n     * While for all other statuses the value of this property is a string.\n     */\n    description: string | object;\n};\n\nexport enum AuthorizationStatus {\n    SUCCESS = "SUCCESS",\n    POPUP_OPENED = "POPUP_OPENED",\n    POPUP_BLOCKED = "POPUP_BLOCKED",  \n    POPUP_TIMEOUT = "POPUP_TIMEOUT",  \n    FAILED = "FAILED"\n}\n')),(0,a.mdx)("h3",{id:"example"},"Example"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-js"},'import AddOnSdk from "https://new.express.adobe.com/static/add-on-sdk/sdk.js";\n \nconst DROPBOX_AUTHORIZATION_URL = "https://www.dropbox.com/oauth2/authorize";\nconst DROPBOX_TOKEN_URL = "https://api.dropboxapi.com/oauth2/token";\nconst DROPBOX_CLIENT_ID = "<DROPBOX_CLIENT_ID>";\nconst DROPBOX_SCOPE = "<DROPBOX_SPACE_SEPARATED_SCOPES>";\n \nconst ONEDRIVE_AUTHORIZATION_URL = "https://login.microsoftonline.com/<AZURE_AD_TENANT_ID>/oauth2/v2.0/authorize";\nconst ONEDRIVE_TOKEN_URL = "https://login.microsoftonline.com/<AZURE_AD_TENANT_ID>/oauth2/v2.0/token";\nconst ONEDRIVE_CLIENT_ID = "<ONEDRIVE_CLIENT_ID>";\nconst ONEDRIVE_SCOPE = "<ONEDRIVE_SPACE_SEPARATED_SCOPES>";\nconst OWN_REDIRECT_URI = "<OWN_REDIRECT_URI>";\n \nAddOnSdk.ready.then(() => {\n    // \'oauthUtils\' is a helper javascript module (included with the OAuth template) which provides utility functions to:\n    // 1. generateChallenge()     Generate the \'code_challenge\' and \'code_verifier\' parameters that are essential in the OAuth 2.0 workflow.\n    // 2. generateAccessToken()   Generate an \'access_token\' and a \'refresh_token\' using the \'code\' and \'redirectUri\' received on successful authorization.\n    // 3. getAccessToken()        Get an always valid \'access_token\'.\n     \n    const challenge = await oauthUtils.generateChallenge();\n     \n    await authorize(challenge);\n     \n    await authorizeWithOwnRedirect(challenge);\n});\n \nfunction authorize(challenge) {\n    const { id, code, redirectUri, result } = await oauth.authorize({\n        authorizationUrl: DROPBOX_AUTHORIZATION_URL,\n        clientId: DROPBOX_CLIENT_ID,\n        scope: DROPBOX_SCOPE,\n        codeChallenge: challenge.codeChallenge\n    });\n \n    const { status, description } = result;\n    if (status !== "SUCCESS") {\n        throw new Error(`Status: ${status} | Description: ${description}`);\n    }\n \n    await oauthUtils.generateAccessToken({\n        id,\n        clientId: DROPBOX_CLIENT_ID,\n        codeVerifier: challenge.codeVerifier,\n        code,\n        tokenUrl: DROPBOX_TOKEN_URL,\n        redirectUri\n    });\n \n    const accessToken = await oauthUtils.getAccessToken(id);\n}\n \nfunction authorizeWithOwnRedirect(challenge) {\n    const result = await oauth.authorizeWithOwnRedirect({\n        authorizationUrl: ONEDRIVE_AUTHORIZATION_URL,\n        clientId: ONEDRIVE_CLIENT_ID,\n        scope: ONEDRIVE_SCOPE,\n        codeChallenge: challenge.codeChallenge,\n        redirectUri: OWN_REDIRECT_URI,\n        state: <ANY_STRING_THAT_WILL_BE_REPLAYED_AT_REDIRECT>\n    });\n \n    const { status, description } = result;\n    if (status !== "POPUP_OPENED") {\n        throw new Error(`Status: ${status} | Description: ${description}`);\n    }\n \n    // Handle post-redirection after successful authorization\n    // and retrieve the authorization "code" for generating access_token.\n \n    const id = <ANY_UNIQUE_STRING>;\n    await oauthUtils.generateAccessToken({\n        id,\n        clientId: ONEDRIVE_CLIENT_ID,\n        codeVerifier: challenge.codeVerifier,\n        code,\n        tokenUrl: ONEDRIVE_TOKEN_URL,\n        OWN_REDIRECT_URI\n    });\n \n    const accessToken = await oauthUtils.getAccessToken(id);\n}\n')),(0,a.mdx)(c,{slots:"text",variant:"success",mdxType:"InlineAlert"}),(0,a.mdx)("p",null,"We have provided two samples that can be used as a reference for implementing the OAuth APIs. Please see the ",(0,a.mdx)("strong",{parentName:"p"},"import-images-using-oauth")," and ",(0,a.mdx)("strong",{parentName:"p"},"Dropbox")," samples for specific details."))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-references-apis-oauth-md-18bfbd01af51d49b36b3.js.map