"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[421],{77193:function(e,a,n){n.r(a),n.d(a,{_frontmatter:function(){return r},default:function(){return g}});var t=n(58168),d=n(80045),o=(n(88763),n(15680)),i=n(83407);const m=["components"],r={},s=e=>function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",a)},l=s("InlineAlert"),p=s("CodeBlock"),c={_frontmatter:r},u=i.A;function g(e){let{components:a}=e,n=(0,d.A)(e,m);return(0,o.mdx)(u,(0,t.A)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"use-images"},"Use Images"),(0,o.mdx)("h2",{id:"import-images-into-the-page"},"Import Images into the page"),(0,o.mdx)("p",null,"Add-ons are hosted in an iframe within the Adobe Express UI, and can load images as ",(0,o.mdx)("inlineCode",{parentName:"p"},"<img>")," elements like any other web application. But in order to add images into an Adobe Express document, you need to use the ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/app-document.md#addimage"},(0,o.mdx)("inlineCode",{parentName:"a"},"addImage()"))," method of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"addOnUISdk.app.document")," object."),(0,o.mdx)("p",null,"It expects a ",(0,o.mdx)("inlineCode",{parentName:"p"},"Blob")," object as the first argument, an optional ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/app-document.md#mediaattributes"},(0,o.mdx)("inlineCode",{parentName:"a"},"MediaAttribute"))," object with the image's title and author, and an optional ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/app-document.md#importaddondata"},(0,o.mdx)("inlineCode",{parentName:"a"},"ImportAddOnData"))," object with custom metadata that can be retrieved later via document sandbox APIs."),(0,o.mdx)(l,{slots:"header, text",variant:"info",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"Iframe vs. Document Sandbox"),(0,o.mdx)("p",null,"The following snippets import the ",(0,o.mdx)("inlineCode",{parentName:"p"},"addOnUISdk")," object, and belong to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ui/index.js")," file. This is the ",(0,o.mdx)("strong",{parentName:"p"},"iframe")," side of the add-on's houseâ€”whereas most of the Design Elements how-tos make use of the ",(0,o.mdx)("strong",{parentName:"p"},"Document Sandbox API")," (in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"sandbox/code.js")," file)."),(0,o.mdx)("h3",{id:"example"},"Example"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'// ui/index.js\nimport addOnUISdk from "https://express.adobe.com/static/add-on-sdk/sdk.js";\n\naddOnUISdk.ready.then(async () => {\n  try {\n    const imageUrl = "https://placehold.co/600x400.png";\n    const image = await fetch(imageUrl);\n    const imageBlob = await image.blob();\n\n    await addOnUISdk.app.document.addImage(\n      imageBlob, // ðŸ‘ˆ Blob object\n      {\n        title: "Placeholder image", // ðŸ‘ˆ Optional MediaAttributes\n        author: "Adobe Developer",\n      },\n      { // ðŸ‘ˆ Optional ImportAddOnData - metadata that persists with the image\n        nodeAddOnData: { "imageId": "placeholder_123", "category": "demo" },\n        mediaAddOnData: { "source": "external", "resolution": "600x400" }\n      }\n    );\n  } catch (e) {\n    console.error("Failed to add the image", e);\n  }\n});\n')),(0,o.mdx)("p",null,"You can use ",(0,o.mdx)("inlineCode",{parentName:"p"},"fetch()")," also to get images that are local to the add-on; in this case, paths should be relative to the add-on's root."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'// ui/index.js\nimport addOnUISdk from "https://express.adobe.com/static/add-on-sdk/sdk.js";\n\naddOnUISdk.ready.then(async () => {\n  try {\n    const imageUrl = "./600x400.png";     // ðŸ‘ˆ Local image\n    const image = await fetch(imageUrl);\n    // ... same as before\n')),(0,o.mdx)(l,{slots:"header, text",variant:"info",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"Image requirements"),(0,o.mdx)("p",null,"Please refer to ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/app-document.md#image-requirements"},"this section")," to know more about the file formats support and size requirements for images."),(0,o.mdx)("h2",{id:"import-animated-images"},"Import Animated images"),(0,o.mdx)("p",null,"Importing a ",(0,o.mdx)("inlineCode",{parentName:"p"},"GIF")," via ",(0,o.mdx)("inlineCode",{parentName:"p"},"addImage()")," won't work as expected, as the method converts the animation into a static image before adding it to the document. You should use the ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/addonsdk/app-document.md#addanimatedimage"},(0,o.mdx)("inlineCode",{parentName:"a"},"addAnimatedImage()"))," method instead."),(0,o.mdx)("h3",{id:"example-1"},"Example"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'// ui/index.js\nimport addOnUISdk from "https://express.adobe.com/static/add-on-sdk/sdk.js";\n\naddOnUISdk.ready.then(async () => {\n  try {\n    const gifImageUrl = "https://path/to/a/file.gif"; // ðŸ‘ˆ a GIF image\n    const gifImage = await fetch(gifImageUrl);\n    const gifImageBlob = await gifImage.blob();\n\n    await addOnUISdk.app.document.addAnimatedImage(\n      // ðŸ‘ˆ\n      gifImageBlob, // ðŸ‘ˆ Blob object\n      {\n        title: "Animated GIF",\n        author: "GIF Creator"\n      }, // ðŸ‘ˆ Optional MediaAttributes\n      { // ðŸ‘ˆ Optional ImportAddOnData\n        nodeAddOnData: { "gifId": "animated_456", "type": "animation" },\n        mediaAddOnData: { "duration": "3s", "frames": "24" }\n      }\n    );\n  } catch (e) {\n    console.error("Failed to add the image", e);\n  }\n});\n')),(0,o.mdx)(l,{slots:"header, text",variant:"warning",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"GIF Image requirements"),(0,o.mdx)("p",null,"All image formats are equal, but some formats are more equal than others. Please refer to ",(0,o.mdx)("a",{parentName:"p",href:"../../support/faq.md#are-animated-gifs-supported-when-importing-or-dragging-content-to-the-document"},"this FAQ")," to learn more about specific GIF limitations in terms of size and weight."),(0,o.mdx)("h2",{id:"replace-media"},"Replace Media"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/document-sandbox/document-apis/classes/MediaContainerNode.md#replacemedia"},(0,o.mdx)("inlineCode",{parentName:"a"},"replaceMedia()"))," method can be used to replace an existing media with a new one. It accepts a single argument of type ",(0,o.mdx)("a",{parentName:"p",href:"../../../references/document-sandbox/document-apis/classes/BitmapImage.md"},(0,o.mdx)("inlineCode",{parentName:"a"},"BitmapImage")),"."),(0,o.mdx)(l,{slots:"text",variant:"info",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"Compared to the previous examples, replacing media is a method that belongs to the ",(0,o.mdx)("strong",{parentName:"p"},"Document Sandbox API")," (in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"sandbox/code.js")," file), and not to the ",(0,o.mdx)("strong",{parentName:"p"},"iframe")," (in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ui/index.js")," file)."),(0,o.mdx)("h3",{id:"example-2"},"Example"),(0,o.mdx)("p",null,"Because the Document Sandbox doesn't have access to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"fetch()")," function, in the following example the Bitmap data is fetched on the iframe side, and passed to the Document Sandbox to be replaced using the ",(0,o.mdx)("a",{parentName:"p",href:"./tutorials/stats-addon.md"},"Communication API"),"."),(0,o.mdx)("p",null,"You can copy and paste the following code into a ",(0,o.mdx)("a",{parentName:"p",href:"../../getting_started/code_playground.md"},"Code Playground")," session to try it out."),(0,o.mdx)(p,{slots:"heading, code",repeat:"4",languages:"HTML, CSS, iFrame JS, Document JS",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"html"},"HTML"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8" />\n  <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Get Started</title>\n</head>\n  <body>\n    <div class="container">\n      <button id="replace-media-btn" disabled>Replace Media</button>\n    </div>\n  </body>\n</html>\n')),(0,o.mdx)("h4",{id:"css"},"CSS"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-css"},".container {\n  margin: 24px;\n  display: flex;\n  flex-direction: column;\n}\n\nbutton {\n  background-color: rgb(82, 88, 228);\n  border-color: rgb(82, 88, 228);\n  border-radius: 16px;\n  border-style: solid;\n  color: rgb(255, 255, 255);\n  font-family: sans-serif;\n  height: 32px;\n}\n\nbutton:disabled {\n  background-color: rgb(177, 177, 177);\n  border-color: rgb(177, 177, 177);\n}\n\nbutton:not([disabled]):hover {\n  background-color: rgb(64, 70, 202);\n  cursor: pointer;\n}\n\n")),(0,o.mdx)("h4",{id:"iframe-js"},"iFrame JS"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'import addOnUISdk from "https://express.adobe.com/static/add-on-sdk/sdk.js";\n\naddOnUISdk.ready.then(async () => {\n  const { runtime } = addOnUISdk.instance;\n\n  // Get the Document Sandbox proxy\n  const sandboxProxy = await runtime.apiProxy("documentSandbox");\n\n  // Get the button and message elements\n  const replaceButton = document.getElementById("replace-media-btn");\n  const messageDiv = document.getElementById("message");\n\n  // Enable the button once everything is ready\n  replaceButton.disabled = false;\n\n  // Function to show messages to the user\n  function showMessage(text, type = "error") {\n    messageDiv.textContent = text;\n    messageDiv.className = `message ${type}`;\n    messageDiv.style.display = "block";\n\n    // Hide message after 3 seconds for success, keep error messages visible\n    if (type === "success") {\n      setTimeout(() => {\n        messageDiv.style.display = "none";\n      }, 3000);\n    }\n  }\n\n  // Function to replace media in selected container\n  async function replaceSelectedMedia() {\n    try {\n      // Hide any previous messages\n      messageDiv.style.display = "none";\n\n      replaceButton.disabled = true;\n      replaceButton.textContent = "Replacing...";\n\n      // Replace with an image from URL\n      const imageUrl = "https://placehold.co/800x600.png";\n\n      // Or replace with a local image:\n      // const imageUrl = "./assets/new-image.jpg";\n\n      const response = await fetch(imageUrl);\n      const imageBlob = await response.blob();\n\n      // Pass the blob to the Document Sandbox and get the result\n      const result = await sandboxProxy.replaceMediaInSelection(imageBlob);\n\n      if (result.success) {\n        replaceButton.textContent = "Media Replaced!";\n        showMessage("Media replaced successfully!", "success");\n        setTimeout(() => {\n          replaceButton.textContent = "Replace Selected Media";\n          replaceButton.disabled = false;\n        }, 2000);\n      } else {\n        replaceButton.textContent = "Replace Selected Media";\n        replaceButton.disabled = false;\n        showMessage(result.error);\n      }\n\n    } catch (error) {\n      console.error("Failed to replace media:", error);\n      replaceButton.textContent = "Replace Selected Media";\n      replaceButton.disabled = false;\n      showMessage("An unexpected error occurred. Please try again.");\n    }\n  }\n\n  // Add click event listener to the button\n  replaceButton.addEventListener("click", replaceSelectedMedia);\n});\n')),(0,o.mdx)("h4",{id:"document-js"},"Document JS"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'import addOnSandboxSdk from "add-on-sdk-document-sandbox";\nimport { editor, constants } from "express-document-sdk";\n\nconst { runtime } = addOnSandboxSdk.instance;\n\nruntime.exposeApi({\n  async replaceMediaInSelection(imageBlob) {\n    try {\n      // Check if there\'s a selection and it\'s a MediaContainerNode\n      if (!editor.context.hasSelection) {\n        return {\n          success: false,\n          error: "No node selected. Please select a MediaContainerNode first."\n        };\n      }\n\n      const selectedNode = editor.context.selection[0];\n      if (selectedNode.type !== constants.SceneNodeType.mediaContainer) {\n        return {\n          success: false,\n          error: "Selected node is not a MediaContainerNode. Please select an image or media container."\n        };\n      }\n\n      // Load the new image as a BitmapImage\n      const bitmapImage = await editor.loadBitmapImage(imageBlob);\n\n      // Replace the media using queueAsyncEdit since loadBitmapImage is async\n      editor.queueAsyncEdit(() => {\n        selectedNode.replaceMedia(bitmapImage);\n      });\n\n      return {\n        success: true\n      };\n\n    } catch (error) {\n      console.error("Failed to replace media:", error);\n      return {\n        success: false,\n        error: "Failed to replace media. Please try again."\n      };\n    }\n  }\n});\n')),(0,o.mdx)("h3",{id:"media-node-structure"},"Media Node structure"),(0,o.mdx)("p",null,"It may be useful to know how Adobe Express represents media nodes in a document, using three Classes:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},(0,o.mdx)("inlineCode",{parentName:"strong"},"MediaContainerNode")),", the main container")),(0,o.mdx)("p",null,"The parent node that displays media within a crop mask. It holds two children:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"maskShape"),": a FillableNode defining the visible bounds."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"mediaRectangle"),": the actual media (image or video). It also provides ",(0,o.mdx)("inlineCode",{parentName:"li"},"replaceMedia()")," to swap content.")),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},(0,o.mdx)("inlineCode",{parentName:"strong"},"MediaRectangleNode")),", the abstract base")),(0,o.mdx)("p",null,"An abstract base for uncropped, full-frame rectangular media. It canâ€™t be instantiated directly, but defines core properties (width, height, and media data) and shared behavior for positioning, rotation, and sizing."),(0,o.mdx)("ol",{start:3},(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("strong",{parentName:"li"},(0,o.mdx)("inlineCode",{parentName:"strong"},"ImageRectangleNode")),", the concrete class")),(0,o.mdx)("p",null,"A subclass of ",(0,o.mdx)("inlineCode",{parentName:"p"},"MediaRectangleNode")," for bitmap images. Created through ",(0,o.mdx)("inlineCode",{parentName:"p"},"Editor.createImageContainer()"),", it inherits all sizing and positioning features while representing the specific image content."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-text"},"MediaContainerNode\nâ”œâ”€â”€ maskShape                      > FillableNode, defines visible area\nâ””â”€â”€ mediaRectangle                 > MediaRectangleNode\n    â””â”€â”€ ImageRectangleNode         > for images\n    â””â”€â”€ UnknownMediaRectangleNode  > for other media types\n")),(0,o.mdx)("h2",{id:"faqs"},"FAQs"),(0,o.mdx)("h4",{id:"q-how-do-i-add-images-to-a-document"},"Q: How do I add images to a document?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Call ",(0,o.mdx)("inlineCode",{parentName:"p"},"addOnUISdk.app.document.addImage(blob, attributes, importAddOnData)")," with image blob and optional MediaAttributes and ImportAddOnData."),(0,o.mdx)("h4",{id:"q-what-parameters-does-addimage-require"},"Q: What parameters does addImage require?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," A Blob object is required. MediaAttributes (title, author) and ImportAddOnData (custom metadata) are optional."),(0,o.mdx)("h4",{id:"q-how-do-i-get-an-image-as-a-blob"},"Q: How do I get an image as a blob?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,o.mdx)("inlineCode",{parentName:"p"},"fetch(imageUrl).then(r => r.blob())")," to convert images to blob format."),(0,o.mdx)("h4",{id:"q-can-i-use-local-image-files"},"Q: Can I use local image files?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Yes, use relative paths from add-on root with fetch() to load local images."),(0,o.mdx)("h4",{id:"q-how-do-i-add-animated-gifs"},"Q: How do I add animated GIFs?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Use ",(0,o.mdx)("inlineCode",{parentName:"p"},"addOnUISdk.app.document.addAnimatedImage(blob, attributes, importAddOnData)")," instead of addImage()."),(0,o.mdx)("h4",{id:"q-why-doesnt-addimage-work-with-gifs"},"Q: Why doesn't addImage work with GIFs?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," addImage() converts animations to static images; use addAnimatedImage() to preserve animation."),(0,o.mdx)("h4",{id:"q-what-image-formats-are-supported"},"Q: What image formats are supported?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," AI, GIF, JPEG, JPG, PNG, PSD, PSDT, and WEBP. 8000px or 80MB."),(0,o.mdx)("h4",{id:"q-are-there-gif-size-limitations"},"Q: Are there GIF size limitations?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Yes, refer to the FAQ section for specific GIF size and weight limitations."),(0,o.mdx)("h4",{id:"q-how-do-i-replace-media-in-an-existing-mediacontainernode"},"Q: How do I replace media in an existing ",(0,o.mdx)("inlineCode",{parentName:"h4"},"MediaContainerNode"),"?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Use the ",(0,o.mdx)("inlineCode",{parentName:"p"},"replaceMedia()")," method on a ",(0,o.mdx)("inlineCode",{parentName:"p"},"MediaContainerNode")," with a ",(0,o.mdx)("inlineCode",{parentName:"p"},"BitmapImage")," object created via ",(0,o.mdx)("inlineCode",{parentName:"p"},"Editor.loadBitmapImage()"),"."),(0,o.mdx)("h4",{id:"q-can-i-replace-any-media-type-with-replacemedia"},"Q: Can I replace any media type with ",(0,o.mdx)("inlineCode",{parentName:"h4"},"replaceMedia()"),"?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Currently, ",(0,o.mdx)("inlineCode",{parentName:"p"},"replaceMedia()")," only accepts ",(0,o.mdx)("inlineCode",{parentName:"p"},"BitmapImage")," objects. The original media can be any type, but replacement must be a static image."),(0,o.mdx)("h4",{id:"q-how-do-i-attach-custom-metadata-to-imported-images"},"Q: How do I attach custom metadata to imported images?"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"A:")," Use the optional ",(0,o.mdx)("inlineCode",{parentName:"p"},"importAddOnData")," parameter with ",(0,o.mdx)("inlineCode",{parentName:"p"},"nodeAddOnData")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"mediaAddOnData")," objects to store custom metadata that can be retrieved later via document sandbox APIs."))}g.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-learn-how-to-use-images-md-dc4f30802aa5fbfdd955.js.map